<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>CloudyCity&#39;s Blog</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://cloudycity.me/"/>
  <updated>2020-01-08T14:00:31.599Z</updated>
  <id>https://cloudycity.me/</id>
  
  <author>
    <name>CloudyCity</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>如何引用同一级查询的列别名作为新列</title>
    <link href="https://cloudycity.me/p/1ff4.html"/>
    <id>https://cloudycity.me/p/1ff4.html</id>
    <published>2019-08-03T15:46:21.000Z</published>
    <updated>2020-01-08T14:00:31.599Z</updated>
    
    <content type="html"><![CDATA[<p>火星救援，刻不容缓！<br><a id="more"></a><br>示例表：<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">mysql&gt;</span><span class="bash"> SELECT * FROM core;</span></span><br><span class="line">+--------+--------+--------+</span><br><span class="line">| field1 | field2 | field3 |</span><br><span class="line">+--------+--------+--------+</span><br><span class="line">|      1 |      2 |      3 |</span><br><span class="line">|      4 |      5 |      6 |</span><br><span class="line">+--------+--------+--------+</span><br><span class="line">2 rows in set (0.00 sec)</span><br></pre></td></tr></table></figure></p><p><code>MySQL</code>中无法直接执行以下查询：<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">mysql&gt;</span><span class="bash"> SELECT</span></span><br><span class="line">    -&gt;     field1 + field2 AS col1,</span><br><span class="line">    -&gt;     col1 + field3 AS col2</span><br><span class="line">    -&gt; FROM</span><br><span class="line">    -&gt;     core;</span><br><span class="line">ERROR 1054 (42S22): Unknown column 'col1' in 'field list'</span><br></pre></td></tr></table></figure></p><p>但有三种方案实现这个效果。</p><h3 id="子查询"><a href="#子查询" class="headerlink" title="子查询"></a>子查询</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">mysql&gt;</span><span class="bash"> SELECT</span></span><br><span class="line">    -&gt;     col1,</span><br><span class="line">    -&gt;     col1 + field3 AS col2</span><br><span class="line">    -&gt; FROM</span><br><span class="line">    -&gt;     ( SELECT field1 + field2 AS col1, field3 FROM core ) AS subQuery;</span><br><span class="line">+------+------+</span><br><span class="line">| col1 | col2 |</span><br><span class="line">+------+------+</span><br><span class="line">|    3 |    6 |</span><br><span class="line">|    9 |   15 |</span><br><span class="line">+------+------+</span><br><span class="line">2 rows in set (0.00 sec)</span><br></pre></td></tr></table></figure><h3 id="用户变量"><a href="#用户变量" class="headerlink" title="用户变量"></a>用户变量</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">mysql&gt;</span><span class="bash"> SELECT</span></span><br><span class="line">    -&gt;     @col1 := ( field1 + field2 ) AS col1,</span><br><span class="line">    -&gt;     @col1 + field3 AS col2</span><br><span class="line">    -&gt; FROM</span><br><span class="line">    -&gt;     core;</span><br><span class="line">+------+------+</span><br><span class="line">| col1 | col2 |</span><br><span class="line">+------+------+</span><br><span class="line">|    3 |    6 |</span><br><span class="line">|    9 |   15 |</span><br><span class="line">+------+------+</span><br><span class="line">2 rows in set, 1 warning (0.00 sec)</span><br></pre></td></tr></table></figure><div class="note warning"><p>这里结果显示了一个warning: SELECT里的表达式在被发送到mysql客户端时才会被执行，所以<a href="https://dev.mysql.com/doc/refman/5.6/en/user-variables.html" target="_blank" rel="noopener">用户变量</a>在<code>HAVING</code>、<code>GROUP BY</code>、<code>ORDER BY</code>中无法使用。</p></div><h3 id="引用别名"><a href="#引用别名" class="headerlink" title="引用别名"></a>引用别名</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">mysql&gt;</span><span class="bash"> SELECT</span></span><br><span class="line">    -&gt;     field1 + field2 AS col1,</span><br><span class="line">    -&gt;     ( SELECT col1 ) + field3 AS col2</span><br><span class="line">    -&gt; FROM</span><br><span class="line">    -&gt;     core;</span><br><span class="line">+------+------+</span><br><span class="line">| col1 | col2 |</span><br><span class="line">+------+------+</span><br><span class="line">|    3 |    6 |</span><br><span class="line">|    9 |   15 |</span><br><span class="line">+------+------+</span><br><span class="line">2 rows in set (0.00 sec)</span><br></pre></td></tr></table></figure><div class="note warning"><p>与<code>用户变量</code>类似，在<code>GROUP BY</code>中无法使用。</p></div><p>在<code>GROUP BY</code>里中使用引用:<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">mysql&gt;</span><span class="bash"> SELECT</span></span><br><span class="line">    -&gt;     MAX( field1 ) AS col1,</span><br><span class="line">    -&gt;     ( SELECT col1 ) AS col2</span><br><span class="line">    -&gt; FROM</span><br><span class="line">    -&gt;     core</span><br><span class="line">    -&gt; GROUP BY</span><br><span class="line">    -&gt;     field1;</span><br><span class="line">ERROR 1247 (42S22): Reference 'col1' not supported (reference to group function)</span><br></pre></td></tr></table></figure></p><h3 id="References"><a href="#References" class="headerlink" title="References"></a>References</h3><p><a href="https://stackoverflow.com/questions/6081436/how-to-alias-a-field-or-column-in-mysql#" target="_blank" rel="noopener">https://stackoverflow.com/questions/6081436/how-to-alias-a-field-or-column-in-mysql#</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;火星救援，刻不容缓！&lt;br&gt;
    
    </summary>
    
      <category term="db" scheme="https://cloudycity.me/categories/db/"/>
    
    
      <category term="mysql" scheme="https://cloudycity.me/tags/mysql/"/>
    
  </entry>
  
  <entry>
    <title>用Docker搭建LNMP环境</title>
    <link href="https://cloudycity.me/p/b254.html"/>
    <id>https://cloudycity.me/p/b254.html</id>
    <published>2019-07-19T09:57:13.000Z</published>
    <updated>2020-01-08T14:00:31.598Z</updated>
    
    <content type="html"><![CDATA[<p>人类的本质是复读机。<br><a id="more"></a></p><h3 id="安装docker"><a href="#安装docker" class="headerlink" title="安装docker"></a>安装docker</h3><h4 id="查看内核版本"><a href="#查看内核版本" class="headerlink" title="查看内核版本"></a>查看内核版本</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ uname -r</span><br><span class="line">3.10.0-957.el7.x86_64</span><br></pre></td></tr></table></figure><h4 id="更新yum包"><a href="#更新yum包" class="headerlink" title="更新yum包"></a>更新yum包</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ yum update</span><br></pre></td></tr></table></figure><h4 id="添加包源"><a href="#添加包源" class="headerlink" title="添加包源"></a>添加包源</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ yum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo</span><br><span class="line">Loaded plugins: fastestmirror, langpacks</span><br><span class="line">adding repo from: https://download.docker.com/linux/centos/docker-ce.repo</span><br><span class="line">grabbing file https://download.docker.com/linux/centos/docker-ce.repo to /etc/yum.repos.d/docker-ce.repo</span><br><span class="line">repo saved to /etc/yum.repos.d/docker-ce.repo</span><br></pre></td></tr></table></figure><h4 id="查看版本"><a href="#查看版本" class="headerlink" title="查看版本"></a>查看版本</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">$ yum list docker-ce --showduplicates | sort -r</span><br><span class="line">Loading mirror speeds from cached hostfile</span><br><span class="line">Loaded plugins: fastestmirror, langpacks</span><br><span class="line">docker-ce.x86_64            3:18.09.8-3.el7                     docker-ce-stable</span><br><span class="line">docker-ce.x86_64            3:18.09.7-3.el7                     docker-ce-stable</span><br><span class="line">docker-ce.x86_64            3:18.09.6-3.el7                     docker-ce-stable</span><br><span class="line">docker-ce.x86_64            3:18.09.5-3.el7                     docker-ce-stable</span><br><span class="line">docker-ce.x86_64            3:18.09.4-3.el7                     docker-ce-stable</span><br><span class="line">docker-ce.x86_64            3:18.09.3-3.el7                     docker-ce-stable</span><br><span class="line">docker-ce.x86_64            3:18.09.2-3.el7                     docker-ce-stable</span><br><span class="line">docker-ce.x86_64            3:18.09.1-3.el7                     docker-ce-stable</span><br><span class="line">docker-ce.x86_64            3:18.09.0-3.el7                     docker-ce-stable</span><br><span class="line">docker-ce.x86_64            18.06.3.ce-3.el7                    docker-ce-stable</span><br><span class="line">docker-ce.x86_64            18.06.2.ce-3.el7                    docker-ce-stable</span><br><span class="line">docker-ce.x86_64            18.06.1.ce-3.el7                    docker-ce-stable</span><br><span class="line">docker-ce.x86_64            18.06.0.ce-3.el7                    docker-ce-stable</span><br><span class="line">docker-ce.x86_64            18.03.1.ce-1.el7.centos             docker-ce-stable</span><br><span class="line">docker-ce.x86_64            18.03.0.ce-1.el7.centos             docker-ce-stable</span><br><span class="line">docker-ce.x86_64            17.12.1.ce-1.el7.centos             docker-ce-stable</span><br><span class="line">docker-ce.x86_64            17.12.0.ce-1.el7.centos             docker-ce-stable</span><br><span class="line">docker-ce.x86_64            17.09.1.ce-1.el7.centos             docker-ce-stable</span><br><span class="line">docker-ce.x86_64            17.09.0.ce-1.el7.centos             docker-ce-stable</span><br><span class="line">docker-ce.x86_64            17.06.2.ce-1.el7.centos             docker-ce-stable</span><br><span class="line">docker-ce.x86_64            17.06.1.ce-1.el7.centos             docker-ce-stable</span><br><span class="line">docker-ce.x86_64            17.06.0.ce-1.el7.centos             docker-ce-stable</span><br><span class="line">docker-ce.x86_64            17.03.3.ce-1.el7                    docker-ce-stable</span><br><span class="line">docker-ce.x86_64            17.03.2.ce-1.el7.centos             docker-ce-stable</span><br><span class="line">docker-ce.x86_64            17.03.1.ce-1.el7.centos             docker-ce-stable</span><br><span class="line">docker-ce.x86_64            17.03.0.ce-1.el7.centos             docker-ce-stable</span><br><span class="line">Available Packages</span><br></pre></td></tr></table></figure><h4 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ yum install docker-ce-18.03.1.ce</span><br></pre></td></tr></table></figure><h4 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ systemctl start docker</span><br></pre></td></tr></table></figure><h4 id="设置开机启动-可选"><a href="#设置开机启动-可选" class="headerlink" title="设置开机启动 (可选)"></a>设置开机启动 (可选)</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ systemctl <span class="built_in">enable</span> docker</span><br><span class="line">Created symlink from /etc/systemd/system/multi-user.target.wants/docker.service to /usr/lib/systemd/system/docker.service.</span><br></pre></td></tr></table></figure><h4 id="查看"><a href="#查看" class="headerlink" title="查看"></a>查看</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">$ docker version</span><br><span class="line">Client:</span><br><span class="line"> Version:      18.03.1-ce</span><br><span class="line"> API version:  1.37</span><br><span class="line"> Go version:   go1.9.5</span><br><span class="line"> Git commit:   9ee9f40</span><br><span class="line"> Built:        Thu Apr 26 07:20:16 2018</span><br><span class="line"> OS/Arch:      linux/amd64</span><br><span class="line"> Experimental: <span class="literal">false</span></span><br><span class="line"> Orchestrator: swarm</span><br><span class="line"></span><br><span class="line">Server:</span><br><span class="line"> Engine:</span><br><span class="line">  Version:      18.03.1-ce</span><br><span class="line">  API version:  1.37 (minimum version 1.12)</span><br><span class="line">  Go version:   go1.9.5</span><br><span class="line">  Git commit:   9ee9f40</span><br><span class="line">  Built:        Thu Apr 26 07:23:58 2018</span><br><span class="line">  OS/Arch:      linux/amd64</span><br><span class="line">  Experimental: <span class="literal">false</span></span><br></pre></td></tr></table></figure><h3 id="安装docker-compose"><a href="#安装docker-compose" class="headerlink" title="安装docker-compose"></a>安装docker-compose</h3><h4 id="从github安装"><a href="#从github安装" class="headerlink" title="从github安装"></a>从github安装</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ curl -L <span class="string">"https://github.com/docker/compose/releases/download/1.24.1/docker-compose-<span class="variable">$(uname -s)</span>-<span class="variable">$(uname -m)</span>"</span> -o /usr/<span class="built_in">local</span>/bin/docker-compose</span><br></pre></td></tr></table></figure><h4 id="给予执行权限"><a href="#给予执行权限" class="headerlink" title="给予执行权限"></a>给予执行权限</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ chmod +x /usr/<span class="built_in">local</span>/bin/docker-compose</span><br></pre></td></tr></table></figure><h4 id="查看-1"><a href="#查看-1" class="headerlink" title="查看"></a>查看</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ docker-compose --version</span><br><span class="line">docker-compose version 1.24.1, build 4667896b</span><br></pre></td></tr></table></figure><h3 id="搭建LNMP"><a href="#搭建LNMP" class="headerlink" title="搭建LNMP"></a>搭建LNMP</h3><p>这里直接用<a href="https://github.com/yeszao/dnmp" target="_blank" rel="noopener">yeszao/dnmp</a>的配置。</p><h4 id="选取目录"><a href="#选取目录" class="headerlink" title="选取目录"></a>选取目录</h4><p>选择一个存放容器配置的目录(只是配置文件位置，镜像与容器在<code>/var/lib/docker</code>目录中)<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> ~ &amp;&amp; mkdir dnmp &amp;&amp; <span class="built_in">cd</span> dnmp</span><br></pre></td></tr></table></figure></p><h4 id="拉取配置"><a href="#拉取配置" class="headerlink" title="拉取配置"></a>拉取配置</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git <span class="built_in">clone</span> git@github.com:yeszao/dnmp.git <span class="comment"># 这里用的是v2.0.4的tag</span></span><br><span class="line">$ cp env.sample .env &amp;&amp; cp docker-compose.sample.yml docker-compose.yml</span><br></pre></td></tr></table></figure><h4 id="修改配置"><a href="#修改配置" class="headerlink" title="修改配置"></a>修改配置</h4><p>这里<code>docker-compose.yml</code> 只开启了<code>nginx</code>、<code>php</code>、<code>mysql8</code>和<code>redis</code>，<code>.env</code> 给php加了一些扩展。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># .env</span></span><br><span class="line">PHP_VERSION=7.2.19</span><br><span class="line">PHP_PHP_CONF_FILE=./conf/php.ini</span><br><span class="line">PHP_FPM_CONF_FILE=./conf/php-fpm.conf</span><br><span class="line">PHP_LOG_DIR=./<span class="built_in">log</span>/php</span><br><span class="line">PHP_EXTENSIONS=pdo_mysql,mysqli,mbstring,gd,curl,opcache,redis,imap,swoole,xhprof,acpu</span><br></pre></td></tr></table></figure></p><p>所有配置文件都在<code>~/dnmp/services/</code>目录中，所有日志都在<code>~/dnmp/log</code>中，具体见<a href="https://github.com/yeszao/dnmp" target="_blank" rel="noopener">yeszao/dnmp</a>。</p><h4 id="执行构建"><a href="#执行构建" class="headerlink" title="执行构建"></a>执行构建</h4><p>在配置文件处执行<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ docker-compose up -d</span><br><span class="line">Creating network <span class="string">"dnmp_default"</span> with the default driver</span><br><span class="line">Creating redis ... <span class="keyword">done</span></span><br><span class="line">Creating mysql ... <span class="keyword">done</span></span><br><span class="line">Creating php   ... <span class="keyword">done</span></span><br><span class="line">Creating nginx ... <span class="keyword">done</span></span><br></pre></td></tr></table></figure></p><p>初始构建需要一定时间，如果构建时无法下载组件，需要给容器指定dns服务器。</p><ol><li><p>查看宿主机<code>nameserver</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">$ cat /etc/resolv.conf</span><br><span class="line"># Your system has been configured with &apos;manage-resolv-conf&apos; set to true.</span><br><span class="line"># As a result, cloud-init has written this file with configuration data</span><br><span class="line"># that it has been provided. Cloud-init, by default, will write this file</span><br><span class="line"># a single time (PER_ONCE).</span><br><span class="line">#</span><br><span class="line">nameserver 183.60.83.19</span><br><span class="line">nameserver 183.60.82.98</span><br></pre></td></tr></table></figure></li><li><p>新建或修改<code>/etc/default/docker</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">DOCKER_OPTS=&quot;--dns 183.60.83.19&quot;</span><br></pre></td></tr></table></figure></li><li><p>重启<code>docker</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl restart docker</span><br></pre></td></tr></table></figure></li></ol><h4 id="查看容器"><a href="#查看容器" class="headerlink" title="查看容器"></a>查看容器</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$ docker-compose ps</span><br><span class="line">Name               Command              State                    Ports</span><br><span class="line">----------------------------------------------------------------------------------------</span><br><span class="line">mysql   docker-entrypoint.sh mysqld     Up      0.0.0.0:3306-&gt;3306/tcp, 33060/tcp</span><br><span class="line">nginx   nginx -g daemon off;            Up      0.0.0.0:443-&gt;443/tcp, 0.0.0.0:80-&gt;80/tcp</span><br><span class="line">php     docker-php-entrypoint php-fpm   Up      9000/tcp, 9501/tcp</span><br><span class="line">redis   redis-server /etc/redis.conf    Up      0.0.0.0:6379-&gt;6379/tcp</span><br></pre></td></tr></table></figure><h4 id="配置命令别名"><a href="#配置命令别名" class="headerlink" title="配置命令别名"></a>配置命令别名</h4><p>从<code>bash.alias.sample</code>提取需要的别名到<code>~/.bashrc</code>或<code>~/.zshrc</code>中，然后重新<code>source</code>生效<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">alias dnginx='docker exec -it nginx /bin/sh'</span><br><span class="line">alias dphp='docker exec -it php /bin/sh'</span><br><span class="line">alias dmysql='docker exec -it mysql /bin/bash'</span><br><span class="line">alias dredis='docker exec -it redis /bin/sh'</span><br><span class="line"></span><br><span class="line">php () &#123;</span><br><span class="line">tty=</span><br><span class="line">tty -s &amp;&amp; tty=--tty</span><br><span class="line">docker run \</span><br><span class="line"><span class="meta">$</span><span class="bash">tty \</span></span><br><span class="line">--interactive \</span><br><span class="line">--rm \</span><br><span class="line">--volume $PWD:/www:rw \</span><br><span class="line">--workdir /www \</span><br><span class="line">dnmp_php php "$@"</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">composer() &#123;</span><br><span class="line">tty=</span><br><span class="line">tty -s &amp;&amp; tty=--tty</span><br><span class="line">docker run \</span><br><span class="line"><span class="meta">$</span><span class="bash">tty \</span></span><br><span class="line">--interactive \</span><br><span class="line">--rm \</span><br><span class="line">--user www-data:www-data \</span><br><span class="line">--volume ~/dnmp/data/composer:/tmp/composer \</span><br><span class="line">--volume $(pwd):/app \</span><br><span class="line">--workdir /app \</span><br><span class="line">dnmp_php composer "$@"</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="References"><a href="#References" class="headerlink" title="References"></a>References</h3><p><a href="https://docs.docker.com/install/linux/docker-ce/centos/" target="_blank" rel="noopener">Get Docker CE for CentOS</a><br><a href="https://docs.docker.com/compose/install/" target="_blank" rel="noopener">Install Docker Compose</a><br><a href="https://github.com/yeszao/dnmp" target="_blank" rel="noopener">yeszao/dnmp</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;人类的本质是复读机。&lt;br&gt;
    
    </summary>
    
      <category term="运维" scheme="https://cloudycity.me/categories/%E8%BF%90%E7%BB%B4/"/>
    
    
      <category term="docker" scheme="https://cloudycity.me/tags/docker/"/>
    
  </entry>
  
  <entry>
    <title>使用Webpack开发JS Sdk</title>
    <link href="https://cloudycity.me/p/b8f0.html"/>
    <id>https://cloudycity.me/p/b8f0.html</id>
    <published>2019-07-17T05:55:32.000Z</published>
    <updated>2020-01-08T14:00:31.598Z</updated>
    
    <content type="html"><![CDATA[<p>最近项目需要开发一个JS Sdk，为了保证可读性与可维护性，决定按模块开发，最后使用webpack打包。<br><a id="more"></a></p><h3 id="文件结构"><a href="#文件结构" class="headerlink" title="文件结构"></a>文件结构</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">|-- config</span><br><span class="line">|   |-- webpack.base.js</span><br><span class="line">|   |-- webpack.development.js</span><br><span class="line">|   `-- webpack.production.js</span><br><span class="line">|-- dist</span><br><span class="line">|   |-- mars_minigame_sdk.js</span><br><span class="line">|   `-- mars_minigame_sdk.min.js</span><br><span class="line">|-- node_modules</span><br><span class="line">|-- package-lock.json</span><br><span class="line">|-- package.json</span><br><span class="line">|-- src</span><br><span class="line">|   |-- index.js      # SDK入口</span><br><span class="line">|   |-- lib</span><br><span class="line">|   |   `-- util.js   # 工具函数</span><br><span class="line">|   `-- sdk           # 各渠道SDK</span><br><span class="line">|       |-- qq.js </span><br><span class="line">|       `-- wechat.js</span><br><span class="line">`-- webpack.config.js</span><br></pre></td></tr></table></figure><h3 id="安装依赖"><a href="#安装依赖" class="headerlink" title="安装依赖"></a>安装依赖</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm install -g webpack webpack-cli</span><br><span class="line">npm install --save-dev webpack webpack-cli webpack-merge uglifyjs-webpack-plugin babel-loader</span><br></pre></td></tr></table></figure><h3 id="配置webpack"><a href="#配置webpack" class="headerlink" title="配置webpack"></a>配置webpack</h3><p><code>config\webpack.base.js</code><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    entry: &#123;</span><br><span class="line">        <span class="string">'mars_minigame_sdk'</span>: <span class="string">'@/index.js'</span></span><br><span class="line">    &#125;,</span><br><span class="line">    output: &#123;</span><br><span class="line">        path: path.resolve(__dirname, <span class="string">'../dist'</span>),</span><br><span class="line">        filename: <span class="string">'[name].min.js'</span>,</span><br><span class="line">        library: <span class="string">'mars_mg_sdk'</span>,</span><br><span class="line">        libraryTarget: <span class="string">"umd"</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="built_in">module</span>: &#123;</span><br><span class="line">        rules: [</span><br><span class="line">            &#123; </span><br><span class="line">                test: <span class="regexp">/\.js$/</span>, </span><br><span class="line">                exclude: <span class="regexp">/node_modules/</span>, </span><br><span class="line">                use: &#123;</span><br><span class="line">                    loader: <span class="string">"babel-loader"</span> </span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        ]</span><br><span class="line">    &#125;,</span><br><span class="line">    resolve: &#123;</span><br><span class="line">        alias: &#123;</span><br><span class="line">            <span class="string">'@'</span>: path.resolve(<span class="string">'src'</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><code>config\webpack.development.js</code><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> merge = <span class="built_in">require</span>(<span class="string">"webpack-merge"</span>);</span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    devtool: <span class="string">'source-map'</span>,</span><br><span class="line">    output: &#123;</span><br><span class="line">        filename: <span class="string">'[name].js'</span>,</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><code>config\webpack.production.js</code><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> merge = <span class="built_in">require</span>(<span class="string">"webpack-merge"</span>);</span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    output: &#123;</span><br><span class="line">        filename: <span class="string">'[name].min.js'</span>,</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><code>webpack.config.js</code><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> merge = <span class="built_in">require</span>(<span class="string">'webpack-merge'</span>);</span><br><span class="line"><span class="keyword">const</span> baseConfig = <span class="built_in">require</span>(<span class="string">'./config/webpack.base'</span>);</span><br><span class="line"><span class="keyword">const</span> developmentConfig = <span class="built_in">require</span>(<span class="string">'./config/webpack.development'</span>);</span><br><span class="line"><span class="keyword">const</span> productionConfig = <span class="built_in">require</span>(<span class="string">'./config/webpack.production'</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = <span class="function"><span class="params">mode</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (mode === <span class="string">"production"</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> merge(baseConfig, productionConfig, &#123; mode &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> merge(baseConfig, developmentConfig, &#123; mode &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><code>package.json</code><br><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"name"</span>: <span class="string">"mars_mg_sdk"</span>,</span><br><span class="line">  <span class="attr">"version"</span>: <span class="string">"1.0.0"</span>,</span><br><span class="line">  <span class="attr">"description"</span>: <span class="string">"火星救援小游戏SDK"</span>,</span><br><span class="line">  <span class="attr">"private"</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="attr">"scripts"</span>: &#123;</span><br><span class="line">    <span class="attr">"test"</span>: <span class="string">"echo \"Error: no test specified\" &amp;&amp; exit 1"</span>,</span><br><span class="line">    <span class="attr">"start"</span>: <span class="string">"npm run dev"</span>,</span><br><span class="line">    <span class="attr">"dev"</span>: <span class="string">"webpack --watch --env development"</span>,</span><br><span class="line">    <span class="attr">"build"</span>: <span class="string">"webpack --env production"</span>,</span><br><span class="line">    <span class="attr">"server"</span>: <span class="string">"webpack-dev-server --open --env development"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"repository"</span>: &#123;</span><br><span class="line">    <span class="attr">"type"</span>: <span class="string">"git"</span>,</span><br><span class="line">    <span class="attr">"url"</span>: <span class="string">"ssh://git@gitlab.mars.com/lcpd/mars_mg_sdk.git"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"keywords"</span>: [</span><br><span class="line">    <span class="string">"火星救援"</span>,</span><br><span class="line">    <span class="string">"小游戏"</span>,</span><br><span class="line">    <span class="string">"SDK"</span></span><br><span class="line">  ],</span><br><span class="line">  <span class="attr">"author"</span>: <span class="string">"Mars Developer"</span>,</span><br><span class="line">  <span class="attr">"license"</span>: <span class="string">"MIT"</span>,</span><br><span class="line">  <span class="attr">"dependencies"</span>: &#123;&#125;,</span><br><span class="line">  <span class="attr">"devDependencies"</span>: &#123;</span><br><span class="line">    <span class="attr">"@babel/core"</span>: <span class="string">"^7.5.4"</span>,</span><br><span class="line">    <span class="attr">"babel-loader"</span>: <span class="string">"^8.0.6"</span>,</span><br><span class="line">    <span class="attr">"uglifyjs-webpack-plugin"</span>: <span class="string">"^2.1.3"</span>,</span><br><span class="line">    <span class="attr">"webpack"</span>: <span class="string">"^4.35.3"</span>,</span><br><span class="line">    <span class="attr">"webpack-cli"</span>: <span class="string">"^3.3.5"</span>,</span><br><span class="line">    <span class="attr">"webpack-dev-server"</span>: <span class="string">"^3.7.2"</span>,</span><br><span class="line">    <span class="attr">"webpack-merge"</span>: <span class="string">"^4.2.1"</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="业务代码"><a href="#业务代码" class="headerlink" title="业务代码"></a>业务代码</h3><p><code>index.js</code><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> qqSdk = <span class="built_in">require</span>(<span class="string">'./sdk/qq'</span>);</span><br><span class="line"><span class="keyword">const</span> wechatSdk = <span class="built_in">require</span>(<span class="string">'./sdk/wechat'</span>);</span><br><span class="line"><span class="keyword">const</span> util = <span class="built_in">require</span>(<span class="string">'./lib/util'</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">window</span>.apiHost = <span class="string">'https://api.mp.mars.com/'</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    init: <span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;&#125;,</span><br><span class="line">    login: <span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;&#125;,</span><br><span class="line">    pay: <span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><code>sdk\wechat.js</code><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> util = <span class="built_in">require</span>(<span class="string">'../lib/util'</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    init: <span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;&#125;,</span><br><span class="line">    login: <span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;&#125;,</span><br><span class="line">    pay: <span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="打包"><a href="#打包" class="headerlink" title="打包"></a>打包</h3><p>打包开发环境文件，即打包成<code>mars_minigame_sdk.js</code>。启动命令参数加了<code>--watch</code>，文件改动时会自动打包。<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm run dev</span><br></pre></td></tr></table></figure></p><p><img src="/images/loading/loading_1.gif" data-original="https://user-images.githubusercontent.com/17662451/61350182-57528800-a899-11e9-84b5-4aed02fcb550.png" alt="image"></p><p>打包生产环境文件，即<code>mars_minigame_sdk.min.js</code><br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm run build</span><br></pre></td></tr></table></figure></p><p><img src="/images/loading/loading_1.gif" data-original="https://user-images.githubusercontent.com/17662451/61350264-8a951700-a899-11e9-8c48-34209c8a14b7.png" alt="image"></p><h3 id="使用SDK"><a href="#使用SDK" class="headerlink" title="使用SDK"></a>使用SDK</h3><p>以微信开发工具为例</p><p><img src="/images/loading/loading_1.gif" data-original="https://user-images.githubusercontent.com/17662451/61350545-77367b80-a89a-11e9-94b0-f18ac26bcc3d.png" alt="image"></p><h3 id="References"><a href="#References" class="headerlink" title="References"></a>References</h3><p><a href="https://www.baidu.com/link?url=4DZ9UT62RPwYlUbKHWxePeWuWZHGMpRXPSctLMLJSj3Sze_Qwndoshs_6frPE3cnjbm47ZCT2Cp3SvenusCws_&amp;wd=&amp;eqid=ccfe98200005b7d8000000065d37ff52" target="_blank" rel="noopener">用 webpack 写一个简单的 JS SDK</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近项目需要开发一个JS Sdk，为了保证可读性与可维护性，决定按模块开发，最后使用webpack打包。&lt;br&gt;
    
    </summary>
    
      <category term="前端" scheme="https://cloudycity.me/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="webpack" scheme="https://cloudycity.me/tags/webpack/"/>
    
  </entry>
  
  <entry>
    <title>Laravel5.8+Dingo+JWT+Swagger 开发API</title>
    <link href="https://cloudycity.me/p/9f9d.html"/>
    <id>https://cloudycity.me/p/9f9d.html</id>
    <published>2019-06-03T06:03:45.000Z</published>
    <updated>2020-01-08T14:00:31.598Z</updated>
    
    <content type="html"><![CDATA[<p>在Laravel5.8中使用“Laravel必知必会”的两个轮子<code>dingo/api</code>和<code>tymon/jwt-auth</code>以及文档系统<code>swagger-api/swagger-ui</code>开发一个规范优雅的API。<br><a id="more"></a></p><h1 id="Dingo"><a href="#Dingo" class="headerlink" title="Dingo"></a>Dingo</h1><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">composer require dingo/api</span><br></pre></td></tr></table></figure><p><img src="/images/loading/loading_1.gif" data-original="https://user-images.githubusercontent.com/17662451/61279083-05055e80-a7e8-11e9-9e5e-81d4cc8baec1.png" alt="image"><br>组件包含自动包发现配置，无需手动注册Provider</p><h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">php artisan vendor:publish --provider="Dingo\Api\Provider\LaravelServiceProvider"</span><br></pre></td></tr></table></figure><p>无特殊需求直接通过<code>.env</code>文件配置<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> Dingo Api </span></span><br><span class="line">API_STANDARDS_TREE=x</span><br><span class="line">API_SUBTYPE=mp_admin</span><br><span class="line">API_PREFIX=api # 前缀</span><br><span class="line">API_VERSION=v1 # 默认版本</span><br><span class="line">API_NAME="Mp Admin API" # 名称</span><br><span class="line">API_CONDITIONAL_REQUEST=false # 条件请求</span><br><span class="line">API_STRICT=false # 严格模式，开启时请求头必要带标准的Accept信息</span><br><span class="line">API_DEFAULT_FORMAT=json</span><br><span class="line">API_DEBUG=true # 调试</span><br></pre></td></tr></table></figure></p><p>由于子域已被占用，这里采用前缀的格式。接口地址格式为：<a href="https://admin.mp.example.com/api" target="_blank" rel="noopener">https://admin.mp.example.com/api</a></p><h3 id="路由"><a href="#路由" class="headerlink" title="路由"></a>路由</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* <span class="doctag">@var</span> \Dingo\Api\Routing\Router $api */</span></span><br><span class="line">$api = app(<span class="string">'Dingo\Api\Routing\Router'</span>);</span><br><span class="line"></span><br><span class="line">$api-&gt;version(<span class="string">'v1'</span>, <span class="function"><span class="keyword">function</span> <span class="params">()</span> <span class="title">use</span> <span class="params">($api)</span> </span>&#123;</span><br><span class="line">    $api-&gt;group([<span class="string">'middleware'</span> =&gt; [<span class="string">'api'</span>, <span class="string">'bindings'</span>]], <span class="function"><span class="keyword">function</span> <span class="params">()</span> <span class="title">use</span> <span class="params">($api)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 系统调试日志</span></span><br><span class="line">        $api-&gt;get(<span class="string">'dev-logs'</span>, [<span class="string">'as'</span> =&gt; <span class="string">'dev-logs'</span>, <span class="string">'uses'</span> =&gt; <span class="string">'\Rap2hpoutre\LaravelLogViewer\LogViewerController@index'</span>, <span class="string">'middleware'</span> =&gt; [<span class="string">'auth'</span>]]);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 验证</span></span><br><span class="line">        $api-&gt;group([<span class="string">'prefix'</span> =&gt; <span class="string">'auth'</span>], <span class="function"><span class="keyword">function</span> <span class="params">()</span> <span class="title">use</span> <span class="params">($api)</span> </span>&#123;</span><br><span class="line">            $api-&gt;post(<span class="string">'login'</span>, [<span class="string">'as'</span> =&gt; <span class="string">'auth.login'</span>, <span class="string">'uses'</span> =&gt; <span class="string">'App\Http\Controllers\AuthController@login'</span>]);</span><br><span class="line">            $api-&gt;get(<span class="string">'me'</span>, [<span class="string">'as'</span> =&gt; <span class="string">'auth.me'</span>, <span class="string">'uses'</span> =&gt; <span class="string">'App\Http\Controllers\AuthController@me'</span>]);</span><br><span class="line">            $api-&gt;post(<span class="string">'refresh'</span>, [<span class="string">'as'</span> =&gt; <span class="string">'auth.refresh'</span>, <span class="string">'uses'</span> =&gt; <span class="string">'App\Http\Controllers\AuthController@refresh'</span>]);</span><br><span class="line">            $api-&gt;post(<span class="string">'logout'</span>, [<span class="string">'as'</span> =&gt; <span class="string">'auth.logout'</span>, <span class="string">'uses'</span> =&gt; <span class="string">'App\Http\Controllers\AuthController@logout'</span>]);</span><br><span class="line">            $api-&gt;put(<span class="string">'reset-pwd'</span>, [<span class="string">'as'</span> =&gt; <span class="string">'auth.reset-pwd'</span>, <span class="string">'uses'</span> =&gt; <span class="string">'App\Http\Controllers\AuthController@resetPwd'</span>]);</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 系统</span></span><br><span class="line">        $api-&gt;group([<span class="string">'prefix'</span> =&gt; <span class="string">'sys'</span>], <span class="function"><span class="keyword">function</span> <span class="params">()</span> <span class="title">use</span> <span class="params">($api)</span> </span>&#123;</span><br><span class="line">            <span class="comment">// 当前用户能看到的菜单与拥有的权限(别名)</span></span><br><span class="line">            $api-&gt;get(<span class="string">'menu'</span>, [<span class="string">'as'</span> =&gt; <span class="string">'sys.menu'</span>, <span class="string">'uses'</span> =&gt; <span class="string">'App\Http\Controllers\System\AdminController@menu'</span>]);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 系统资源</span></span><br><span class="line">            $api-&gt;resource(<span class="string">'permissions'</span>, <span class="string">'App\Http\Controllers\System\PermissionController'</span>, [<span class="string">'names'</span> =&gt; <span class="string">'sys.permissions'</span>]);</span><br><span class="line">            $api-&gt;resource(<span class="string">'roles'</span>, <span class="string">'App\Http\Controllers\System\RoleController'</span>, [<span class="string">'names'</span> =&gt; <span class="string">'sys.roles'</span>]);</span><br><span class="line">            $api-&gt;resource(<span class="string">'admins'</span>, <span class="string">'App\Http\Controllers\System\AdminController'</span>, [<span class="string">'names'</span> =&gt; <span class="string">'sys.admins'</span>]);</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        ...</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><div class="note warning"><p>所有控制器都需要完整的命名空间，不支持为群组配置命名空间</p></div><h3 id="异常"><a href="#异常" class="headerlink" title="异常"></a>异常</h3><h4 id="定义异常"><a href="#定义异常" class="headerlink" title="定义异常"></a>定义异常</h4><p>Dingo已经定义了接口场景下常用的异常，所以相关异常可以继承<code>\Dingo\Api\Exception\</code>下的异常。例如：<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UpdateResourceFailedException</span> <span class="keyword">extends</span> \<span class="title">Dingo</span>\<span class="title">Api</span>\<span class="title">Exception</span>\<span class="title">UpdateResourceFailedException</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">protected</span> $message = <span class="string">'更新失败'</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">($message = null, $errors = null, \Exception $previous = null, $headers = [], $code = <span class="number">0</span>)</span> </span>&#123;</span><br><span class="line">        $message = $message ?? <span class="keyword">$this</span>-&gt;getMessage();</span><br><span class="line">        <span class="keyword">parent</span>::__construct($message, $errors, $previous, $headers, $code);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h4 id="自定义异常响应"><a href="#自定义异常响应" class="headerlink" title="自定义异常响应"></a>自定义异常响应</h4><p>Dingo会先于Laravel自带的Handle获取<code>Symfony\Component\HttpKernel\Exception</code>，所以在系统Handle::render()中处理不了这些异常。需要这样：<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AppServiceProvider</span> <span class="keyword">extends</span> <span class="title">ServiceProvider</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Register any application services.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> void</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">register</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="comment">// 优化显示验证异常</span></span><br><span class="line">        app(<span class="string">'Dingo\Api\Exception\Handler'</span>)-&gt;register(<span class="function"><span class="keyword">function</span> <span class="params">(ValidationException $exception)</span> </span>&#123;</span><br><span class="line">            $error = $exception-&gt;validator-&gt;errors()-&gt;first();</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> ValidationHttpException($error);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ...</span><br></pre></td></tr></table></figure></p><h3 id="Transformers"><a href="#Transformers" class="headerlink" title="Transformers"></a>Transformers</h3><p>目前通过Eloquent ORM的$casts属性来自动转化字段类型，还没复杂的需求需要用到Transformers。</p><h1 id="JWT"><a href="#JWT" class="headerlink" title="JWT"></a>JWT</h1><h3 id="安装-1"><a href="#安装-1" class="headerlink" title="安装"></a>安装</h3><p>Laravel 5.5以上需要使用1.0.0版本<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">composer require "tymon/jwt-auth:1.0.0-rc.4.1"</span><br></pre></td></tr></table></figure></p><p>在<code>config/app.php</code>中手动注册Provider<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">'providers'</span> =&gt; [</span><br><span class="line"></span><br><span class="line">    ...</span><br><span class="line"></span><br><span class="line">    Tymon\JWTAuth\Providers\LaravelServiceProvider::class,</span><br><span class="line">]</span><br></pre></td></tr></table></figure></p><h3 id="配置-1"><a href="#配置-1" class="headerlink" title="配置"></a>配置</h3><p>发布配置<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">php artisan vendor:publish --provider="Tymon\JWTAuth\Providers\LaravelServiceProvider"</span><br></pre></td></tr></table></figure></p><p>生成密钥(可选)<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">php artisan jwt:secret</span><br></pre></td></tr></table></figure></p><p>配置ENV<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> JWT Oauth</span></span><br><span class="line">JWT_SECRET=F5C5Qodnaa78PGFTFGhWgt7cNaHCOcXTI6SdtfuCfjHpotu7uwmlTy8HlbvsXeNt #64位密钥</span><br><span class="line">JWT_TTL=1440 #Token过期时间</span><br></pre></td></tr></table></figure></p><h3 id="使用验证"><a href="#使用验证" class="headerlink" title="使用验证"></a>使用验证</h3><p>定义一个控制器基类，在构造函数中指定验证中间件即可。<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Controller</span> <span class="keyword">extends</span> <span class="title">BaseController</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">use</span> <span class="title">AuthorizesRequests</span>, <span class="title">DispatchesJobs</span>, <span class="title">ValidatesRequests</span>, <span class="title">Helpers</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Create a new AuthController instance.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> void</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (needAuth()) &#123; <span class="comment">// 助手函数，开发环境不验证Token</span></span><br><span class="line">            <span class="keyword">$this</span>-&gt;middleware(<span class="string">'auth:api'</span>, [<span class="string">'except'</span> =&gt; [<span class="string">'login'</span>]]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>之后所有路由到此控制器子类的请求必须带有Authorization头，值为<code>Bearer $token</code>才能通过检验。</p><div class="note warning"><p>只有继承这个基类的控制器才会进行检验，如果不是其子类需要在路由中指定中间件，例如上面路由中<code>dev-logs</code>的例子。</p></div><h3 id="验证控制器"><a href="#验证控制器" class="headerlink" title="验证控制器"></a>验证控制器</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AuthController</span> <span class="keyword">extends</span> <span class="title">Controller</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">login</span><span class="params">(LoginRequest $request)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        $credentials = $request-&gt;only([<span class="string">'email'</span>, <span class="string">'password'</span>]);</span><br><span class="line"></span><br><span class="line">        $auth = auth();</span><br><span class="line">        <span class="keyword">if</span> (!$token = $auth-&gt;attempt($credentials)) &#123;</span><br><span class="line">            <span class="keyword">return</span> response()-&gt;json([<span class="string">'error'</span> =&gt; <span class="string">'Unauthorized'</span>, <span class="string">'status_code'</span> =&gt; <span class="number">401</span>], <span class="number">401</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;respondWithToken($token);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">me</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> response()-&gt;json(auth()-&gt;user());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">logout</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        auth()-&gt;logout();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> response()-&gt;json([<span class="string">'message'</span> =&gt; <span class="string">'Successfully logged out'</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">refresh</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="comment">/** <span class="doctag">@noinspection</span> PhpUndefinedMethodInspection */</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;respondWithToken(auth()-&gt;refresh());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">resetPwd</span><span class="params">(ResetPwdRequest $request)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        $oldPassword = $request-&gt;get(<span class="string">'old_password'</span>);</span><br><span class="line">        $newPassword = $request-&gt;get(<span class="string">'new_password'</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 检查旧密码</span></span><br><span class="line">        $admin = auth()-&gt;user();</span><br><span class="line">        <span class="keyword">if</span> (!password_verify($oldPassword, $admin-&gt;password)) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> AuthenticationException(<span class="string">'密码错误'</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 更新密码</span></span><br><span class="line">        $admin-&gt;update([</span><br><span class="line">            <span class="string">'password'</span> =&gt; password_hash($newPassword, PASSWORD_DEFAULT)</span><br><span class="line">        ]);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> success();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">protected</span> <span class="function"><span class="keyword">function</span> <span class="title">respondWithToken</span><span class="params">($token)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="comment">/** <span class="doctag">@noinspection</span> PhpUndefinedMethodInspection */</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;response-&gt;array([</span><br><span class="line">            <span class="string">'access_token'</span> =&gt; $token,</span><br><span class="line">            <span class="string">'token_type'</span> =&gt; <span class="string">'bearer'</span>,</span><br><span class="line">            <span class="string">'expires_in'</span> =&gt; auth()-&gt;factory()-&gt;getTTL() * <span class="number">60</span></span><br><span class="line">        ])-&gt;withHeader(<span class="string">'Authorization'</span>, $token);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Swagger"><a href="#Swagger" class="headerlink" title="Swagger"></a>Swagger</h1><p>这里采用<code>l5-swagger</code>扩展，集成了<code>swagger-ui</code>（使用json配置的文档系统）和<code>php-swagger</code>(使用代码注释生成json配置)。</p><h3 id="安装-2"><a href="#安装-2" class="headerlink" title="安装"></a>安装</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">composer require "darkaonline/l5-swagger:5.8.*"</span><br></pre></td></tr></table></figure><p>在<code>config/app.php</code>中手动注册Provider<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">'providers'</span> =&gt; [</span><br><span class="line"></span><br><span class="line">    ...</span><br><span class="line"></span><br><span class="line">    L5Swagger\L5SwaggerServiceProvider::class,</span><br><span class="line">]</span><br></pre></td></tr></table></figure></p><h3 id="配置-2"><a href="#配置-2" class="headerlink" title="配置"></a>配置</h3><p>发布配置与视图模板<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">php artisan vendor:publish --provider "L5Swagger\L5SwaggerServiceProvider"</span><br></pre></td></tr></table></figure></p><p>修改配置<code>config/l5-swagger.php</code><br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">return</span> [</span><br><span class="line">    <span class="string">'api'</span> =&gt; [</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        |--------------------------------------------------------------------------</span></span><br><span class="line"><span class="comment">        | Edit to set the api's title</span></span><br><span class="line"><span class="comment">        |--------------------------------------------------------------------------</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line"></span><br><span class="line">        <span class="string">'title'</span> =&gt; <span class="string">'后台Api文档'</span>, <span class="comment"># 文档页面的标题</span></span><br><span class="line">    ],</span><br><span class="line"></span><br><span class="line">    <span class="string">'routes'</span> =&gt; [</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        |--------------------------------------------------------------------------</span></span><br><span class="line"><span class="comment">        | Route for accessing api documentation interface</span></span><br><span class="line"><span class="comment">        |--------------------------------------------------------------------------</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line"></span><br><span class="line">        <span class="string">'api'</span> =&gt; <span class="string">'api/docs'</span>, <span class="comment"># 文档页面的路由</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        |--------------------------------------------------------------------------</span></span><br><span class="line"><span class="comment">        | Route for accessing parsed swagger annotations.</span></span><br><span class="line"><span class="comment">        |--------------------------------------------------------------------------</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line"></span><br><span class="line">        <span class="string">'docs'</span> =&gt; <span class="string">'docs'</span>, <span class="comment"># 路由别名</span></span><br><span class="line"></span><br><span class="line">        ...</span><br></pre></td></tr></table></figure></p><p>在<code>.env</code>中添加<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> Swagger</span></span><br><span class="line">SWAGGER_VERSION=3.0 # php-swagger的版本，不同版本注释写法不同！</span><br><span class="line">L5_SWAGGER_GENERATE_ALWAYS=true # 自动生成文档json，不要在生产环境打开此项</span><br></pre></td></tr></table></figure></p><p>最后记得将文档的json配置加入<code>.gitignore</code><br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line">/storage/api-docs/api-docs.json</span><br></pre></td></tr></table></figure></p><h3 id="编写Swagger注释"><a href="#编写Swagger注释" class="headerlink" title="编写Swagger注释"></a>编写Swagger注释</h3><p>这里不详细介绍<code>php-swagger</code>的注释语法，只放出几个例子：</p><ul><li><p><code>swagger.php</code> </p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@OA</span>\OpenApi(</span></span><br><span class="line"><span class="comment"> *     security=&#123;</span></span><br><span class="line"><span class="comment"> *         &#123;</span></span><br><span class="line"><span class="comment"> *             "Bearer":&#123;&#125;</span></span><br><span class="line"><span class="comment"> *         &#125;</span></span><br><span class="line"><span class="comment"> *     &#125;,</span></span><br><span class="line"><span class="comment"> *     <span class="doctag">@OA</span>\Server(</span></span><br><span class="line"><span class="comment"> *         url=L5_SWAGGER_CONST_HOST</span></span><br><span class="line"><span class="comment"> *     )</span></span><br><span class="line"><span class="comment"> * )</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@OA</span>\Info(</span></span><br><span class="line"><span class="comment"> *     version="1.0",</span></span><br><span class="line"><span class="comment"> *     title="小程序后台Api文档",</span></span><br><span class="line"><span class="comment"> *     <span class="doctag">@OA</span>\Contact(</span></span><br><span class="line"><span class="comment"> *         name="火星救援网络科技有限公司",</span></span><br><span class="line"><span class="comment"> *         url="http://www.example.com/"</span></span><br><span class="line"><span class="comment"> *     )</span></span><br><span class="line"><span class="comment"> * )</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@OA</span>\SecurityScheme(</span></span><br><span class="line"><span class="comment"> *     securityScheme="Bearer",</span></span><br><span class="line"><span class="comment"> *     type="apiKey",</span></span><br><span class="line"><span class="comment"> *     name="Authorization",</span></span><br><span class="line"><span class="comment"> *     in="header",</span></span><br><span class="line"><span class="comment"> * )</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure></li><li><p><code>swagger-tags.php</code></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@OA</span>\Tag(</span></span><br><span class="line"><span class="comment"> *     name="Auth",</span></span><br><span class="line"><span class="comment"> *     description="验证模块"</span></span><br><span class="line"><span class="comment"> * )</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@OA</span>\Tag(</span></span><br><span class="line"><span class="comment"> *     name="System.Permission",</span></span><br><span class="line"><span class="comment"> *     description="系统模块中的权限管理"</span></span><br><span class="line"><span class="comment"> * )</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@OA</span>\Tag(</span></span><br><span class="line"><span class="comment"> *     name="System.Role",</span></span><br><span class="line"><span class="comment"> *     description="系统模块中的角色管理"</span></span><br><span class="line"><span class="comment"> * )</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@OA</span>\Tag(</span></span><br><span class="line"><span class="comment"> *     name="System.Admin",</span></span><br><span class="line"><span class="comment"> *     description="系统模块中的用户管理"</span></span><br><span class="line"><span class="comment"> * )</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure></li><li><p><code>AuthController.php</code></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AuthController</span> <span class="keyword">extends</span> <span class="title">Controller</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@OA</span>\Post(</span></span><br><span class="line"><span class="comment">     *     path="/auth/login",</span></span><br><span class="line"><span class="comment">     *     summary="获取凭证",</span></span><br><span class="line"><span class="comment">     *     tags=&#123;"Auth"&#125;,</span></span><br><span class="line"><span class="comment">     *     description="通过账号密码获取Access Token",</span></span><br><span class="line"><span class="comment">     *     <span class="doctag">@OA</span>\Parameter(</span></span><br><span class="line"><span class="comment">     *         name="email",</span></span><br><span class="line"><span class="comment">     *         in="query",</span></span><br><span class="line"><span class="comment">     *         required=true,</span></span><br><span class="line"><span class="comment">     *         <span class="doctag">@OA</span>\Schema(</span></span><br><span class="line"><span class="comment">     *             type="string"</span></span><br><span class="line"><span class="comment">     *         ),</span></span><br><span class="line"><span class="comment">     *         example="test<span class="doctag">@example</span>.com",</span></span><br><span class="line"><span class="comment">     *         description="邮箱"</span></span><br><span class="line"><span class="comment">     *     ),</span></span><br><span class="line"><span class="comment">     *     <span class="doctag">@OA</span>\Parameter(</span></span><br><span class="line"><span class="comment">     *         name="password",</span></span><br><span class="line"><span class="comment">     *         in="query",</span></span><br><span class="line"><span class="comment">     *         required=true,</span></span><br><span class="line"><span class="comment">     *         <span class="doctag">@OA</span>\Schema(</span></span><br><span class="line"><span class="comment">     *             type="string"</span></span><br><span class="line"><span class="comment">     *         ),</span></span><br><span class="line"><span class="comment">     *         description="密码"</span></span><br><span class="line"><span class="comment">     *     ),</span></span><br><span class="line"><span class="comment">     *     <span class="doctag">@OA</span>\Response(</span></span><br><span class="line"><span class="comment">     *         response=200,</span></span><br><span class="line"><span class="comment">     *         description="返回凭证",</span></span><br><span class="line"><span class="comment">     *         ref="#/components/schemas/Token"</span></span><br><span class="line"><span class="comment">     *     ),</span></span><br><span class="line"><span class="comment">     *     <span class="doctag">@OA</span>\Response(</span></span><br><span class="line"><span class="comment">     *         response=401,</span></span><br><span class="line"><span class="comment">     *         description="账号不存在或密码错误"</span></span><br><span class="line"><span class="comment">     *     )</span></span><br><span class="line"><span class="comment">     * )</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> LoginRequest $request</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> \Illuminate\Http\JsonResponse</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">login</span><span class="params">(LoginRequest $request)</span> </span>&#123;</span><br><span class="line">         ...</span><br></pre></td></tr></table></figure></li></ul><div class="note info"><p>注释可以写在项目任意php文件中，建议是有归属语义的注释写在归属代码上（例如接口注释写在控制器中，模型注释写在模型中），公共语义的注释一样单独写在一个php文件中。</p></div><h3 id="生成文档json"><a href="#生成文档json" class="headerlink" title="生成文档json"></a>生成文档json</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">php artisan l5-swagger:generate</span><br></pre></td></tr></table></figure><h3 id="最终效果"><a href="#最终效果" class="headerlink" title="最终效果"></a>最终效果</h3><p>访问上面配置的路由地址</p><p><img src="/images/loading/loading_1.gif" data-original="https://user-images.githubusercontent.com/17662451/61341803-77268380-a87a-11e9-87f4-26e373c36a0d.png" alt="image"></p><p>点击<code>Authorize</code>按钮，<code>value</code>填入<code>Authorization</code>头的值即可在生产环境的文档页面请求接口。</p><p><img src="/images/loading/loading_1.gif" data-original="https://user-images.githubusercontent.com/17662451/61342163-d6d15e80-a87b-11e9-9700-3174aa069b6b.png" alt="image"></p><div class="note info"><p>注释可以写在项目任意php文件中，建议是有归属语义的注释写在归属代码上（例如接口注释写在控制器中，模型注释写在模型中），公共语义的注释一样单独写在一个php文件中。</p></div><h1 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h1><p>至此，三个轮子在入门应用就介绍完了，这些轮子可以让你更快速的搭建API，专注于业务逻辑。</p><h3 id="References"><a href="#References" class="headerlink" title="References"></a>References</h3><p>[0] <a href="https://packagist.org/packages/dingo/api" target="_blank" rel="noopener">dingo/api</a><br>[1] <a href="https://packagist.org/packages/tymon/jwt-auth" target="_blank" rel="noopener">tymon/jwt-auth</a><br>[2] <a href="https://packagist.org/packages/swagger-api/swagger-ui" target="_blank" rel="noopener">swagger-api/swagger-ui</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在Laravel5.8中使用“Laravel必知必会”的两个轮子&lt;code&gt;dingo/api&lt;/code&gt;和&lt;code&gt;tymon/jwt-auth&lt;/code&gt;以及文档系统&lt;code&gt;swagger-api/swagger-ui&lt;/code&gt;开发一个规范优雅的API。&lt;br&gt;
    
    </summary>
    
      <category term="php" scheme="https://cloudycity.me/categories/php/"/>
    
    
      <category term="laravel" scheme="https://cloudycity.me/tags/laravel/"/>
    
  </entry>
  
  <entry>
    <title>Hexo提高加载速度</title>
    <link href="https://cloudycity.me/p/6cf2.html"/>
    <id>https://cloudycity.me/p/6cf2.html</id>
    <published>2019-05-01T18:46:17.000Z</published>
    <updated>2020-01-08T14:00:31.598Z</updated>
    
    <content type="html"><![CDATA[<p>Hexo作为纯静态博客最大的优点就是快，但要真正的快起来你可能需要做这些事情。<br><a id="more"></a></p><h2 id="托管平台（可选）"><a href="#托管平台（可选）" class="headerlink" title="托管平台（可选）"></a>托管平台（可选）</h2><p>直接在<a href="https://coding.net/" target="_blank" rel="noopener">Coding</a>等国内平台托管<code>Page</code>项目，修改国内线路解析。(可参照<a href="https://cloudycity.me/p/c283.html#%E5%88%86%E7%BA%BF%E8%B7%AF%E8%A7%A3%E6%9E%90">Github Hexo的百度收录问题</a>)<br>Coding绑定了域名需定期申请SSL证书，所以本博放弃此项。</p><h2 id="CDN加速"><a href="#CDN加速" class="headerlink" title="CDN加速"></a>CDN加速</h2><p>这里只是针对第三方静态文件的加速，修改<code>Next</code>主题配置文件<code>_config.yml</code>如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line">vendors:</span><br><span class="line">  # Internal path prefix. Please do not edit it.</span><br><span class="line">  _internal: lib</span><br><span class="line"></span><br><span class="line">  # Internal version: 2.1.3</span><br><span class="line">  jquery: https://cdn.bootcss.com/jquery/2.1.3/jquery.min.js</span><br><span class="line"></span><br><span class="line">  # Internal version: 2.1.5</span><br><span class="line">  # See: http://fancyapps.com/fancybox/</span><br><span class="line">  fancybox: https://cdn.bootcss.com/fancybox/2.1.5/jquery.fancybox.min.js # https://cdn.bootcss.com/fancybox/2.1.5/jquery.fancybox.pack.js</span><br><span class="line">  fancybox_css: https://cdn.bootcss.com/fancybox/2.1.5/jquery.fancybox.min.css</span><br><span class="line"></span><br><span class="line">  # Internal version: 1.0.6</span><br><span class="line">  # See: https://github.com/ftlabs/fastclick</span><br><span class="line">  fastclick: https://cdn.bootcss.com/fastclick/1.0.6/fastclick.min.js</span><br><span class="line"></span><br><span class="line">  # Internal version: 1.9.7</span><br><span class="line">  # See: https://github.com/tuupola/jquery_lazyload</span><br><span class="line">  lazyload: https://cdn.bootcss.com/jquery_lazyload/1.9.7/jquery.lazyload.min.js</span><br><span class="line"></span><br><span class="line">  # Internal version: 1.2.1</span><br><span class="line">  # See: http://VelocityJS.org</span><br><span class="line">  velocity: https://cdn.bootcss.com/velocity/1.2.1/velocity.min.js</span><br><span class="line"></span><br><span class="line">  # Internal version: 1.2.1</span><br><span class="line">  # See: http://VelocityJS.org</span><br><span class="line">  velocity_ui: https://cdn.bootcss.com/velocity/1.2.1/velocity.ui.min.js</span><br><span class="line"></span><br><span class="line">  # Internal version: 0.7.9</span><br><span class="line">  # See: https://faisalman.github.io/ua-parser-js/</span><br><span class="line">  ua_parser:</span><br><span class="line"></span><br><span class="line">  # Internal version: 4.6.2</span><br><span class="line">  # See: http://fontawesome.io/</span><br><span class="line">  fontawesome: https://cdn.bootcss.com/font-awesome/4.6.2/css/font-awesome.min.css</span><br><span class="line"></span><br><span class="line">  # Internal version: 1</span><br><span class="line">  # https://www.algolia.com</span><br><span class="line">  algolia_instant_js:</span><br><span class="line">  algolia_instant_css:</span><br><span class="line"></span><br><span class="line">  # Internal version: 1.0.2</span><br><span class="line">  # See: https://github.com/HubSpot/pace</span><br><span class="line">  # Or use direct links below:</span><br><span class="line">  # pace: //cdn.bootcss.com/pace/1.0.2/pace.min.js</span><br><span class="line">  # pace_css: //cdn.bootcss.com/pace/1.0.2/themes/blue/pace-theme-flash.min.css</span><br><span class="line">  pace: https://cdn.bootcss.com/pace/1.0.2/pace.min.js</span><br><span class="line">  pace_css: https://cdn.bootcss.com/pace/1.0.2/themes/blue/pace-theme-flash.min.css</span><br></pre></td></tr></table></figure></p><div class="note warning"><p>针对自定义的静态文件(main.min.js和main.min.css)需要自行使用融合CDN，国内都需要备案域名，本博的<code>.me</code>域名没有备案资质，但我不太想将静态文件放到其他域名，所以放弃加速这类文件。</p></div><h2 id="压缩文件"><a href="#压缩文件" class="headerlink" title="压缩文件"></a>压缩文件</h2><h3 id="hexo-neat"><a href="#hexo-neat" class="headerlink" title="hexo-neat"></a>hexo-neat</h3><h4 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-neat --save</span><br></pre></td></tr></table></figure><h4 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h4><p>修改项目<code>_config.yml</code>。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">neat_enable: true</span><br><span class="line">neat_html:</span><br><span class="line">  enable: true</span><br><span class="line">  exclude:</span><br><span class="line">neat_css:</span><br><span class="line">  enable: false</span><br><span class="line">  exclude:</span><br><span class="line">    - &apos;**/*.min.css&apos;</span><br><span class="line">neat_js:</span><br><span class="line">  enable: false</span><br><span class="line">  mangle: true</span><br><span class="line">  output:</span><br><span class="line">  compress:</span><br><span class="line">  exclude:</span><br><span class="line">    - &apos;**/*.min.js&apos;</span><br></pre></td></tr></table></figure></p><div class="note info"><p>后面会使用<code>gulp</code>合并与压缩js与css，所以此处只用<code>neat</code>压缩了html。如果你不想使用合并js与css，此处可以打开<code>neat_js</code>、<code>neat_css</code>。</p></div><h3 id="gulp"><a href="#gulp" class="headerlink" title="gulp"></a>gulp</h3><p><code>gulp</code>是自动化构建工具，这里主要是用来合并、压缩js与css。</p><h4 id="构建配置"><a href="#构建配置" class="headerlink" title="构建配置"></a>构建配置</h4><p><code>Next</code>主题目录自带了<code>gulpfile.coffee</code>，这里直接修改：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><span class="line">fs = require(&apos;fs&apos;)</span><br><span class="line">path = require(&apos;path&apos;)</span><br><span class="line">gulp = require(&apos;gulp&apos;)</span><br><span class="line">jshint = require(&apos;gulp-jshint&apos;) # js语法检查</span><br><span class="line">jslish = require(&apos;jshint-stylish&apos;) # js语法检查输出美化</span><br><span class="line">stylint = require(&apos;gulp-stylint&apos;) # stylus语法检查</span><br><span class="line">stylish = require(&apos;stylint-stylish&apos;) # stylus语法检查输出美化</span><br><span class="line">yaml = require(&apos;js-yaml&apos;)</span><br><span class="line">concat = require(&apos;gulp-concat&apos;) # js合并</span><br><span class="line">uglify = require(&quot;gulp-uglify&quot;) # js压缩</span><br><span class="line">concatCss = require(&apos;gulp-concat-css&apos;) # css合并</span><br><span class="line">cleanCss = require(&apos;gulp-clean-css&apos;) # css压缩</span><br><span class="line"></span><br><span class="line"># js语法检查 https://jshint.com/docs/options/</span><br><span class="line">gulp.task &apos;lint:js&apos;, -&gt;</span><br><span class="line">  return gulp.src path.join(__dirname, &apos;./source/js/**/*.js&apos;)</span><br><span class="line">    .pipe jshint()</span><br><span class="line">    .pipe jshint.reporter()</span><br><span class="line"></span><br><span class="line"># stylus语法检查 https://github.com/SimenB/stylint</span><br><span class="line">gulp.task &apos;lint:stylus&apos;, -&gt;</span><br><span class="line">  return gulp.src path.join(__dirname, &apos;/source/css/**/*.styl&apos;)</span><br><span class="line">    .pipe stylint(&#123;config: path.join(__dirname, &apos;.stylintrc&apos;)&#125;)</span><br><span class="line">    .pipe stylint.reporter(stylish)</span><br><span class="line"></span><br><span class="line"># 配置文件检验</span><br><span class="line">gulp.task &apos;validate:config&apos;, (cb) -&gt;</span><br><span class="line">  themeConfig = fs.readFileSync path.join(__dirname, &apos;_config.yml&apos;)</span><br><span class="line">  try</span><br><span class="line">    yaml.safeLoad(themeConfig)</span><br><span class="line">    cb()</span><br><span class="line">  catch error</span><br><span class="line">    cb new Error(error)</span><br><span class="line"></span><br><span class="line"># 语言文件检验</span><br><span class="line">gulp.task &apos;validate:languages&apos;, (cb) -&gt;</span><br><span class="line">  languagesPath = path.join __dirname, &apos;languages&apos;</span><br><span class="line">  languages = fs.readdirSync languagesPath</span><br><span class="line">  errors = []</span><br><span class="line"></span><br><span class="line">  for lang in languages</span><br><span class="line">    languagePath = path.join languagesPath, lang</span><br><span class="line">    try</span><br><span class="line">      yaml.safeLoad fs.readFileSync(languagePath), &#123;</span><br><span class="line">        filename: path.relative(__dirname, languagePath)</span><br><span class="line">      &#125;</span><br><span class="line">    catch error</span><br><span class="line">      errors.push error</span><br><span class="line"></span><br><span class="line">  if errors.length == 0</span><br><span class="line">    cb()</span><br><span class="line">  else</span><br><span class="line">    cb(errors)</span><br><span class="line"></span><br><span class="line"># 合并压缩js</span><br><span class="line"># gulp.task &apos;minify:js&apos;, [&apos;lint:js&apos;], (cb) -&gt;</span><br><span class="line">gulp.task &apos;minify:js&apos;, (cb) -&gt;</span><br><span class="line">  return gulp.src([</span><br><span class="line">    path.join(__dirname, &apos;source/js/src/utils.js&apos;),</span><br><span class="line">    path.join(__dirname, &apos;source/js/src/motion.js&apos;),</span><br><span class="line">    path.join(__dirname, &apos;source/js/src/gitment.browser.js&apos;),</span><br><span class="line">    path.join(__dirname, &apos;source/js/src/bootstrap.js&apos;),</span><br><span class="line">    path.join(__dirname, &apos;source/js/src/scrollspy.js&apos;),</span><br><span class="line">    path.join(__dirname, &apos;source/js/src/post-details.js&apos;),</span><br><span class="line">  ]).pipe concat(&apos;main.min.js&apos;)</span><br><span class="line">    .pipe uglify()</span><br><span class="line">    .pipe gulp.dest path.join __dirname, &apos;../../public/js&apos;</span><br><span class="line"></span><br><span class="line"># 合并压缩js</span><br><span class="line"># gulp.task &apos;minify:css&apos;, [&apos;lint:stylus&apos;], (cb) -&gt;</span><br><span class="line">gulp.task &apos;minify:css&apos;, (cb) -&gt;</span><br><span class="line">  return gulp.src([</span><br><span class="line">    path.join(__dirname, &apos;../../public/css/main.css&apos;),</span><br><span class="line">    path.join(__dirname, &apos;source/css/src/gitment.css&apos;),</span><br><span class="line">  ]).pipe concat(&apos;main.min.css&apos;)</span><br><span class="line">    .pipe cleanCss()</span><br><span class="line">    .pipe gulp.dest path.join __dirname, &apos;../../public/css&apos;</span><br><span class="line"></span><br><span class="line"># 执行</span><br><span class="line">gulp.task &apos;default&apos;, [</span><br><span class="line">  &apos;validate:config&apos;,</span><br><span class="line">  &apos;validate:languages&apos;</span><br><span class="line">  &apos;minify:js&apos;,</span><br><span class="line">  &apos;minify:css&apos;,</span><br><span class="line">]</span><br></pre></td></tr></table></figure></p><div class="note info"><p><code>Next</code>主题默认的<code>gulpfile.coffee</code>只是进行规范检查，不过此处修改后默认关闭，按需开启。</p></div><br><div class="note warning"><p>合并js时尽量保持模板中引入的顺序，避免不必要错误。</p></div><br>在项目根目录下新建<code>gulpfile.js</code>：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">require(&apos;coffeescript/register&apos;)</span><br><span class="line">require(&apos;./themes/next/gulpfile.coffee&apos;)</span><br></pre></td></tr></table></figure><br><br>#### 安装相关依赖<br>安装构建任务用到的依赖。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">npm install gulp -g</span><br><span class="line">npm install coffeescript --save-dev # 用于在gulpfile.js中引入gulpfile.coffee</span><br><span class="line">npm install gulp-clean-css --save-dev # css压缩</span><br><span class="line">npm install gulp-concat --save-dev # js合并</span><br><span class="line">npm install gulp-concat-css --save-dev # css合并</span><br><span class="line">npm install gulp-jshint --save-dev # js语法检查</span><br><span class="line">npm install gulp-stylint --save-dev # css语法检查</span><br><span class="line">npm install gulp-uglify --save-dev # js压缩</span><br><span class="line">npm install jshint --save-dev # js压缩核心</span><br><span class="line">npm install jshint-stylish --save-dev # js语法检查输出美化</span><br><span class="line">npm install stylint-stylish --save-dev # css语法检查输出美化</span><br></pre></td></tr></table></figure><br><br>#### 执行构建<br>项目根目录执行<code>gulp</code>：<br><br><img src="/images/loading/loading_1.gif" data-original="https://user-images.githubusercontent.com/17662451/57032007-d1507900-6c7b-11e9-8c4f-22be1b05c910.png" alt="image"><br><br>构建输出合并与压缩后的文件：<br><br><img src="/images/loading/loading_1.gif" data-original="https://user-images.githubusercontent.com/17662451/57032110-23919a00-6c7c-11e9-8999-a24577e5296e.png" alt="image"><br><br>#### 更新模板<br>修改<code>themes/next/layout/_partials/head.swig</code>:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;link href=&quot;&#123;&#123; font_awesome_uri &#125;&#125;&quot; rel=&quot;stylesheet&quot; type=&quot;text/css&quot; /&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> &lt;link href=&quot;&#123;&#123; url_for(theme.css) &#125;&#125;/main.css?v=&#123;&#123; theme.version &#125;&#125;&quot; rel=&quot;stylesheet&quot; type=&quot;text/css&quot; /&gt;&lt;link href=&quot;&#123;&#123; url_for(theme.css) &#125;&#125;/main.min.css?v=&#123;&#123; theme.version &#125;&#125;&quot; rel=&quot;stylesheet&quot; type=&quot;text/css&quot; /&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> &#123;% if theme.favicon.apple_touch_icon %&#125;&#123;% if theme.favicon.apple_touch_icon %&#125;</span><br></pre></td></tr></table></figure><br><br>修改<code>themes/next/layout/_layout.swig</code>:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;% include &apos;_scripts/vendors.swig&apos; %&#125;</span><br><span class="line">  &lt;script type=&quot;text/javascript&quot; src=&quot;&#123;&#123; url_for(theme.js) &#125;&#125;/main.min.js?v=&#123;&#123; theme.version &#125;&#125;&quot;&gt;&lt;/script&gt;</span><br><span class="line">  &#123;% include &apos;_scripts/commons.swig&apos; %&#125;  &#123;% include &apos;_scripts/commons.swig&apos; %&#125;</span><br></pre></td></tr></table></figure><br><br>然后在各模板中将引入合并前静态文件的部分注释掉，这里不详细列出，只放出一个例子：<br><br><img src="/images/loading/loading_1.gif" data-original="https://user-images.githubusercontent.com/17662451/57033148-b92e2900-6c7e-11e9-88f9-c86d8bd93e11.png" alt="image"><br><br>完成后重新部署：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo g &amp;&amp; gulp &amp;&amp; hexo d</span><br></pre></td></tr></table></figure><br><br>引用效果：<br><br><img src="/images/loading/loading_1.gif" data-original="https://user-images.githubusercontent.com/17662451/57033361-52f5d600-6c7f-11e9-8857-167b5a80eccf.png" alt="image"><br><br>## 图片懒加载<br>可以显著加速文章页。<br><br>安装插件:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-lazyload-image --save</span><br></pre></td></tr></table></figure><br><br>修改项目配置文件<code>_config.yml</code>:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># 图片懒加载</span><br><span class="line">lazyload:</span><br><span class="line">  enable: true </span><br><span class="line">  onlypost: false</span><br><span class="line">  loadingImg: /images/loading/loading.gif #如果不填写图片则使用默认的图片</span><br></pre></td></tr></table></figure><br><br>## 精简功能<br>功能涉及多个请求时会比较明显得拖慢加载速度，例如<code>不蒜子</code>、<code>DaoVice</code>，要考量这些功能是否真(hua)的(er)需(bu)要(shi)。（像我已经关掉了<code>DaoVice</code>，只留着<code>不蒜子</code>计算站点UV）<br><br>## 最终效果<br>首页<br><br><img src="/images/loading/loading_1.gif" data-original="https://user-images.githubusercontent.com/17662451/57033434-7caefd00-6c7f-11e9-9b23-fb7f0b8b4d5d.png" alt="image"><br><br>文章页<br><br><img src="/images/loading/loading_1.gif" data-original="https://user-images.githubusercontent.com/17662451/57034951-6f940d00-6c83-11e9-8ae7-836267fff2b4.png" alt="image"><br><br>剩下的瓶颈主要是<code>Gitment</code>、<code>不蒜子</code>。<br><div class="note info"><p>不同网络环境下的加速效果也会不同，以上效果是我在家中的加速效果。在公司的加速效果就差了很多。</p></div>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Hexo作为纯静态博客最大的优点就是快，但要真正的快起来你可能需要做这些事情。&lt;br&gt;
    
    </summary>
    
      <category term="新手村" scheme="https://cloudycity.me/categories/%E6%96%B0%E6%89%8B%E6%9D%91/"/>
    
    
      <category term="hexo" scheme="https://cloudycity.me/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title>Github Hexo的百度收录问题</title>
    <link href="https://cloudycity.me/p/c283.html"/>
    <id>https://cloudycity.me/p/c283.html</id>
    <published>2019-04-28T09:54:27.000Z</published>
    <updated>2020-01-08T14:00:31.598Z</updated>
    
    <content type="html"><![CDATA[<p><code>Github</code>屏蔽了百度的爬虫，所以部署在<code>Github Page</code>的<code>Hexo</code>无法被百度收录，如果你绑定了自定义域名的话，这里有几个曲线救国方案。<br><a id="more"></a></p><h2 id="私有主机"><a href="#私有主机" class="headerlink" title="私有主机"></a>私有主机</h2><p>将博客部署到自己的机器上。</p><h2 id="对象存储"><a href="#对象存储" class="headerlink" title="对象存储"></a>对象存储</h2><p>将博客上传到对象存储。</p><h2 id="国内托管"><a href="#国内托管" class="headerlink" title="国内托管"></a>国内托管</h2><p>在国内的代码托管平台部署<code>Hexo</code>，这里推荐<a href="https://coding.net" target="_blank" rel="noopener">Coding</a>，流程与部署到<code>Github</code>基本一致。</p><h2 id="分线路解析"><a href="#分线路解析" class="headerlink" title="分线路解析"></a>分线路解析</h2><p>以<code>Github Page</code> + <code>Coding Page</code> 为例。</p><h3 id="部署多项目"><a href="#部署多项目" class="headerlink" title="部署多项目"></a>部署多项目</h3><p><code>Coding</code>的项目只需要<code>master</code>分支，<code>Hexo</code>的<code>_config.yml</code>增加仓库地址，然后执行<code>hexo d</code>便可以同时部署到两个项目。</p><p><img src="/images/loading/loading_1.gif" data-original="https://user-images.githubusercontent.com/17662451/56861989-f7a2ba00-69d8-11e9-85cc-9fe3e16646a0.png" alt="image"></p><h3 id="DNS解析"><a href="#DNS解析" class="headerlink" title="DNS解析"></a>DNS解析</h3><p>注意：如果要开启HTTPS，解析之前要先确保<code>Coding Page</code>的SSL证书已经申请通过，后面会说明原因。</p><p>默认解析到<code>coding.me</code>，境外解析到<code>github.io</code>。</p><p><img src="/images/loading/loading_1.gif" data-original="https://user-images.githubusercontent.com/17662451/56861869-cc6b9b00-69d7-11e9-9b60-236b5d6c0a6a.png" alt="image"></p><p>然后百度的爬虫在大陆就会访问到<code>Coding Page</code>，就能正常收录了。</p><div class="note warning"><!-- build time:Wed Jan 08 2020 22:00:33 GMT+0800 (GMT+08:00) --><p><code>Coding Page</code>的一大缺点是SSL证书每三个月需要手动申请一次，并且每次申请时需要先将境外指向<code>Github Page</code>的规则先暂停（因为<code>Coding</code>的认证服务器在境外）。</p><!-- rebuild by neat --></div><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p><strong>多线路解析</strong>看上去是比较优雅的解决方案。但是如果要开启HTTPS的话，相对于<code>GitHub Page</code>的自动延期SSL证书，<code>Coding Page</code>需要定期手动申请确实比较麻烦。至于其他国内的托管平台，<code>Gitcafe</code>目前无法访问，<code>Gitee Page</code>没有开启HTTPS的选项。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;code&gt;Github&lt;/code&gt;屏蔽了百度的爬虫，所以部署在&lt;code&gt;Github Page&lt;/code&gt;的&lt;code&gt;Hexo&lt;/code&gt;无法被百度收录，如果你绑定了自定义域名的话，这里有几个曲线救国方案。&lt;br&gt;
    
    </summary>
    
      <category term="新手村" scheme="https://cloudycity.me/categories/%E6%96%B0%E6%89%8B%E6%9D%91/"/>
    
    
      <category term="hexo" scheme="https://cloudycity.me/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title>GitHub Hexo绑定域名</title>
    <link href="https://cloudycity.me/p/58f7.html"/>
    <id>https://cloudycity.me/p/58f7.html</id>
    <published>2019-04-28T08:55:14.000Z</published>
    <updated>2020-01-08T14:00:31.598Z</updated>
    
    <content type="html"><![CDATA[<p>火星救援，刻不容缓！<br><a id="more"></a></p><h2 id="域名"><a href="#域名" class="headerlink" title="域名"></a>域名</h2><p>比较流行的是<code>.me</code>顶级域名，简洁直观，不过没有备案资质。<br>这里我用的就是<code>cloudycity.me</code>。</p><h3 id="购买"><a href="#购买" class="headerlink" title="购买"></a>购买</h3><p>关于购买，这里有个非常赞的域名注册商比价网站<a href="https://www.nazhumi.com/domain/.me" target="_blank" rel="noopener">哪煮迷</a>。我是在西部数码注册的，首年20续费98。</p><h3 id="解析"><a href="#解析" class="headerlink" title="解析"></a>解析</h3><p>添加两条CNAME规则将<code>@</code>与<code>www</code>都指向<code>Github page</code>地址：</p><p><img src="/images/loading/loading_1.gif" data-original="https://user-images.githubusercontent.com/17662451/56861303-3123f700-69d2-11e9-8904-9dca87181e2c.png" alt="image"></p><h2 id="Github"><a href="#Github" class="headerlink" title="Github"></a>Github</h2><h3 id="添加CNAME文件"><a href="#添加CNAME文件" class="headerlink" title="添加CNAME文件"></a>添加CNAME文件</h3><p>在<code>source</code>分支中的<code>source</code>目录下新建一个<code>CNAME</code>文件，内容为绑定的域名：</p><p><img src="/images/loading/loading_1.gif" data-original="https://user-images.githubusercontent.com/17662451/56861431-40577480-69d3-11e9-8c30-e23c3ac7652b.png" alt="image"></p><p>然后重新部署博客。</p><h3 id="申请HTTPS"><a href="#申请HTTPS" class="headerlink" title="申请HTTPS"></a>申请HTTPS</h3><p>到仓库设置中的<code>Github Page</code>子项中勾选<code>Enforce HTTPS</code></p><p><img src="/images/loading/loading_1.gif" data-original="https://user-images.githubusercontent.com/17662451/56861662-739b0300-69d5-11e9-8918-6e383f93f3da.png" alt="image"></p><div class="note warning"><p>添加<code>CNAME</code>文件之后，项目设置中会自动识别域名。刚识别完域名的1分钟内还无法勾选<code>Enforce HTTPS</code>，勾选之后要等几个小时才能生效。</p></div><h2 id="后续"><a href="#后续" class="headerlink" title="后续"></a>后续</h2><h3 id="更新相关配置"><a href="#更新相关配置" class="headerlink" title="更新相关配置"></a>更新相关配置</h3><p>如果你的博客有插件涉及域名要记得修改，例如：</p><ol><li><p><code>gitment</code>插件用到的授权应用需要重新创建，详见<a href="https://cloudycity.me/p/9414.html#%E5%88%9B%E5%BB%BA%E6%8E%88%E6%9D%83%E5%BA%94%E7%94%A8">hexo使用github issue存放文章与评论</a></p></li><li><p><code>Next</code>主题的文章访问计数需要去<a href="https://leancloud.cn/" target="_blank" rel="noopener">leancloud</a>的项目添加<code>安全域名</code></p></li></ol><p><img src="/images/loading/loading_1.gif" data-original="https://user-images.githubusercontent.com/17662451/56861535-48fc7a80-69d4-11e9-8431-f619a5feb8e6.png" alt="image"></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;火星救援，刻不容缓！&lt;br&gt;
    
    </summary>
    
      <category term="新手村" scheme="https://cloudycity.me/categories/%E6%96%B0%E6%89%8B%E6%9D%91/"/>
    
    
      <category term="hexo" scheme="https://cloudycity.me/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title>使用satis搭建私有Composer库</title>
    <link href="https://cloudycity.me/p/eee3.html"/>
    <id>https://cloudycity.me/p/eee3.html</id>
    <published>2019-04-16T08:05:33.000Z</published>
    <updated>2020-01-08T14:00:31.598Z</updated>
    
    <content type="html"><![CDATA[<p>人类的本质是复读机。<br><a id="more"></a><br>最近整理项目，将一些复用的轮子封装成Composer组件，但不便于放在<a href="https://packagist.org/" target="_blank" rel="noopener">packgist.org</a>，所以需要搭建私有的Composer库。</p><h2 id="开发composer组件"><a href="#开发composer组件" class="headerlink" title="开发composer组件"></a>开发composer组件</h2><p>以之前的一遍文章 <a href="/p/1734.html">Laravel/Lumen 扩展DB Builder语法</a> 的功能为例。</p><p><img src="/images/loading/loading_1.gif" data-original="https://user-images.githubusercontent.com/17662451/56190404-badfd600-605c-11e9-8f58-94713d61cd99.png" alt="image"></p><p>在组件项目（这里称为A项目）根目录创建<code>composer.json</code>。</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"name"</span>: <span class="string">"xuyang/laravel-builder-ext"</span>,</span><br><span class="line">    <span class="attr">"type"</span>: <span class="string">"library"</span>,</span><br><span class="line">    <span class="attr">"description"</span>: <span class="string">"扩展Laravel DB Builder的查询语法"</span>,</span><br><span class="line">    <span class="attr">"keywords"</span>: [<span class="string">"laravel"</span>, <span class="string">"db"</span>, <span class="string">"builder"</span>, <span class="string">"extend"</span>],</span><br><span class="line">    <span class="attr">"license"</span>: <span class="string">"MIT"</span>,</span><br><span class="line">    <span class="attr">"authors"</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">"name"</span>: <span class="string">"cloudycity"</span>,</span><br><span class="line">            <span class="attr">"email"</span>: <span class="string">"cloudycity@foxmail.com"</span></span><br><span class="line">        &#125;</span><br><span class="line">    ],</span><br><span class="line">    <span class="attr">"minimum-stability"</span>: <span class="string">"dev"</span>,</span><br><span class="line">    <span class="attr">"require"</span>: &#123;</span><br><span class="line">        <span class="attr">"php"</span>: <span class="string">"&gt;=5.4.0"</span>,</span><br><span class="line">        <span class="attr">"laravel/framework"</span> : <span class="string">"^5.2"</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">"require-dev"</span>: &#123;</span><br><span class="line">        <span class="attr">"phpunit/phpunit"</span>: <span class="string">"4.*"</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">"autoload"</span>: &#123;</span><br><span class="line">        <span class="attr">"psr-4"</span>: &#123; <span class="attr">"Xuyang\\LaravelBuilderExt\\"</span>: <span class="string">"src/"</span> &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">"extra"</span>: &#123;</span><br><span class="line">        <span class="attr">"branch-alias"</span>: &#123;</span><br><span class="line">            <span class="attr">"dev-master"</span>: <span class="string">"1.0.0-dev"</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最后传上<code>gitlab</code>。</p><h2 id="搭建satis并索引组件"><a href="#搭建satis并索引组件" class="headerlink" title="搭建satis并索引组件"></a>搭建satis并索引组件</h2><h3 id="安装satis"><a href="#安装satis" class="headerlink" title="安装satis"></a>安装satis</h3><h4 id="使用composer-方法一"><a href="#使用composer-方法一" class="headerlink" title="使用composer (方法一)"></a>使用composer (方法一)</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">cd</span> /data/www/</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> composer create-project composer/satis --keep-vcs</span></span><br></pre></td></tr></table></figure><p><img src="/images/loading/loading_1.gif" data-original="https://user-images.githubusercontent.com/17662451/56189758-54a68380-605b-11e9-9ddc-1e6d97c65172.png" alt="image"></p><h4 id="使用docker-方法二"><a href="#使用docker-方法二" class="headerlink" title="使用docker (方法二)"></a>使用docker (方法二)</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> docker pull composer/satis</span></span><br></pre></td></tr></table></figure><h3 id="配置satis"><a href="#配置satis" class="headerlink" title="配置satis"></a>配置satis</h3><p>进入到satis项目根目录下创建<code>satis.json</code>。<br><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"name"</span>: <span class="string">"私有Composer库"</span>,</span><br><span class="line">    <span class="attr">"homepage"</span>: <span class="string">"http://satis.example.com"</span>,</span><br><span class="line">    <span class="attr">"repositories"</span>: [</span><br><span class="line">        &#123; <span class="attr">"type"</span>: <span class="string">"git"</span>, <span class="attr">"url"</span>: <span class="string">"ssh://git@gitlab.example.com/sub/laravel-builder-ext.git"</span> &#125;</span><br><span class="line">    ],</span><br><span class="line">    <span class="attr">"require"</span>: &#123;</span><br><span class="line">        <span class="attr">"company/package"</span>: <span class="string">"dev-master"</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="创建索引"><a href="#创建索引" class="headerlink" title="创建索引"></a>创建索引</h3><h4 id="使用composer-方法一-1"><a href="#使用composer-方法一-1" class="headerlink" title="使用composer (方法一)"></a>使用composer (方法一)</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> php bin/satis build satis.json ./web-v</span></span><br></pre></td></tr></table></figure><p><img src="/images/loading/loading_1.gif" data-original="https://user-images.githubusercontent.com/17662451/56189642-06918000-605b-11e9-9d9e-fe163f210cd9.png" alt="image"></p><p>这里的<code>web</code>就是索引输出目录。</p><h4 id="使用docker-方法二-1"><a href="#使用docker-方法二-1" class="headerlink" title="使用docker (方法二)"></a>使用docker (方法二)</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> docker run --rm -it -v /build:/build composer/satis</span></span><br></pre></td></tr></table></figure><h4 id="自动索引"><a href="#自动索引" class="headerlink" title="自动索引"></a>自动索引</h4><p>最简单粗暴的方法是用<code>crontab</code>，但这里推荐使用<code>GitLab Web Hook</code>:</p><ol><li>在satis项目创建一个接口执行创建索引的操作。</li></ol><p><img src="/images/loading/loading_1.gif" data-original="https://user-images.githubusercontent.com/17662451/56270290-5c802980-6128-11e9-9354-9ff765d80059.png" alt="image"></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line">$valid_token = <span class="string">'3.1415926535857'</span>; <span class="comment">// GitLab web hook的token</span></span><br><span class="line">$valid_ip = [<span class="string">'127.0.0.1'</span>]; <span class="comment">// GitLab服务器IP</span></span><br><span class="line"></span><br><span class="line">$client_token = $_SERVER[<span class="string">'HTTP_X_GITLAB_TOKEN'</span>];</span><br><span class="line">$client_ip = $_SERVER[<span class="string">'REMOTE_ADDR'</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> ($client_token !== $valid_token) <span class="keyword">die</span>(<span class="string">'Token mismatch!'</span>);</span><br><span class="line"><span class="keyword">if</span> (!in_array($client_ip, $valid_ip)) <span class="keyword">die</span>(<span class="string">'Ip mismatch!'</span>);</span><br><span class="line"></span><br><span class="line">$ouptut = [];</span><br><span class="line">exec(<span class="string">"cd /data/www/satis/; php bin/satis build satis.json ./web -v 2&gt;&amp;1"</span>, $output); <span class="comment">// 创建索引的命令</span></span><br><span class="line">var_dump($output);</span><br></pre></td></tr></table></figure><ol start="2"><li>在组件的<code>GitLab</code>仓库中增加<code>Web Hook</code></li></ol><p><img src="/images/loading/loading_1.gif" data-original="https://user-images.githubusercontent.com/17662451/56270713-5dfe2180-6129-11e9-9e65-69ab50affed9.png" alt="image"></p><p>每次组件推送新提交之后都会触发钩子请求satis创建索引。</p><h3 id="配置Nginx-可选"><a href="#配置Nginx-可选" class="headerlink" title="配置Nginx (可选)"></a>配置Nginx (可选)</h3><p>将<code>satis.json</code>中的<code>homepage</code>指向索引输出目录，然后就可以访问satis的界面。</p><p><img src="/images/loading/loading_1.gif" data-original="https://user-images.githubusercontent.com/17662451/56188680-b9141380-6058-11e9-9611-aca18f7ded14.png" alt="image"></p><h3 id="添加部署密钥-可选"><a href="#添加部署密钥-可选" class="headerlink" title="添加部署密钥 (可选)"></a>添加部署密钥 (可选)</h3><p>如果<code>satis</code>所在机器没有权限拉取<code>gitlab</code>仓库，需要生成key并加入到<code>gitlab</code>的<code>Deploy Keys</code>(只读)中。</p><p><img src="/images/loading/loading_1.gif" data-original="https://user-images.githubusercontent.com/17662451/56188612-8cf89280-6058-11e9-93c9-856247fee03c.png" alt="image"></p><h2 id="从satis引入composer组件"><a href="#从satis引入composer组件" class="headerlink" title="从satis引入composer组件"></a>从satis引入composer组件</h2><p>修改使用A项目组件的项目（这里称B项目）的<code>composer.json</code>，加上私有库源：<br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">    ...</span><br><span class="line">    "config": &#123;</span><br><span class="line">        "preferred-install": "dist",</span><br><span class="line">        "secure-http": false </span><br><span class="line">    &#125;,</span><br><span class="line">    "repositories": [&#123;</span><br><span class="line">        "type": "composer",</span><br><span class="line">        "url": "http://satis.example.com"</span><br><span class="line">    &#125;]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><div class="note info"><!-- build time:Wed Jan 08 2020 22:00:34 GMT+0800 (GMT+08:00) --><p><code>&quot;secure-http&quot;: false</code>是可选项，当你的私有库地址不支持https时才需要加上。</p><!-- rebuild by neat --></div><p>然后正常引入即可：</p><p><img src="/images/loading/loading_1.gif" data-original="https://user-images.githubusercontent.com/17662451/56192258-94bc3500-6060-11e9-89b7-e29004dd2df5.png" alt="image"></p><p><img src="/images/loading/loading_1.gif" data-original="https://user-images.githubusercontent.com/17662451/56192137-57f03e00-6060-11e9-8934-5a8d98178846.png" alt="image"></p><h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><p><a href="https://segmentfault.com/a/1190000008509463#articleHeader8" target="_blank" rel="noopener">使用satis自建私有镜像</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;人类的本质是复读机。&lt;br&gt;
    
    </summary>
    
      <category term="php" scheme="https://cloudycity.me/categories/php/"/>
    
    
      <category term="composer" scheme="https://cloudycity.me/tags/composer/"/>
    
  </entry>
  
  <entry>
    <title>如何更好的通过IDE代码检查</title>
    <link href="https://cloudycity.me/p/71f5.html"/>
    <id>https://cloudycity.me/p/71f5.html</id>
    <published>2019-04-12T10:14:54.000Z</published>
    <updated>2020-01-08T14:00:31.598Z</updated>
    
    <content type="html"><![CDATA[<p>我身边有很多同事都没有重视代码检查，每次看他们IDE右侧都是一边红黄棕交错的“线谱”，特别难受。让自己的代码通过IDE的检查，可以避免很多低级的错误。下面分享下如何更好地通过Intellij系列IDE的代码检查。<br><a id="more"></a></p><h2 id="目标是什么"><a href="#目标是什么" class="headerlink" title="目标是什么"></a>目标是什么</h2><p>目标是无任何notice，包括英文的拼写检查。</p><p><img src="/images/loading/loading_1.gif" data-original="https://user-images.githubusercontent.com/17662451/56026151-2b79b080-5d46-11e9-942a-cf3a6e2f1251.png" alt="image"></p><h2 id="为什么要达成目标"><a href="#为什么要达成目标" class="headerlink" title="为什么要达成目标"></a>为什么要达成目标</h2><p>通过代码检查可以：</p><ol><li>一定程度上规范开发</li><li>更容易发现bug，避免低级错误</li></ol><h2 id="如何达成目标"><a href="#如何达成目标" class="headerlink" title="如何达成目标"></a>如何达成目标</h2><h3 id="遵守必要规则"><a href="#遵守必要规则" class="headerlink" title="遵守必要规则"></a>遵守必要规则</h3><p>至于判断【规则是否必要】的标准因人而异，但确定是【必要规则】就必须遵守，这是代码检查的意义。</p><h3 id="关闭不必要规则"><a href="#关闭不必要规则" class="headerlink" title="关闭不必要规则"></a>关闭不必要规则</h3><h4 id="全局关闭"><a href="#全局关闭" class="headerlink" title="全局关闭"></a>全局关闭</h4><p>不必要的检查规则，例如<code>No data sources configured</code>、<code>SQL dialect detection</code>等等，可以将其关闭。</p><p>在<code>Inspection Notice</code>处按<code>Alt+Enter</code>打开<code>Inspection setting</code>：</p><p><img src="/images/loading/loading_1.gif" data-original="https://user-images.githubusercontent.com/17662451/56027292-5bc24e80-5d48-11e9-971b-5287659b78b2.png" alt="image"></p><p>去掉勾：</p><p><img src="/images/loading/loading_1.gif" data-original="https://user-images.githubusercontent.com/17662451/56027516-c7a4b700-5d48-11e9-8f69-378e1813e4c0.png" alt="image"></p><p>效果：</p><p><img src="/images/loading/loading_1.gif" data-original="https://user-images.githubusercontent.com/17662451/56027837-66311800-5d49-11e9-988b-3e62fc334866.png" alt="image"></p><h4 id="单次忽略"><a href="#单次忽略" class="headerlink" title="单次忽略"></a>单次忽略</h4><p>有些规则是必要的，但因为某些原因我们无法遵守。可以选择<code>Suppress for statement</code>，将会自动在Notice前加入一行注释告诉IDE忽略掉此处的检查。</p><h3 id="引导IDE"><a href="#引导IDE" class="headerlink" title="引导IDE"></a>引导IDE</h3><p>某些场景规则是必要的，我们也遵守了，只是IDE没有get到仍标出Notice，这时候就需要想办法引导IDE去get到。</p><h4 id="添加注释"><a href="#添加注释" class="headerlink" title="添加注释"></a>添加注释</h4><p>以常见的闭包Notice为例，内部都会报warning：</p><p><img src="/images/loading/loading_1.gif" data-original="https://user-images.githubusercontent.com/17662451/56028531-ed32c000-5d4a-11e9-9366-9f4317722243.png" alt="image"></p><p>使用<code>/** @var 变量类型 $var */</code>声明</p><p><img src="/images/loading/loading_1.gif" data-original="https://user-images.githubusercontent.com/17662451/56028596-15222380-5d4b-11e9-9708-fcc929688472.png" alt="image"></p><h4 id="添加助手文件"><a href="#添加助手文件" class="headerlink" title="添加助手文件"></a>添加助手文件</h4><p>IDE无法识别<code>Laravel</code>的<code>Facade</code>的静态调用方式</p><p><img src="/images/loading/loading_1.gif" data-original="https://user-images.githubusercontent.com/17662451/56030055-7eeffc80-5d4e-11e9-948d-ca0babc090ec.png" alt="image"></p><p>这时候需要创建额外的助手文件<code>ide-helper.php</code>，里面存放类声明：</p><p><img src="/images/loading/loading_1.gif" data-original="https://user-images.githubusercontent.com/17662451/56029813-dd68ab00-5d4d-11e9-943b-b6ba5ba3fed2.png" alt="image"></p><p>IDE识别后：</p><p><img src="/images/loading/loading_1.gif" data-original="https://user-images.githubusercontent.com/17662451/56030160-c2e30180-5d4e-11e9-9c1d-ec7520ddf42d.png" alt="image"></p><p>P.S. 助手文件本身是可以忽略检查，即选择<code>suppress all for file</code>项。</p><h3 id="拼写检查"><a href="#拼写检查" class="headerlink" title="拼写检查"></a>拼写检查</h3><p>英文拼写检查的优先级比较低，但能遵守的话可以避免一些奇怪的命名</p><h4 id="使用下划线或驼峰通过检查"><a href="#使用下划线或驼峰通过检查" class="headerlink" title="使用下划线或驼峰通过检查"></a>使用下划线或驼峰通过检查</h4><p><img src="/images/loading/loading_1.gif" data-original="https://user-images.githubusercontent.com/17662451/56073778-c6709a00-5ddb-11e9-81ea-45060bd96408.png" alt="image"></p><h4 id="将专有名词加入字典"><a href="#将专有名词加入字典" class="headerlink" title="将专有名词加入字典"></a>将专有名词加入字典</h4><p><img src="/images/loading/loading_1.gif" data-original="https://user-images.githubusercontent.com/17662451/56073788-e607c280-5ddb-11e9-97b4-5c613d17658e.png" alt="image"></p><p><img src="/images/loading/loading_1.gif" data-original="https://user-images.githubusercontent.com/17662451/56073791-ed2ed080-5ddb-11e9-951f-01978e085219.png" alt="image"></p><h4 id="给随机字符串添加忽略注释"><a href="#给随机字符串添加忽略注释" class="headerlink" title="给随机字符串添加忽略注释"></a>给随机字符串添加忽略注释</h4><p><img src="/images/loading/loading_1.gif" data-original="https://user-images.githubusercontent.com/17662451/56073816-439c0f00-5ddc-11e9-8547-e9c518f623f3.png" alt="image"></p><p><img src="/images/loading/loading_1.gif" data-original="https://user-images.githubusercontent.com/17662451/56073819-4ac31d00-5ddc-11e9-8cd4-9272251938f7.png" alt="image"></p><p><img src="/images/loading/loading_1.gif" data-original="https://user-images.githubusercontent.com/17662451/56073831-5878a280-5ddc-11e9-990f-36b9b6d5a8ae.png" alt="image"></p><h3 id="导出-导入配置"><a href="#导出-导入配置" class="headerlink" title="导出/导入配置"></a>导出/导入配置</h3><p>导出配置以备份、与团队成员共享</p><p><img src="/images/loading/loading_1.gif" data-original="https://user-images.githubusercontent.com/17662451/56073885-befdc080-5ddc-11e9-80d8-a320054ccdc0.png" alt="image"></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;我身边有很多同事都没有重视代码检查，每次看他们IDE右侧都是一边红黄棕交错的“线谱”，特别难受。让自己的代码通过IDE的检查，可以避免很多低级的错误。下面分享下如何更好地通过Intellij系列IDE的代码检查。&lt;br&gt;
    
    </summary>
    
      <category term="新手村" scheme="https://cloudycity.me/categories/%E6%96%B0%E6%89%8B%E6%9D%91/"/>
    
    
  </entry>
  
  <entry>
    <title>Laravel/Lumen 扩展DB Builder语法</title>
    <link href="https://cloudycity.me/p/1734.html"/>
    <id>https://cloudycity.me/p/1734.html</id>
    <published>2019-04-12T08:24:51.000Z</published>
    <updated>2020-01-08T14:00:31.598Z</updated>
    
    <content type="html"><![CDATA[<p>截至<code>5.6</code>版本，<code>Laravel</code>的DB Builder都没有方法实现<code>忽略插入</code>与<code>插入或更新</code>（<code>5.7</code>版本新增<code>updateOrInsert()</code>）。除了自己封装多一层之外，还有一个更优雅的解决方案是对Builder语法进行扩展。<br><a id="more"></a></p><h2 id="扩展支持的语法"><a href="#扩展支持的语法" class="headerlink" title="扩展支持的语法"></a>扩展支持的语法</h2><p>这里要扩展的是三个常用的语法: </p><ol><li><code>INSERT IGNORE INTO</code></li><li><code>REPLACE INTO</code></li><li><code>INSERT INTO ... ON DUPLICATE KEY UPDATE</code></li></ol><h2 id="扩展Builder类"><a href="#扩展Builder类" class="headerlink" title="扩展Builder类"></a>扩展Builder类</h2><p><code>Laravel</code>官方已经在<code>Illuminate\Database</code>包中提供了扩展实例，需要创建自定义的<code>Grammar</code>、<code>Builder</code>、<code>Connection</code>类，然后由服务提供者注册。</p><h3 id="自定义Grammar"><a href="#自定义Grammar" class="headerlink" title="自定义Grammar"></a>自定义Grammar</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">App</span>\<span class="title">Library</span>\<span class="title">Database</span>\<span class="title">Query</span>\<span class="title">Grammars</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> <span class="title">Illuminate</span>\<span class="title">Database</span>\<span class="title">Query</span>\<span class="title">Grammars</span>\<span class="title">MySqlGrammar</span> <span class="title">as</span> <span class="title">Grammar</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">App</span>\<span class="title">Library</span>\<span class="title">Database</span>\<span class="title">Query</span>\<span class="title">MySqlBuilder</span> <span class="title">as</span> <span class="title">Builder</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MySqlGrammar</span> <span class="keyword">extends</span> <span class="title">Grammar</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Compile a replace into statement into SQL.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@link</span> https://dev.mysql.com/doc/refman/5.5/en/replace.html</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span>  \App\Library\Database\Query\MySqlBuilder $query</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span>  array $values</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> string</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">compileReplace</span><span class="params">(Builder $query, array $values)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="comment">// Essentially we will force every insert to be treated as a batch insert which</span></span><br><span class="line">        <span class="comment">// simply makes creating the SQL easier for us since we can utilize the same</span></span><br><span class="line">        <span class="comment">// basic routine regardless of an amount of records given to us to insert.</span></span><br><span class="line">        $table = <span class="keyword">$this</span>-&gt;wrapTable($query-&gt;from);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (!is_array(reset($values))) &#123;</span><br><span class="line">            $values = [$values];</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        $columns = <span class="keyword">$this</span>-&gt;columnize(array_keys(reset($values)));</span><br><span class="line"></span><br><span class="line">        <span class="comment">// We need to build a list of parameter place-holders of values that are bound</span></span><br><span class="line">        <span class="comment">// to the query. Each insert should have the exact same amount of parameter</span></span><br><span class="line">        <span class="comment">// bindings so we will loop through the record and parameterize them all.</span></span><br><span class="line">        $parameters = [];</span><br><span class="line"></span><br><span class="line">        <span class="keyword">foreach</span> ($values <span class="keyword">as</span> $record) &#123;</span><br><span class="line">            $parameters[] = <span class="string">'('</span> . <span class="keyword">$this</span>-&gt;parameterize($record) . <span class="string">')'</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        $parameters = implode(<span class="string">', '</span>, $parameters);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="string">"REPLACE INTO $table ($columns) VALUES $parameters"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Compile an insert ignore statement into SQL.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@link</span> https://dev.mysql.com/doc/refman/5.5/en/insert.html</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span>  \App\Library\Database\Query\MySqlBuilder $query</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span>  array $values</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> string</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">compileInsertIgnore</span><span class="params">(Builder $query, array $values)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="comment">// Essentially we will force every insert to be treated as a batch insert which</span></span><br><span class="line">        <span class="comment">// simply makes creating the SQL easier for us since we can utilize the same</span></span><br><span class="line">        <span class="comment">// basic routine regardless of an amount of records given to us to insert.</span></span><br><span class="line">        $table = <span class="keyword">$this</span>-&gt;wrapTable($query-&gt;from);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (!is_array(reset($values))) &#123;</span><br><span class="line">            $values = [$values];</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        $columns = <span class="keyword">$this</span>-&gt;columnize(array_keys(reset($values)));</span><br><span class="line"></span><br><span class="line">        <span class="comment">// We need to build a list of parameter place-holders of values that are bound</span></span><br><span class="line">        <span class="comment">// to the query. Each insert should have the exact same amount of parameter</span></span><br><span class="line">        <span class="comment">// bindings so we will loop through the record and parameterize them all.</span></span><br><span class="line">        $parameters = [];</span><br><span class="line"></span><br><span class="line">        <span class="keyword">foreach</span> ($values <span class="keyword">as</span> $record) &#123;</span><br><span class="line">            $parameters[] = <span class="string">'('</span> . <span class="keyword">$this</span>-&gt;parameterize($record) . <span class="string">')'</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        $parameters = implode(<span class="string">', '</span>, $parameters);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="string">"INSERT IGNORE INTO $table ($columns) VALUES $parameters"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Compile an insert update statement into SQL.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@link</span> https://dev.mysql.com/doc/refman/8.0/en/insert-on-duplicate.html</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@link</span> https://gist.github.com/RuGa/5354e44883c7651fd15c</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span>  \App\Library\Database\Query\MySqlBuilder $query</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span>  array $values</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> string</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">compileInsertUpdate</span><span class="params">(Builder $query, array $values)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="comment">// Essentially we will force every insert to be treated as a batch insert which</span></span><br><span class="line">        <span class="comment">// simply makes creating the SQL easier for us since we can utilize the same</span></span><br><span class="line">        <span class="comment">// basic routine regardless of an amount of records given to us to insert.</span></span><br><span class="line">        $table = <span class="keyword">$this</span>-&gt;wrapTable($query-&gt;from);</span><br><span class="line"></span><br><span class="line">        $columnNames = array_keys(reset($values));</span><br><span class="line"></span><br><span class="line">        $columns = <span class="keyword">$this</span>-&gt;columnize($columnNames);</span><br><span class="line"></span><br><span class="line">        $parameters = implode(<span class="string">','</span>, array_map(<span class="function"><span class="keyword">function</span> <span class="params">($row)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">'('</span> . <span class="keyword">$this</span>-&gt;parameterize($row) . <span class="string">')'</span>;</span><br><span class="line">        &#125;, $values));</span><br><span class="line"></span><br><span class="line">        $updates = implode(<span class="string">','</span>, array_map(<span class="function"><span class="keyword">function</span> <span class="params">($columnName)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;wrap($columnName) . <span class="string">' = VALUES('</span> . <span class="keyword">$this</span>-&gt;wrap($columnName) . <span class="string">')'</span>;</span><br><span class="line">        &#125;, $columnNames));</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="string">"INSERT INTO $table ($columns) VALUES $parameters ON DUPLICATE KEY UPDATE $updates"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="自定义Builder"><a href="#自定义Builder" class="headerlink" title="自定义Builder"></a>自定义Builder</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">App</span>\<span class="title">Library</span>\<span class="title">Database</span>\<span class="title">Query</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> <span class="title">Illuminate</span>\<span class="title">Database</span>\<span class="title">Query</span>\<span class="title">Builder</span> <span class="title">as</span> <span class="title">QueryBuilder</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MySqlBuilder</span> <span class="keyword">extends</span> <span class="title">QueryBuilder</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * The database query grammar instance.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@var</span> Grammars\MySqlGrammar</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> $grammar;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Insert a new record into the database, replace on primary key conflict.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span>  array $values</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> bool</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">replace</span><span class="params">(array $values)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">empty</span>($values)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Since every insert gets treated like a batch insert, we will make sure the</span></span><br><span class="line">        <span class="comment">// bindings are structured in a way that is convenient for building these</span></span><br><span class="line">        <span class="comment">// inserts statements by verifying the elements are actually an array.</span></span><br><span class="line">        <span class="keyword">if</span> (!is_array(reset($values))) &#123;</span><br><span class="line">            $values = [$values];</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Since every insert gets treated like a batch insert, we will make sure the</span></span><br><span class="line">        <span class="comment">// bindings are structured in a way that is convenient for building these</span></span><br><span class="line">        <span class="comment">// inserts statements by verifying the elements are actually an array.</span></span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">foreach</span> ($values <span class="keyword">as</span> $key =&gt; $value) &#123;</span><br><span class="line">                ksort($value);</span><br><span class="line">                $values[$key] = $value;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// We'll treat every insert like a batch insert so we can easily insert each</span></span><br><span class="line">        <span class="comment">// of the records into the database consistently. This will make it much</span></span><br><span class="line">        <span class="comment">// easier on the grammars to just handle one type of record insertion.</span></span><br><span class="line">        $bindings = [];</span><br><span class="line"></span><br><span class="line">        <span class="keyword">foreach</span> ($values <span class="keyword">as</span> $record) &#123;</span><br><span class="line">            <span class="keyword">foreach</span> ($record <span class="keyword">as</span> $value) &#123;</span><br><span class="line">                $bindings[] = $value;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        $sql = <span class="keyword">$this</span>-&gt;grammar-&gt;compileReplace(<span class="keyword">$this</span>, $values);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Once we have compiled the insert statement's SQL we can execute it on the</span></span><br><span class="line">        <span class="comment">// connection and return a result as a boolean success indicator as that</span></span><br><span class="line">        <span class="comment">// is the same type of result returned by the raw connection instance.</span></span><br><span class="line">        $bindings = <span class="keyword">$this</span>-&gt;cleanBindings($bindings);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;connection-&gt;insert($sql, $bindings);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Insert a new record into the database, update on primary key conflict.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span>  array $values</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> bool</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">insertUpdate</span><span class="params">(array $values)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">empty</span>($values)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Since every insert gets treated like a batch insert, we will make sure the</span></span><br><span class="line">        <span class="comment">// bindings are structured in a way that is convenient for building these</span></span><br><span class="line">        <span class="comment">// inserts statements by verifying the elements are actually an array.</span></span><br><span class="line">        <span class="keyword">if</span> (!is_array(reset($values))) &#123;</span><br><span class="line">            $values = [$values];</span><br><span class="line">        &#125; <span class="comment">// Sort the keys in each row alphabetically for consistency</span></span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">foreach</span> ($values <span class="keyword">as</span> $key =&gt; $value) &#123;</span><br><span class="line">                ksort($value);</span><br><span class="line">                $values[$key] = $value;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// We'll treat every insert like a batch insert so we can easily insert each</span></span><br><span class="line">        <span class="comment">// of the records into the database consistently. This will make it much</span></span><br><span class="line">        <span class="comment">// easier on the grammars to just handle one type of record insertion.</span></span><br><span class="line">        $bindings = [];</span><br><span class="line"></span><br><span class="line">        <span class="keyword">foreach</span> ($values <span class="keyword">as</span> $record) &#123;</span><br><span class="line">            <span class="keyword">foreach</span> ($record <span class="keyword">as</span> $value) &#123;</span><br><span class="line">                $bindings[] = $value;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        $sql = <span class="keyword">$this</span>-&gt;grammar-&gt;compileInsertUpdate(<span class="keyword">$this</span>, $values);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Once we have compiled the insert statement's SQL we can execute it on the</span></span><br><span class="line">        <span class="comment">// connection and return a result as a boolean success indicator as that</span></span><br><span class="line">        <span class="comment">// is the same type of result returned by the raw connection instance.</span></span><br><span class="line"></span><br><span class="line">        $bindings = <span class="keyword">$this</span>-&gt;cleanBindings($bindings);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;connection-&gt;insert($sql, $bindings);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Insert a new record into the database, discard on primary key conflict.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span>  array $values</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> bool</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">insertIgnore</span><span class="params">(array $values)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">empty</span>($values)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Since every insert gets treated like a batch insert, we will make sure the</span></span><br><span class="line">        <span class="comment">// bindings are structured in a way that is convenient for building these</span></span><br><span class="line">        <span class="comment">// inserts statements by verifying the elements are actually an array.</span></span><br><span class="line">        <span class="keyword">if</span> (!is_array(reset($values))) &#123;</span><br><span class="line">            $values = [$values];</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Since every insert gets treated like a batch insert, we will make sure the</span></span><br><span class="line">        <span class="comment">// bindings are structured in a way that is convenient for building these</span></span><br><span class="line">        <span class="comment">// inserts statements by verifying the elements are actually an array.</span></span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">foreach</span> ($values <span class="keyword">as</span> $key =&gt; $value) &#123;</span><br><span class="line">                ksort($value);</span><br><span class="line">                $values[$key] = $value;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// We'll treat every insert like a batch insert so we can easily insert each</span></span><br><span class="line">        <span class="comment">// of the records into the database consistently. This will make it much</span></span><br><span class="line">        <span class="comment">// easier on the grammars to just handle one type of record insertion.</span></span><br><span class="line">        $bindings = [];</span><br><span class="line"></span><br><span class="line">        <span class="keyword">foreach</span> ($values <span class="keyword">as</span> $record) &#123;</span><br><span class="line">            <span class="keyword">foreach</span> ($record <span class="keyword">as</span> $value) &#123;</span><br><span class="line">                $bindings[] = $value;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        $sql = <span class="keyword">$this</span>-&gt;grammar-&gt;compileInsertIgnore(<span class="keyword">$this</span>, $values);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Once we have compiled the insert statement's SQL we can execute it on the</span></span><br><span class="line">        <span class="comment">// connection and return a result as a boolean success indicator as that</span></span><br><span class="line">        <span class="comment">// is the same type of result returned by the raw connection instance.</span></span><br><span class="line"></span><br><span class="line">        $bindings = <span class="keyword">$this</span>-&gt;cleanBindings($bindings);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;connection-&gt;insert($sql, $bindings);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="自定义Connection"><a href="#自定义Connection" class="headerlink" title="自定义Connection"></a>自定义Connection</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">App</span>\<span class="title">Library</span>\<span class="title">Database</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> <span class="title">App</span>\<span class="title">Library</span>\<span class="title">Database</span>\<span class="title">Query</span>\<span class="title">MySqlBuilder</span> <span class="title">as</span> <span class="title">Builder</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">App</span>\<span class="title">Library</span>\<span class="title">Database</span>\<span class="title">Query</span>\<span class="title">Grammars</span>\<span class="title">MySqlGrammar</span> <span class="title">as</span> <span class="title">QueryGrammar</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">Illuminate</span>\<span class="title">Database</span>\<span class="title">MySqlConnection</span> <span class="title">as</span> <span class="title">Connection</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MySqlConnection</span> <span class="keyword">extends</span> <span class="title">Connection</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Get the default query grammar instance.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> \Illuminate\Database\Grammar|\Illuminate\Database\Query\Grammars\MySqlGrammar</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="function"><span class="keyword">function</span> <span class="title">getDefaultQueryGrammar</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;withTablePrefix(<span class="keyword">new</span> QueryGrammar);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Get a new query builder instance.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> \App\Library\Database\Query\MySqlBuilder</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">query</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Builder(</span><br><span class="line">            <span class="keyword">$this</span>, <span class="keyword">$this</span>-&gt;getQueryGrammar(), <span class="keyword">$this</span>-&gt;getPostProcessor()</span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="自定义Provider"><a href="#自定义Provider" class="headerlink" title="自定义Provider"></a>自定义Provider</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">App</span>\<span class="title">Providers</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> <span class="title">App</span>\<span class="title">Library</span>\<span class="title">Database</span>\<span class="title">MySqlConnection</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">Illuminate</span>\<span class="title">Support</span>\<span class="title">ServiceProvider</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DatabaseServiceProvider</span> <span class="keyword">extends</span> <span class="title">ServiceProvider</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Override the default connection for MySQL. This allows us to use `replace` etc.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@link</span> https://stidges.com/extending-the-connection-class-in-laravel</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@link</span> https://gist.github.com/VinceG/0fb570925748ab35bc53f2a798cb517c</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> void</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">boot</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        Connection::resolverFor(<span class="string">'mysql'</span>, <span class="function"><span class="keyword">function</span> <span class="params">($connection, $database, $prefix, $config)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> MySqlConnection($connection, $database, $prefix, $config);</span><br><span class="line">        &#125;); <span class="comment">// 5.4及以上版本使用此方式绑定</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Register the service provider.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> void</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">register</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;app-&gt;bind(<span class="string">'db.connection.mysql'</span>, MySqlConnection::class); <span class="comment">// 5.4版本以下使用此方式绑定</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="注册Provider"><a href="#注册Provider" class="headerlink" title="注册Provider"></a>注册Provider</h3><h4 id="Laravel"><a href="#Laravel" class="headerlink" title="Laravel"></a>Laravel</h4><p>在<code>config/app.php</code>里的<code>providers</code>中添加新的Provider类:<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">'providers'</span> =&gt; [</span><br><span class="line">    <span class="comment">// 其他的服务提供者</span></span><br><span class="line"></span><br><span class="line">    App\Providers\AppServiceProvider::class,</span><br><span class="line">],</span><br></pre></td></tr></table></figure></p><h4 id="Lumen"><a href="#Lumen" class="headerlink" title="Lumen"></a>Lumen</h4><p>在<code>bootstrap/app.php</code>中手动绑定:<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 扩展的查询语法：Replace、InsertIgnore、InsertUpdate</span></span><br><span class="line">$app-&gt;register(App\Providers\DatabaseServiceProvider::class);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> $app;</span><br></pre></td></tr></table></figure></p><h2 id="使用Demo"><a href="#使用Demo" class="headerlink" title="使用Demo"></a>使用Demo</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$data = [</span><br><span class="line">    <span class="string">'name'</span> =&gt; <span class="string">'soap'</span>,</span><br><span class="line">    <span class="string">'status'</span> =&gt; <span class="string">'kia'</span></span><br><span class="line">];</span><br><span class="line">\DB::connection(<span class="string">'cod8'</span>)-&gt;table(<span class="string">'141_members'</span>)-&gt;insertUpdate($data);</span><br></pre></td></tr></table></figure><p>注意这里输入<code>\DB::connection()-&gt;table()-&gt;</code>之后IDE不会提示扩展的方法，只能在封装类中声明是自定义的Builder以获得提示。<br><img src="/images/loading/loading_1.gif" data-original="https://user-images.githubusercontent.com/17662451/56022322-f701f680-5d3d-11e9-9c71-c588d54f13bb.png" alt="image"><br><img src="/images/loading/loading_1.gif" data-original="https://user-images.githubusercontent.com/17662451/56022249-d5a10a80-5d3d-11e9-8a57-66fabfaa03b3.png" alt="QQ截图20190412161418"></p><h2 id="封装成组件"><a href="#封装成组件" class="headerlink" title="封装成组件"></a>封装成组件</h2><p>参照<a href="https://cloudycity.me/p/eee3.html">使用satis搭建私有Composer库</a></p><h2 id="Refrences"><a href="#Refrences" class="headerlink" title="Refrences"></a>Refrences</h2><p><a href="https://stidges.com/extending-the-connection-class-in-laravel" target="_blank" rel="noopener">https://stidges.com/extending-the-connection-class-in-laravel</a><br><a href="https://gist.github.com/VinceG/0fb570925748ab35bc53f2a798cb517c" target="_blank" rel="noopener">https://gist.github.com/VinceG/0fb570925748ab35bc53f2a798cb517c</a><br><a href="https://github.com/art-institute-of-chicago/data-service-images" target="_blank" rel="noopener">https://github.com/art-institute-of-chicago/data-service-images</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;截至&lt;code&gt;5.6&lt;/code&gt;版本，&lt;code&gt;Laravel&lt;/code&gt;的DB Builder都没有方法实现&lt;code&gt;忽略插入&lt;/code&gt;与&lt;code&gt;插入或更新&lt;/code&gt;（&lt;code&gt;5.7&lt;/code&gt;版本新增&lt;code&gt;updateOrInsert()&lt;/code&gt;）。除了自己封装多一层之外，还有一个更优雅的解决方案是对Builder语法进行扩展。&lt;br&gt;
    
    </summary>
    
      <category term="php" scheme="https://cloudycity.me/categories/php/"/>
    
    
      <category term="laravel" scheme="https://cloudycity.me/tags/laravel/"/>
    
  </entry>
  
  <entry>
    <title>Laravel 接收PUT/PATCH/DELETE请求的值</title>
    <link href="https://cloudycity.me/p/613f.html"/>
    <id>https://cloudycity.me/p/613f.html</id>
    <published>2019-04-01T08:30:22.000Z</published>
    <updated>2020-01-08T14:00:31.598Z</updated>
    
    <content type="html"><![CDATA[<p>最近在调试<code>PUT</code>接口时，控制器中<code>Request</code>对象无法正常获取表单内容，发现这是Symfony组件的经典问题。<br><a id="more"></a></p><h2 id="What"><a href="#What" class="headerlink" title="What"></a>What</h2><p>当时的场景是前端ajax使用PUT方式提交了一个<code>multipart/form-data</code>的请求，但是<code>Request</code>对象无法使用<code>get()</code>获取到数据。</p><h2 id="Why"><a href="#Why" class="headerlink" title="Why"></a>Why</h2><p>Laravel的<code>Illuminate\Http\Request</code>对象继承是<code>Symfony\Component\HttpFoundation\Request</code>，在获取请求表单内容的代码如下[<a href="https://github.com/symfony/symfony/blob/master/src/Symfony/Component/HttpFoundation/Request.php#L283" target="_blank" rel="noopener">1</a>]：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="function"><span class="keyword">function</span> <span class="title">createFromGlobals</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        $request = <span class="keyword">self</span>::createRequestFromFactory($_GET, $_POST, [], $_COOKIE, $_FILES, $_SERVER);</span><br><span class="line">        <span class="keyword">if</span> (<span class="number">0</span> === strpos($request-&gt;headers-&gt;get(<span class="string">'CONTENT_TYPE'</span>), <span class="string">'application/x-www-form-urlencoded'</span>)</span><br><span class="line">            &amp;&amp; \in_array(strtoupper($request-&gt;server-&gt;get(<span class="string">'REQUEST_METHOD'</span>, <span class="string">'GET'</span>)), [<span class="string">'PUT'</span>, <span class="string">'DELETE'</span>, <span class="string">'PATCH'</span>])</span><br><span class="line">        ) &#123;</span><br><span class="line">            parse_str($request-&gt;getContent(), $data);</span><br><span class="line">            $request-&gt;request = <span class="keyword">new</span> ParameterBag($data);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> $request;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>由于PHP原生只支持<code>$_GET</code>、<code>$_POST</code>，所以<code>PUT</code>、<code>PATCH</code>、<code>DELETE</code>的表单内容要从<code>$request-&gt;getContent()</code>中解析，但这里进行解析有一个条件是请求头<code>Content-Type</code>为<code>application/x-www-form-urlencoded</code>，所以当我使用<code>multipart/form-data</code>的<code>Content-Type</code>进行<code>PUT</code>请求时，<code>Request</code>对象就无法正常解析。</p><h2 id="How"><a href="#How" class="headerlink" title="How"></a>How</h2><p>解决方案有以下三个：</p><h3 id="请求前"><a href="#请求前" class="headerlink" title="请求前"></a>请求前</h3><ol><li>将<code>Content-Type</code>设置为<code>application/x-www-form-urlencoded</code></li><li>覆盖请求头<code>method</code>: 将请求头<code>method</code>设为<code>POST</code>，同时将请求头<code>X-HTTP-METHOD-OVERRIDE</code> 或 <code>_method</code>（url参数或请求体皆可）设为<code>PUT</code>/<code>PATCH</code>/<code>DELETE</code>。</li></ol><div class="note info"><p>Laravel官方给出的建议方案[<a href="https://laravel.com/docs/5.2/helpers#method-method-field" target="_blank" rel="noopener">2</a>]也是方案二中的后者。</p></div><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (! function_exists(<span class="string">'method_field'</span>)) &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Generate a form field to spoof the HTTP verb used by forms.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span>  string  $method</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> \Illuminate\Support\HtmlString</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">method_field</span><span class="params">($method)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> HtmlString(<span class="string">'&lt;input type="hidden" name="_method" value="'</span>.$method.<span class="string">'"&gt;'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Symfony包中默认是禁用<code>$httpMethodParameterOverride</code>，而Laravel中默认开启。禁用时，只能通过请求头<code>X-HTTP-METHOD-OVERRIDE</code>覆盖。开启时，覆盖的优先级为：请求头<code>X-HTTP-METHOD-OVERRIDE</code> &gt; 请求体<code>_method</code> &gt; url参数<code>_method</code> &gt; 请求头<code>method</code> [<a href="https://github.com/symfony/symfony/blob/master/src/Symfony/Component/HttpFoundation/Request.php#L1215" target="_blank" rel="noopener">3</a>]<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getMethod</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">null</span> === <span class="keyword">$this</span>-&gt;method) &#123;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;method = strtoupper(<span class="keyword">$this</span>-&gt;server-&gt;get(<span class="string">'REQUEST_METHOD'</span>, <span class="string">'GET'</span>));</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (<span class="string">'POST'</span> === <span class="keyword">$this</span>-&gt;method) &#123;</span><br><span class="line">                <span class="keyword">if</span> ($method = <span class="keyword">$this</span>-&gt;headers-&gt;get(<span class="string">'X-HTTP-METHOD-OVERRIDE'</span>)) &#123;</span><br><span class="line">                    <span class="keyword">$this</span>-&gt;method = strtoupper($method);</span><br><span class="line">                &#125; <span class="keyword">elseif</span> (<span class="keyword">self</span>::$httpMethodParameterOverride) &#123;</span><br><span class="line">                    <span class="keyword">$this</span>-&gt;method = strtoupper(<span class="keyword">$this</span>-&gt;request-&gt;get(<span class="string">'_method'</span>, <span class="keyword">$this</span>-&gt;query-&gt;get(<span class="string">'_method'</span>, <span class="string">'POST'</span>)));</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;method;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p><h3 id="请求后"><a href="#请求后" class="headerlink" title="请求后"></a>请求后</h3><ol start="3"><li>继承Request对象补充对<code>multipart/form-data</code>类型的内容解析</li></ol><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><blockquote><p> <a href="https://learnku.com/laravel/t/14028/how-does-laravel-put-receive-values#reply56870" target="_blank" rel="noopener">https://learnku.com/laravel/t/14028/how-does-laravel-put-receive-values#reply56870</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近在调试&lt;code&gt;PUT&lt;/code&gt;接口时，控制器中&lt;code&gt;Request&lt;/code&gt;对象无法正常获取表单内容，发现这是Symfony组件的经典问题。&lt;br&gt;
    
    </summary>
    
      <category term="php" scheme="https://cloudycity.me/categories/php/"/>
    
    
      <category term="laravel" scheme="https://cloudycity.me/tags/laravel/"/>
    
  </entry>
  
  <entry>
    <title>Laravel5.2 使用队列记录接口日志</title>
    <link href="https://cloudycity.me/p/618f.html"/>
    <id>https://cloudycity.me/p/618f.html</id>
    <published>2019-03-12T07:45:50.000Z</published>
    <updated>2020-01-08T14:00:31.598Z</updated>
    
    <content type="html"><![CDATA[<p>最近在开发一个新接口时，需要记录请求与响应的日志。为了提高接口响应速度，记录日志这个环节就由异步队列来完成。项目采用Laravel5.2，队列驱动使用Redis。</p><a id="more"></a><h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><p><img src="/images/loading/loading_1.gif" data-original="https://user-images.githubusercontent.com/17662451/54182083-7308e480-44db-11e9-9202-f82761510185.png" alt="QQ截图20190312152843"><br>Laravel 5.2自带的redis队列驱动中会用到<code>watch</code>命令，所以没办法直接使用集群。要么自己写驱动，要么队列单独使用另外的主备redis。我这边是采用后者。</p><h3 id="增加redis连接配置"><a href="#增加redis连接配置" class="headerlink" title="增加redis连接配置"></a>增加redis连接配置</h3><p><code>.env</code><br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">// 队列驱动</span><br><span class="line">QUEUE_DRIVER=redis</span><br><span class="line"></span><br><span class="line">// 集群</span><br><span class="line">REDIS_HOST=xxx.xxx.xxx.xxx</span><br><span class="line">REDIS_PASSWORD=xxx</span><br><span class="line">REDIS_PORT=xxxx</span><br><span class="line"></span><br><span class="line">// 主备</span><br><span class="line">QUEUE_REDIS_HOST=xxx.xxx.xxx.xxx</span><br><span class="line">QUEUE_REDIS_PASSWORD=xxx</span><br><span class="line">QUEUE_REDIS_PORT=xxxx</span><br></pre></td></tr></table></figure></p><p><code>config/database.php</code><br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">'redis'</span> =&gt; [</span><br><span class="line"></span><br><span class="line">    <span class="string">'cluster'</span> =&gt; <span class="keyword">false</span>,</span><br><span class="line"></span><br><span class="line">    <span class="string">'default'</span> =&gt; [</span><br><span class="line">        <span class="string">'host'</span> =&gt; env(<span class="string">'REDIS_HOST'</span>, <span class="string">'localhost'</span>),</span><br><span class="line">        <span class="string">'password'</span> =&gt; env(<span class="string">'REDIS_PASSWORD'</span>, <span class="keyword">null</span>),</span><br><span class="line">        <span class="string">'port'</span> =&gt; env(<span class="string">'REDIS_PORT'</span>, <span class="number">6379</span>),</span><br><span class="line">        <span class="string">'database'</span> =&gt; <span class="number">0</span>,</span><br><span class="line">    ],</span><br><span class="line"></span><br><span class="line">    <span class="string">'queue'</span> =&gt; [</span><br><span class="line">        <span class="string">'host'</span> =&gt; env(<span class="string">'QUEUE_REDIS_HOST'</span>, <span class="string">'localhost'</span>),</span><br><span class="line">        <span class="string">'password'</span> =&gt; env(<span class="string">'QUEUE_REDIS_PASSWORD'</span>, <span class="keyword">null</span>),</span><br><span class="line">        <span class="string">'port'</span> =&gt; env(<span class="string">'QUEUE_REDIS_PORT'</span>, <span class="number">6379</span>),</span><br><span class="line">        <span class="string">'database'</span> =&gt; <span class="number">0</span>,</span><br><span class="line">    ],</span><br><span class="line">],</span><br></pre></td></tr></table></figure></p><h3 id="指定队列使用的redis连接"><a href="#指定队列使用的redis连接" class="headerlink" title="指定队列使用的redis连接"></a>指定队列使用的redis连接</h3><p><code>config/queue.php</code><br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">'default'</span> =&gt; env(<span class="string">'QUEUE_DRIVER'</span>, <span class="string">'sync'</span>),</span><br><span class="line">...</span><br><span class="line"><span class="string">'connections'</span> =&gt; [</span><br><span class="line">        <span class="string">'redis'</span> =&gt; [</span><br><span class="line">            <span class="string">'driver'</span> =&gt; <span class="string">'redis'</span>,</span><br><span class="line">            <span class="string">'connection'</span> =&gt; <span class="string">'queue'</span>,</span><br><span class="line">            <span class="string">'queue'</span> =&gt; <span class="string">'default'</span>,</span><br><span class="line">            <span class="string">'expire'</span> =&gt; <span class="number">60</span>,</span><br><span class="line">        ],</span><br><span class="line">],</span><br><span class="line">...</span><br></pre></td></tr></table></figure></p><h2 id="创建Worker"><a href="#创建Worker" class="headerlink" title="创建Worker"></a>创建Worker</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">php artisan make:job SaveMatchLog</span><br></pre></td></tr></table></figure><p>与自动计划的<code>Command</code>类一样，在<code>handle()</code>中编写具体业务代码。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SaveMatchLog</span> <span class="keyword">extends</span> <span class="title">Job</span> <span class="keyword">implements</span> <span class="title">ShouldQueue</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">use</span> <span class="title">InteractsWithQueue</span>, <span class="title">SerializesModels</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 请求的订单号</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@var</span> string</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> $orderNo;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 请求时间</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@var</span> array</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> $time;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 请求IP</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@var</span> array</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> $ip;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 客户端系统信息</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@var</span> array</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> $userAgent;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 响应信息</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@var</span> array</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> $msg;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * saveMatchLog constructor.</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> Request $req</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> \Illuminate\Http\JsonResponse $res</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">($req, $res)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;orderNo = $req-&gt;get(<span class="string">'order_no'</span>);</span><br><span class="line">        <span class="keyword">$this</span>-&gt;time = date(<span class="string">'Y-m-d H:i:s'</span>, $req-&gt;server-&gt;get(<span class="string">'REQUEST_TIME'</span>));</span><br><span class="line">        <span class="keyword">$this</span>-&gt;ip = $req-&gt;getClientIp();</span><br><span class="line">        <span class="keyword">$this</span>-&gt;userAgent = $req-&gt;header(<span class="string">'user-agent'</span>);</span><br><span class="line">        <span class="keyword">$this</span>-&gt;msg = $res-&gt;getData();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Execute the job.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> void</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">handle</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="comment">// 日志内容</span></span><br><span class="line">        $content = <span class="keyword">$this</span>-&gt;getLogContent();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 输出日志</span></span><br><span class="line">        $logWriter = <span class="keyword">new</span> Writer(<span class="keyword">new</span> Logger(<span class="string">'match'</span>));</span><br><span class="line">        $logWriter-&gt;useDailyFiles(storage_path(<span class="string">'logs/match/match.log'</span>));</span><br><span class="line">        $logWriter-&gt;info($content);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">failed</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        $content = <span class="keyword">$this</span>-&gt;getLogContent();</span><br><span class="line">        \Log::error(<span class="string">'记录请求响应日志到logs/match.log失败，日志将记录在系统日志logs/laravel.log中'</span>);</span><br><span class="line">        \Log::info($content);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> string</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">function</span> <span class="title">getLogContent</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> json_encode([</span><br><span class="line">            <span class="string">'orderNo'</span> =&gt; <span class="keyword">$this</span>-&gt;orderNo,</span><br><span class="line">            <span class="string">'time'</span> =&gt; <span class="keyword">$this</span>-&gt;time,</span><br><span class="line">            <span class="string">'ip'</span> =&gt; <span class="keyword">$this</span>-&gt;ip,</span><br><span class="line">            <span class="string">'userAgent'</span> =&gt; <span class="keyword">$this</span>-&gt;userAgent,</span><br><span class="line">            <span class="string">'msg'</span> =&gt; <span class="keyword">$this</span>-&gt;msg,</span><br><span class="line">        ], JSON_UNESCAPED_UNICODE);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="添加到队列"><a href="#添加到队列" class="headerlink" title="添加到队列"></a>添加到队列</h2><p>接口的<code>Controller</code>如下<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 接口入口</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> Request $request</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> \Illuminate\Http\JsonResponse</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">match</span><span class="params">(Request $request)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    $response = <span class="keyword">$this</span>-&gt;_match($request);</span><br><span class="line">    $job = (<span class="keyword">new</span> SaveMatchLog($request, $response));</span><br><span class="line">    <span class="keyword">$this</span>-&gt;dispatch($job); <span class="comment">// 使用队列存储日志，提高接口响应速度</span></span><br><span class="line">    <span class="keyword">return</span> $response;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> Request $request</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> \Illuminate\Http\JsonResponse</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">_match</span><span class="params">(Request $request)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// do sth</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="监听队列"><a href="#监听队列" class="headerlink" title="监听队列"></a>监听队列</h2><p>采用<code>supervisor</code>来管理监听进程</p><h3 id="进程配置"><a href="#进程配置" class="headerlink" title="进程配置"></a>进程配置</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> cat /etc/supervisor/conf.d/laravel-worker.conf</span><br><span class="line">[program:laravel-worker]</span><br><span class="line">process_name=%(program_name)s_%(process_num)02d</span><br><span class="line">command=php /data/www/newadminpk/artisan queue:work redis --sleep=3 --tries=3 --daemon</span><br><span class="line">autostart=true</span><br><span class="line">autorestart=true</span><br><span class="line">user=www</span><br><span class="line">numprocs=1</span><br><span class="line">redirect_stderr=true</span><br><span class="line">stdout_logfile=/data/www/newadminpk/storage/logs/worker.out.log</span><br><span class="line">stderr_logfile=/data/www/newadminpk/storage/logs/worker.err.log</span><br></pre></td></tr></table></figure><h3 id="引入配置"><a href="#引入配置" class="headerlink" title="引入配置"></a>引入配置</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> tail /etc/supervisord/supervisord.conf</span><br><span class="line">[include]</span><br><span class="line">files = ./conf.d/*.conf</span><br></pre></td></tr></table></figure><h3 id="启动supervisor"><a href="#启动supervisor" class="headerlink" title="启动supervisor"></a>启动supervisor</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo supervisord -c supervisor.conf</span><br></pre></td></tr></table></figure><h3 id="启动队列监听器"><a href="#启动队列监听器" class="headerlink" title="启动队列监听器"></a>启动队列监听器</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo supervisorctl reread</span><br><span class="line">sudo supervisorctl update</span><br><span class="line">sudo supervisorctl start laravel-worker:*</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> ps -ef | grep artisan | grep -v grep</span><br><span class="line">www      21064  3186  0 14:49 ?        00:00:01 php /data/www/newadminpk/artisan queue:work redis --sleep=3 --tries=3 --daemon</span><br></pre></td></tr></table></figure><h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><h3 id="Walle配置"><a href="#Walle配置" class="headerlink" title="Walle配置"></a>Walle配置</h3><p>这个项目通过<code>Walle</code>部署，需要在项目配置的<code>post-release</code>中配置以下<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo supervisorctl restart laravel-worker:*</span><br></pre></td></tr></table></figure></p><p>否则每次发布新版本后，Worker还是会将日志保存到上一个版本的路径下，导致日志丢失（这一点只要熟悉Walle的原理就知道原因了）。</p><h3 id="ELK优化"><a href="#ELK优化" class="headerlink" title="ELK优化"></a>ELK优化</h3><p>目前日志处理与检索还属于低频需求，后期可以考虑采用ELK改进写入日志之后的流程。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近在开发一个新接口时，需要记录请求与响应的日志。为了提高接口响应速度，记录日志这个环节就由异步队列来完成。项目采用Laravel5.2，队列驱动使用Redis。&lt;/p&gt;
    
    </summary>
    
      <category term="php" scheme="https://cloudycity.me/categories/php/"/>
    
    
      <category term="laravel" scheme="https://cloudycity.me/tags/laravel/"/>
    
  </entry>
  
  <entry>
    <title>VSCode FTP与SSH插件推荐</title>
    <link href="https://cloudycity.me/p/1cfa.html"/>
    <id>https://cloudycity.me/p/1cfa.html</id>
    <published>2019-02-28T08:13:43.000Z</published>
    <updated>2020-01-08T14:00:31.598Z</updated>
    
    <content type="html"><![CDATA[<p>因为一些不可抗力因素，我偶尔要直接在线上改文件，这时就要在几个工具间反复切换（<code>xftp</code>下载，<code>sublime</code>编辑，<code>xftp</code>上传，<code>xshell</code>执行），比较繁琐。最近刚好改用<code>VSCode</code>，在市场找到两个比较合适的插件，在一个编辑器内即可完成上述流程，非常顺滑。</p><a id="more"></a><p><img src="/images/loading/loading_1.gif" data-original="https://user-images.githubusercontent.com/17662451/53550305-5b436f00-3b71-11e9-8e72-0e360849a8b3.png" alt="qq 20190228155615"></p><h3 id="SSH-FS"><a href="#SSH-FS" class="headerlink" title="SSH FS"></a>SSH FS</h3><p>如果你直接在市场搜<code>FTP</code>的话，那些插件都是和<code>xftp</code>一样，每次修改文件都需要先下载。万一忘了，就可能丢失部分代码。而这款<a href="https://github.com/SchoofsKelvin/vscode-sshfs" target="_blank" rel="noopener"><code>SSH FS</code></a>是利用<code>ssh</code>模拟文件系统，所以你每次打开时，文件内容与目录机构都是最新的。</p><h3 id="SSHExtension"><a href="#SSHExtension" class="headerlink" title="SSHExtension"></a>SSHExtension</h3><p>这个插件也比较简单，就是直接使用<code>VSCode</code>的终端执行<code>ssh</code>命令。不过<code>ssh</code>配置是共用了另一款<code>ftp</code>插件<code>ftp-simple</code>的配置文件，所以也需要一起安装。</p><h3 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h3><p><code>VSCode</code>真香，不像<code>Sublime</code>那么折腾。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;因为一些不可抗力因素，我偶尔要直接在线上改文件，这时就要在几个工具间反复切换（&lt;code&gt;xftp&lt;/code&gt;下载，&lt;code&gt;sublime&lt;/code&gt;编辑，&lt;code&gt;xftp&lt;/code&gt;上传，&lt;code&gt;xshell&lt;/code&gt;执行），比较繁琐。最近刚好改用&lt;code&gt;VSCode&lt;/code&gt;，在市场找到两个比较合适的插件，在一个编辑器内即可完成上述流程，非常顺滑。&lt;/p&gt;
    
    </summary>
    
      <category term="新手村" scheme="https://cloudycity.me/categories/%E6%96%B0%E6%89%8B%E6%9D%91/"/>
    
    
      <category term="工具" scheme="https://cloudycity.me/tags/%E5%B7%A5%E5%85%B7/"/>
    
  </entry>
  
  <entry>
    <title>Laravel5.2 DB Builder 子查询的优雅写法</title>
    <link href="https://cloudycity.me/p/ba95.html"/>
    <id>https://cloudycity.me/p/ba95.html</id>
    <published>2019-02-25T03:42:38.000Z</published>
    <updated>2020-01-08T14:00:31.599Z</updated>
    
    <content type="html"><![CDATA[<p>Laravel5.2的DB Builder还没有<code>fromSub()</code>与<code>joinSub()</code>，Sql涉及子查询时，比较优雅的写法是利用<code>toSql()</code>与<code>mergeBindings()</code>。</p><a id="more"></a><h3 id="From"><a href="#From" class="headerlink" title="From"></a>From</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">*</span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">( <span class="keyword">SELECT</span> * <span class="keyword">FROM</span> t1 <span class="keyword">WHERE</span> c1 = xxx <span class="keyword">AND</span> c2 = xxx <span class="keyword">GROUP</span> <span class="keyword">BY</span> c1 ) <span class="keyword">AS</span> sub </span><br><span class="line"><span class="keyword">WHERE</span></span><br><span class="line">c1 = xxx </span><br><span class="line"><span class="keyword">AND</span> c2 = xxx;</span><br></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$subQuery = DB::table(<span class="string">'t1'</span>)-&gt;where(<span class="string">'c1'</span>, <span class="string">'xxx'</span>)-&gt;where(<span class="string">'c2'</span>, xxx)-&gt;groupBy(<span class="string">'c1'</span>);</span><br><span class="line">$query = DB::table(DB::raw(<span class="string">"(&#123;$subQuery-&gt;toSql()&#125;) as sub"</span>))</span><br><span class="line">    -&gt;select([<span class="string">'*'</span>])</span><br><span class="line">    -&gt;where(<span class="string">'c1'</span>, <span class="string">'xxx'</span>)</span><br><span class="line">    -&gt;where(<span class="string">'c2'</span>, <span class="string">'xxx'</span>);</span><br><span class="line">    -&gt;mergeBindings($subQuery)</span><br><span class="line">    -&gt;get();</span><br></pre></td></tr></table></figure><h3 id="Join"><a href="#Join" class="headerlink" title="Join"></a>Join</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">t1.*,</span><br><span class="line">sub.c4 </span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">t1</span><br><span class="line"><span class="keyword">LEFT</span> <span class="keyword">JOIN</span> ( <span class="keyword">SELECT</span> * <span class="keyword">FROM</span> t2 <span class="keyword">GROUP</span> <span class="keyword">BY</span> c1, c2 ) <span class="keyword">AS</span> sub <span class="keyword">ON</span> t1.c1 = t2.c1 </span><br><span class="line"><span class="keyword">AND</span> t1.c2 = t2.c2</span><br></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">$subQuery = DB::table(<span class="string">'t2'</span>)-&gt;groupBy(<span class="string">'c1'</span>, <span class="string">'c2'</span>);</span><br><span class="line">$query = DB::table(<span class="string">'t1'</span>)</span><br><span class="line">    -&gt;select([<span class="string">'t1.*'</span>, <span class="string">'sub.c4'</span>])</span><br><span class="line">    -&gt;leftJoin(DB::raw(<span class="string">"(&#123;subQuery-&gt;toSql()&#125;) as sub"</span>), <span class="function"><span class="keyword">function</span> <span class="params">($join)</span> </span>&#123;</span><br><span class="line">        <span class="comment">/** <span class="doctag">@var</span> JoinClause $join */</span></span><br><span class="line">        $join-&gt;on(<span class="string">'t1.c1'</span>, <span class="string">'='</span>, <span class="string">'t2.c1'</span>)</span><br><span class="line">            -&gt;on(<span class="string">'t1.c2'</span>, <span class="string">'='</span>, <span class="string">'t2.c2'</span>);</span><br><span class="line">    &#125;)</span><br><span class="line">    -&gt;mergeBindings($subQuery)</span><br><span class="line">    -&gt;get();</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Laravel5.2的DB Builder还没有&lt;code&gt;fromSub()&lt;/code&gt;与&lt;code&gt;joinSub()&lt;/code&gt;，Sql涉及子查询时，比较优雅的写法是利用&lt;code&gt;toSql()&lt;/code&gt;与&lt;code&gt;mergeBindings()&lt;/code&gt;。&lt;/p&gt;
    
    </summary>
    
      <category term="php" scheme="https://cloudycity.me/categories/php/"/>
    
    
      <category term="laravel" scheme="https://cloudycity.me/tags/laravel/"/>
    
  </entry>
  
  <entry>
    <title>hexo使用github issue存放文章与评论</title>
    <link href="https://cloudycity.me/p/9414.html"/>
    <id>https://cloudycity.me/p/9414.html</id>
    <published>2019-02-14T07:32:14.000Z</published>
    <updated>2020-01-08T14:00:31.599Z</updated>
    
    <content type="html"><![CDATA[<p><code>Hexo</code>默认文章存放于<code>source</code>分支，没有评论系统，不过都可以通过插件进行扩展。本文介绍如何将<code>hexo</code>的文章与评论存放于Github Issue中（issue内容为博客内容，issue评论为博客评论）。<br><a id="more"></a></p><h2 id="使用github-issue存放文章"><a href="#使用github-issue存放文章" class="headerlink" title="使用github issue存放文章"></a>使用github issue存放文章</h2><p>这种方案主要优点是可以直接使用GitHub的图床。<br><strong><em>注意: 19年10月开始<code>githubusercontent.com</code>域名被墙，需要科学才能看到图片</em></strong></p><h3 id="安装插件"><a href="#安装插件" class="headerlink" title="安装插件"></a>安装插件</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install hexo-migrator-github-issue --save</span><br></pre></td></tr></table></figure><h3 id="新建issue文章"><a href="#新建issue文章" class="headerlink" title="新建issue文章"></a>新建issue文章</h3><p><img src="/images/loading/loading_1.gif" data-original="https://user-images.githubusercontent.com/17662451/52760542-daea1d80-304a-11e9-88e6-b8a479c359ea.png" alt="qq 20190214112539"></p><p>使用GitHub图床非常简单，把图片文件拖到编辑框就行了~</p><h3 id="导入文章"><a href="#导入文章" class="headerlink" title="导入文章"></a>导入文章</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo migrate github-issue 你的Github用户名/你存放hexo的仓库名</span><br></pre></td></tr></table></figure><p>例如<br><img src="/images/loading/loading_1.gif" data-original="https://user-images.githubusercontent.com/17662451/52893713-7b227c80-31da-11e9-910c-d57b2e68227b.png" alt="qq 20190216110245"><br>然后生成部署即可。</p><h3 id="插件扩展"><a href="#插件扩展" class="headerlink" title="插件扩展"></a>插件扩展</h3><p>该插件会根据issue的label为文章生成标签，如果要想生成分类和置顶参数，需要做一些修改。</p><p>我提了一个<a href="https://github.com/Yikun/hexo-migrator-github-issue/pull/4" target="_blank" rel="noopener">PR</a>还没通过，这里直接使用我fork的分支替换。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -fsSL https://raw.githubusercontent.com/CloudyCity/hexo-migrator-github-issue/master/index.js &gt; node_modules/hexo-migrator-github-issue/index.js</span><br></pre></td></tr></table></figure><p><img src="/images/loading/loading_1.gif" data-original="https://user-images.githubusercontent.com/17662451/71967884-ee900b00-323e-11ea-9f72-9be8899eee03.jpg" alt="Xnip2020-01-08_17-46-56"></p><h2 id="使用github-issue存放评论"><a href="#使用github-issue存放评论" class="headerlink" title="使用github issue存放评论"></a>使用github issue存放评论</h2><h3 id="安装插件-1"><a href="#安装插件-1" class="headerlink" title="安装插件"></a>安装插件</h3><p>Next主题自带gitment，主文件是<code>/themes/next/source/js/src/gitment.browser.js</code>。</p><p>如果是其他主题，需要安装<code>gitment</code>，主文件是<code>/node_modules/gitment/dist/gitment.browser.js</code>。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install gitment --save</span><br></pre></td></tr></table></figure><h3 id="创建授权应用"><a href="#创建授权应用" class="headerlink" title="创建授权应用"></a>创建授权应用</h3><p><img src="/images/loading/loading_1.gif" data-original="https://user-images.githubusercontent.com/17662451/52766577-88b4f680-3062-11e9-8750-65328503bfa5.png" alt="qq 20190214114441"><br><a href="https://github.com/settings/applications/new" target="_blank" rel="noopener">点击这里</a>创建，名称随意，两个url都填hexo博客的url，创建完成就得到应用ID和密钥。</p><h3 id="创建新仓库"><a href="#创建新仓库" class="headerlink" title="创建新仓库"></a><del>创建新仓库</del></h3><p><del>在GitHub中创建一个新仓库，其issue将用于存放评论。</del></p><h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><p>在Next主题的配置文件<code>_config.yaml</code>中更改以下配置</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">gitment:</span></span><br><span class="line"><span class="attr">    enable:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">    githubID:</span> <span class="string">你的github用户名</span></span><br><span class="line"><span class="attr">    repo:</span> <span class="string">博客所在仓库</span></span><br><span class="line"><span class="attr">    ClientID:</span> <span class="string">应用ID</span></span><br><span class="line"><span class="attr">    ClientSecret:</span> <span class="string">密钥</span></span><br><span class="line"><span class="attr">    lazy:</span> <span class="literal">false</span></span><br></pre></td></tr></table></figure><h3 id="修改CORS转发代理"><a href="#修改CORS转发代理" class="headerlink" title="修改CORS转发代理"></a>修改CORS转发代理</h3><p>原作者提供的转发服务已经无法正常使用，需要更改<code>gitment</code>主文件，将中以下内容</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">_utils.http.post(<span class="string">'https://gh-oauth.imsun.net'</span>, &#123;</span><br></pre></td></tr></table></figure><p>修改为</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">_utils.http.post(<span class="string">'https://cors.zme.ink/https://github.com/login/oauth/access_token'</span>, &#123;</span><br></pre></td></tr></table></figure><h3 id="插件修改"><a href="#插件修改" class="headerlink" title="插件修改"></a>插件修改</h3><p>此插件原本是使用另一个仓库存放评论，现在的需求是用博客所在仓库的对应文章issue中存放评论，需要修改<code>loadMeta()</code>，让插件使用<code>id</code>获取issue。</p><p>这里使用<code>hexo-migrator-github-issue</code>作者<code>Yikun</code>fork的分支，用<code>webpack</code>打包，覆盖<code>gitment</code>主文件。</p><p><code>Next</code>主题可参考本博客的<a href="https://github.com/CloudyCity/CloudyCity.github.io/blob/source/themes/next/source/js/src/gitment.browser.js" target="_blank" rel="noopener">gitment.browser.js</a></p><p>非<code>Next</code>主题可参考我写的替换脚本<a href="https://github.com/CloudyCity/CloudyCity.github.io/blob/source/gitment.sh" target="_blank" rel="noopener">gitment.sh</a></p><h3 id="主题修改"><a href="#主题修改" class="headerlink" title="主题修改"></a>主题修改</h3><p>这里使用的是Next主题，需要修改三个模板文件，将<code>hexo-migrator-github-issue</code>插件获取到的<code>issue-number</code>作为<code>id</code>，供<code>gitment</code>插件中的<code>loadMeta()</code>使用。</p><ol><li><code>\themes\next\layout\_partials\comments\gitment.swig</code></li><li><code>\themes\next\layout\_script\comments\gitment.swig</code></li><li><code>\themes\next\layout\_third-party\comments\gitment.swig</code></li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;% <span class="keyword">if</span> theme.gitment.enable %&#125;</span><br><span class="line">     &#123;% <span class="keyword">set</span> id = page.number %&#125;</span><br><span class="line">     &#123;% <span class="keyword">set</span> owner = theme.gitment.githubID %&#125;</span><br></pre></td></tr></table></figure><p>可以将主题加入版本控制，更换机器后就不需要再操作一遍，不过也会导致<code>gitment</code>的密钥泄漏:(</p><h2 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h2><p>最终效果参照<a href="https://github.com/CloudyCity/CloudyCity.github.io/issues/16" target="_blank" rel="noopener">本文章对应issue</a></p><p>如果大家觉得上面两个插件好用的话可以去给插件的项目点个星支持开发者哦~<br><a href="https://github.com/Yikun/hexo-migrator-github-issue" target="_blank" rel="noopener">hexo-migrator-github-issue</a><br><a href="https://github.com/imsun/gitment" target="_blank" rel="noopener">gitment</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;code&gt;Hexo&lt;/code&gt;默认文章存放于&lt;code&gt;source&lt;/code&gt;分支，没有评论系统，不过都可以通过插件进行扩展。本文介绍如何将&lt;code&gt;hexo&lt;/code&gt;的文章与评论存放于Github Issue中（issue内容为博客内容，issue评论为博客评论）。&lt;br&gt;
    
    </summary>
    
      <category term="新手村" scheme="https://cloudycity.me/categories/%E6%96%B0%E6%89%8B%E6%9D%91/"/>
    
    
      <category term="hexo" scheme="https://cloudycity.me/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title>搭建hexo博客</title>
    <link href="https://cloudycity.me/p/ee20.html"/>
    <id>https://cloudycity.me/p/ee20.html</id>
    <published>2019-02-13T16:32:12.000Z</published>
    <updated>2020-01-08T14:00:31.599Z</updated>
    
    <content type="html"><![CDATA[<p>Hexo是一种使用Node.js编写的静态博客框架，快速、简洁、扩展丰富。本文介绍如何搭建Hexo博客，并部署到GitHub Page。<br><a id="more"></a></p><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>个人认为，写博客是一个程序猿记录和总结的最好方式，虽然写博文没有使用笔记软件记录那么方便，需要更加严谨，但我觉得这其实是好事，可以迫使你更加认真的去钻研，而不只是浅尝辄止。长期坚持下来，可以改变你的学习态度，受益匪浅。</p><p>不过我本来并不打算写这篇博文，因为网上已经有太多的教程，没有必要重复造轮子。但是我在搭建过程遇到很多问题，花了不少时间，所以还是决定记录下来。</p><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p><a href="https://hexo.io/zh-cn/" target="_blank" rel="noopener">Hexo</a>是一种使用<a href="http://nodejs.org/" target="_blank" rel="noopener">Node.js</a>编写的静态博客框架，快速、简洁、扩展丰富。</p><p>搭建完成后使用非常简单：</p><ol><li>在hexo项目目录下的\source\_posts\中用<a href="http://markdown.tw/" target="_blank" rel="noopener">Markdown</a>语法写博文；<br><img src="/images/loading/loading_1.gif" data-original="https://user-images.githubusercontent.com/17662451/52757598-306cfd00-3040-11e9-8859-2aae242647f7.png" alt="qq 20190214100921"></li><li>生成静态文件（<strong>Hexo</strong>将MD文件其解析成HTML文件）并部署。<br><img src="/images/loading/loading_1.gif" data-original="https://user-images.githubusercontent.com/17662451/52757969-81c9bc00-3041-11e9-83c4-98106ac34602.png" alt="qq 20190214101614"></li></ol><h2 id="搭建"><a href="#搭建" class="headerlink" title="搭建"></a>搭建</h2><p>本教程将<strong>Hexo</strong>部署到<a href="https://pages.github.com/" target="_blank" rel="noopener">GitHub Page</a> ，可以节省域名和空间的费用。</p><h3 id="安装与配置Git"><a href="#安装与配置Git" class="headerlink" title="安装与配置Git"></a>安装与配置Git</h3><p>如果你是初次使用，安装时一路Next即可，然后打开<code>Git Bash</code>进行用户配置。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$  git config --global user.name 你的用户名</span><br><span class="line">$  git config --global user.email 你的邮箱</span><br></pre></td></tr></table></figure></p><p>生成SSH公钥。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ssh-keygen</span><br></pre></td></tr></table></figure></p><p>首先 <code>ssh-keygen</code> 会确认密钥的存储位置（默认是 <code>.ssh/id_rsa</code>），然后它会要求你输入两次密钥口令。如果你不想在使用密钥，直接回车即可。<br>接下来使用<code>cat</code>命令查看公钥，下一步会用到。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ cat ~/.ssh/id_rsa.pub</span><br></pre></td></tr></table></figure><h3 id="创建GitHub仓库"><a href="#创建GitHub仓库" class="headerlink" title="创建GitHub仓库"></a>创建GitHub仓库</h3><p>创建一个仓库，名称必须是<code>你的GitHub用户名.github.io</code>，例如我的是仓库名为<code>CloudyCity.github.io</code>。<br>然后进入<em>Setting</em>页面将上一步生成的公钥添加进去，以获得让你的电脑获得访问仓库的权限。</p><h3 id="安装与配置Hexo"><a href="#安装与配置Hexo" class="headerlink" title="安装与配置Hexo"></a>安装与配置Hexo</h3><p>接下来就可以开始正题了，安装后使用<strong>管理员身份</strong>打开<code>Git Bash</code>。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install hexo-cli -g</span><br></pre></td></tr></table></figure></p><p>进入你打算存放本地仓库的文件夹，初始化<strong>Hexo</strong>，并安装依赖。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo init</span><br></pre></td></tr></table></figure></p><p>之后可以查看<strong>Hexo</strong>版本。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo -v</span><br></pre></td></tr></table></figure></p><p><strong>Hexo 3.0</strong> 之后需要另外安装<code>deployer</code>才能部署。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure></p><p>现在可以先进行本地测试，首先生成静态页面。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo g</span><br></pre></td></tr></table></figure></p><p>然后启用本地服务，用浏览器打开 <a href="localhost:4000" target="_blank" rel="noopener">localhost:4000</a>，如果没问题继续往下。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo s</span><br></pre></td></tr></table></figure></p><p>打开<strong>Hexo</strong>文件夹下的<em>_config.yml</em>，这里只说明关于部署的配置项，其他配置项请移步至<a href="https://hexo.io/zh-cn/docs/configuration.html" target="_blank" rel="noopener">Hexo文档</a> 。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  <span class="built_in">type</span>: git</span><br><span class="line">  repository: git@github.com:CloudyCity/CloudyCity.github.io.git</span><br><span class="line">  branch: master</span><br></pre></td></tr></table></figure></p><p>将这里的<code>repository</code>的值改为你的<strong>GitHub</strong>仓库的SSH地址即可。<br>激动人心的时刻来了，执行部署。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo d</span><br></pre></td></tr></table></figure></p><p>如果你上面的步骤的都没问题的话，这时候在浏览器直接访问你的仓库名 (例:<a href="https://cloudycity.github.io" target="_blank" rel="noopener">https://cloudycity.github.io</a>) 就可以看到你的博客了。</p><h3 id="上传Hexo的源码"><a href="#上传Hexo的源码" class="headerlink" title="上传Hexo的源码"></a>上传Hexo的源码</h3><p>打开<strong>Hexo</strong>文件夹，创建Git本地仓库<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git init</span><br></pre></td></tr></table></figure></p><p>创建新分支<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git branch <span class="built_in">source</span></span><br></pre></td></tr></table></figure></p><p>切换成source分支<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git checkout <span class="built_in">source</span></span><br></pre></td></tr></table></figure></p><p>追踪所有文件<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git add .</span><br></pre></td></tr></table></figure></p><p>提交更改（到本地仓库）<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git commit -m <span class="string">'first time upload source'</span></span><br></pre></td></tr></table></figure></p><p>添加远程仓库，这里也是键入你的<strong>GitHub</strong>仓库的SSH地址<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git remote add origin git@github.com:CloudyCity/CloudyCity.github.io.git</span><br></pre></td></tr></table></figure></p><p>推送到远程仓库<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git push origin <span class="built_in">source</span></span><br></pre></td></tr></table></figure></p><p>如果没遇到问题，那恭喜你成功将<strong>Hexo</strong>源码推送到你在<strong>GitHub</strong>的名称为<code>你的GitHub用户名.github.io</code>的仓库的source分支中！这样以后你换一台设备亦可以继续写博文啦~（当然你还是需要添加新设备的公钥到<strong>GitHub</strong>中）</p><p>需要注意的是，因为文章存放在source分支中，所以每次写好一篇新文章，应该提交并推送到远程分支中。</p><h3 id="下载Hexo的源码"><a href="#下载Hexo的源码" class="headerlink" title="下载Hexo的源码"></a>下载Hexo的源码</h3><p>这里假如你换了一台设备，打开你打算作为本地仓库的文件夹，创建本地仓库，生成与添加公钥的步骤不再赘述。</p><p>克隆远程仓库<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git <span class="built_in">clone</span> git@github.com:CloudyCity/CloudyCity.github.io.git</span><br></pre></td></tr></table></figure></p><p>切换source分支<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git checkout <span class="built_in">source</span></span><br></pre></td></tr></table></figure></p><p>源码中的<code>package.json</code>已保存依赖信息，这里只需要自动安装即可。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install</span><br></pre></td></tr></table></figure></p><p>这样子就再次搭建好<strong>Hexo</strong>环境啦~</p><h2 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h2><p>搭建完成只是开始，坚持用心写文章才是最难的，大家一起加油。<br>另外，hexo还有非常多好看的主题和有用的插件哦~</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Hexo是一种使用Node.js编写的静态博客框架，快速、简洁、扩展丰富。本文介绍如何搭建Hexo博客，并部署到GitHub Page。&lt;br&gt;
    
    </summary>
    
      <category term="新手村" scheme="https://cloudycity.me/categories/%E6%96%B0%E6%89%8B%E6%9D%91/"/>
    
    
      <category term="hexo" scheme="https://cloudycity.me/tags/hexo/"/>
    
  </entry>
  
</feed>
