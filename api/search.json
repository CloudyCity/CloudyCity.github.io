[{"id":"b2664a00c0b23f7c33471554c1cc3622","title":"GitLab CI/CD简单实践","content":"针对一个前端项目仓库，使用简单、低成本的方式进行CI/CD。\n\n\n简介GitLab CI/CD通过GitLab Runner实现。流程为：由GitLab触发流水线，通知安装在部署机上的Runner，然后Runner配置的Executor执行gitlab-ci.yml中的流程。\n\nGitLab推荐用docker作为Executor，但考虑到实际项目情况与需求，我是用shell作为Executor。\n所以，在GitLab的管理界面以外，我们需要做以下三件事：\n\n在仓库中配置gitlab-ci.yml\n在部署机上配置Runner\n在部署机上授予gitlab-runner用户在部署目录的写权限\n\n流程CI/CD配置文件首先推荐一个npm包：install-changed，用于判断依赖是否发生更新，手动部署时既能跳过不必要的npm install，也能保证不漏掉必要的npm install。\nnpm i install-changed\n\n在package.json添加命令\n&quot;scripts&quot;: &#123;\n    &quot;pre-run&quot;: &quot;install-changed&quot;\n\n考虑紧急情况可能需要手动部署，先写一个部署脚本。\ndeploy.sh\n# 变量\nif [[ -n $1 ]]; then\n    path&#x3D;$1\nelse\n    echo &quot;缺少输出目录&quot;\n    exit 1;\nfi\n\n# 当 未安装依赖 或 依赖列表更新 时安装依赖\nnpm run pre-run || npm ci --no-progress --registry&#x3D;https:&#x2F;&#x2F;registry.npm.taobao.org\n# 编译\nnpm run build\n# 平滑覆盖\ncp -r dist&#x2F;* $&#123;path&#125;&#x2F; &amp;&amp; find $&#123;path&#125; -mmin +1 -type f -delete\n\n自动构建部署时复用部署脚本\ngitlab-ci.yml\nstages:\n  - build\n\nbuild:\n  stage: build\n  only:\n    - master\n  script:\n    - sh deploy.sh $RELEASE_PATH\n\n注意这里用到一个环境变量RELEASE_PATH，需要在GitLab仓库页的 设置 - CI/CD - 加密变量 中配置。\n\n这个目录就是编译后静态文件要部署的目录，需要给gitlab-runner用户写权限。\nRunner安装GitLab推荐的是Runner版本与GitLab版本保持一致，有些高版本Runner能与低版本GitLab协作，但不能用新特性。我的GitLab版本为10.7.3，Runner版本为13.4.1。\n进入部署机\nyum install gitlab-runner\n\n注册首先打开GitLab仓库页中的 设置 - CI/CD - Runners设置\n\n回到部署机\nsudo gitlab-runner register \\\n  --non-interactive \\\n  --url &quot;填上图中的URL&quot; \\\n  --registration-token &quot;填上图中的注册令牌&quot; \\\n  --executor &quot;shell&quot; \\\n  --description &quot;shell-runner&quot; \\\n  --tag-list &quot;shell&quot; \\\n  --run-untagged&#x3D;&quot;true&quot; \\\n\n之后就会像上图一样，【当前项目有效可用的 runner】下方会出现刚刚注册的Runner。\n测试手动触发在GitLab仓库页面的 CI/CD - 流水线中点击运行流水线即可。\n\n自动触发首先检查Runner设置的触发条件，如下图配置，每当受保护分支有新的提交推送，便会触发流水线。\n\n其他如果其他前端项目也是用这个方式部署，可以取消Runner设置中的【锁定到当前项目】，这样就可以复用这个runner，只需要每个仓库配置不同的环境变量RELEASE_PATH即可。\n","slug":"GitLab-CI-CD简单实践","date":"2021-05-28T03:23:58.000Z","categories_index":"前端,运维","tags_index":"gitlab","author_index":"CloudyCity"},{"id":"fec643b4103ddf5fb791d3e0f56f5c2e","title":"Laravel-Websockets组件实践","content":"给Laravel项目搭建Websocket服务时，不想用pusher这种在线服务? 觉得用laravel-echo-server监听事件不方便? 不想用swoole自己实现? 那你可以考虑Laravel官方推荐的laravel-websockets组件。\n\n\n该组件有以下优点:\n\n免费\n使用Pusher驱动\n方便继承扩展，实现流程控制\n\n引入composer require \"beyondcode/laravel-websockets:^2.0\"\ncomposer require digitaltolk/multiple-broadcaster\n\n1.x版本存在一些问题，扩展的时候有一些麻烦，组件作者也是推荐2.x版本\n\n安装php artisan vendor:publish --provider=\"BeyondCode\\LaravelWebSockets\\WebSocketsServiceProvider\" --tag=\"migrations\"\nphp artisan migrate\nphp artisan vendor:publish --provider=\"BeyondCode\\LaravelWebSockets\\WebSocketsServiceProvider\" --tag=\"config\"\n\n自定义需求\n后台用户和普通用户的服务互不干扰\n监听普通用户的行为\n\n事件创建几个基础事件。\n\nUserEnterChannel: 用户订阅channel\nUserExitChannel: 用户取消订阅channel\nUserAppBackground: 用户APP切换至后台\nUserAppForeground: 用户APP切换至前台台\n\n继承BeyondCode\\LaravelWebSockets\\Server\\WebSocketHandler，监听客户端消息，触发UserAppBackground、UserAppForeground事件。\n注意WebSocketHandler@onOpen($connection)中可以获取的信息非常有限，无法识别出用户。组件自带的事件NewConnection和ConnectionClosed也只有appId和socketId。\n\n&lt;?php\n\nnamespace App\\Services\\WebSockets\\Server;\n\nuse App\\Events\\UserAppBackground;\nuse App\\Events\\UserAppForeground;\nuse App\\Services\\WebSockets\\ChannelManagers\\LocalChannelManager;\nuse BeyondCode\\LaravelWebSockets\\Server\\WebSocketHandler as BaseWebSocketHandler;\nuse Ratchet\\ConnectionInterface;\nuse Exception;\nuse Ratchet\\RFC6455\\Messaging\\MessageInterface;\n\n/**\n * Class Handler\n * @package App\\WebSockets\n * @link\n */\nclass WebSocketHandler extends BaseWebSocketHandler\n&#123;\n    /**\n     * The channel manager.\n     *\n     * @var LocalChannelManager\n     */\n    protected $channelManager;\n\n    /**\n     * Handle the socket opening.\n     *\n     * @param \\Ratchet\\ConnectionInterface $connection\n     * @return void\n     * @throws \\Exception\n     */\n    public function onOpen(ConnectionInterface $connection)\n    &#123;\n        parent::onOpen($connection);\n    &#125;\n\n    /**\n     * Handle the websocket close.\n     *\n     * @param  \\Ratchet\\ConnectionInterface  $connection\n     * @return void\n     */\n    public function onClose(ConnectionInterface $connection)\n    &#123;\n        parent::onClose($connection);\n    &#125;\n\n    /**\n     * Handle the websocket errors.\n     *\n     * @param \\Ratchet\\ConnectionInterface $connection\n     * @param Exception $exception\n     * @return void\n     */\n    public function onError(ConnectionInterface $connection, Exception $exception)\n    &#123;\n        parent::onError($connection, $exception);\n    &#125;\n\n    /**\n     * Handle the incoming message.\n     *\n     * @param  \\Ratchet\\ConnectionInterface  $connection\n     * @param  \\Ratchet\\RFC6455\\Messaging\\MessageInterface  $message\n     * @return void\n     */\n    public function onMessage(ConnectionInterface $connection, MessageInterface $message)\n    &#123;\n        $payload = json_decode($message->getPayload());\n\n        if ($payload->event == 'client-app.background') &#123;\n            $user = getUserByChannel($payload->channel);\n            UserAppBackground::dispatch($user->id, $user->gid);\n        &#125; elseif ($payload->event == 'client-app.foreground') &#123;\n            $user = getUserByChannel($payload->channel);\n            UserAppForeground::dispatch($user->id, $user->gid);\n        &#125;\n\n        parent::onMessage($connection, $message);\n    &#125;\n&#125;\n\n频道主要改写PrivateChanel，触发UserEnterChannel和UserExitChannel事件。\n&lt;?php\n\nnamespace App\\Services\\WebSockets\\Channels;\n\nuse App\\Events\\UserEnterChannel;\nuse App\\Events\\UserExitChannel;\nuse App\\Services\\WebSockets\\ChannelManagers\\LocalChannelManager;\nuse BeyondCode\\LaravelWebSockets\\Channels\\PrivateChannel as BasePrivateChannel;\nuse BeyondCode\\LaravelWebSockets\\DashboardLogger;\nuse BeyondCode\\LaravelWebSockets\\Events\\SubscribedToChannel;\nuse BeyondCode\\LaravelWebSockets\\Events\\UnsubscribedFromChannel;\nuse BeyondCode\\LaravelWebSockets\\Server\\Exceptions\\InvalidSignature;\nuse Ratchet\\ConnectionInterface;\nuse stdClass;\n\nclass PrivateChannel extends BasePrivateChannel\n&#123;\n    /**\n     * @var LocalChannelManager\n     */\n    protected $channelManager;\n\n    /**\n     * Subscribe to the channel.\n     *\n     * @see    https://pusher.com/docs/pusher_protocol#presence-channel-events\n     * @param  \\Ratchet\\ConnectionInterface  $connection\n     * @param  \\stdClass  $payload\n     * @return bool\n     * @throws InvalidSignature\n     */\n    public function subscribe(ConnectionInterface $connection, stdClass $payload): bool\n    &#123;\n        $this->verifySignature($connection, $payload);\n\n        // 针对特殊频道\n        if (isUserChannel($payload->channel)) &#123;\n            // 识别用户\n            $user = getUserByChannel($payload->channel);\n\n            // 触发事件\n            UserEnterChannel::dispatch($user->id, $user->gid);\n\n            // 保存在成员数组中\n            $this->channelManager\n                ->userJoinedPrivateChannel($connection, $user, $this->getName(), $payload)\n                ->then(function ($users) use ($connection) &#123;\n                    $connection->send(json_encode([\n                        'event' => 'pusher_internal:subscription_succeeded',\n                        'channel' => $this->getName(),\n                        'data' => '[]',\n                    ]));\n                &#125;)\n                ->then(function () use ($connection, $user, $payload) &#123;\n                    // The `pusher_internal:member_added` event is triggered when a user joins a channel.\n                    // It's quite possible that a user can have multiple connections to the same channel\n                    // (for example by having multiple browser tabs open)\n                    // and in this case the events will only be triggered when the first tab is opened.\n                    $this->channelManager\n                        ->getMemberSockets($user->id, $connection->app->id, $this->getName())\n                        ->then(function ($sockets) use ($payload, $connection, $user) &#123;\n                            if (count($sockets) === 1) &#123;\n                                $memberAddedPayload = [\n                                    'event' => 'pusher_internal:member_added',\n                                    'channel' => $this->getName(),\n                                    'data' => $payload->channel_data,\n                                ];\n\n                                $this->broadcastToEveryoneExcept(\n                                    (object) $memberAddedPayload,\n                                    $connection->socketId,\n                                    $connection->app->id\n                                );\n\n                                SubscribedToChannel::dispatch(\n                                    $connection->app->id,\n                                    $connection->socketId,\n                                    $this->getName(),\n                                    $user\n                                );\n                            &#125;\n\n                            DashboardLogger::log($connection->app->id, DashboardLogger::TYPE_SUBSCRIBED, [\n                                'socketId' => $connection->socketId,\n                                'channel' => $this->getName(),\n                                'duplicate-connection' => count($sockets) > 1,\n                            ]);\n                        &#125;);\n                &#125;);\n        &#125;\n\n        return parent::subscribe($connection, $payload);\n    &#125;\n\n    /**\n     * Unsubscribe connection from the channel.\n     *\n     * @param  \\Ratchet\\ConnectionInterface  $connection\n     * @return bool\n     */\n    public function unsubscribe(ConnectionInterface $connection): bool\n    &#123;\n        $truth = parent::unsubscribe($connection);\n\n        $this->channelManager\n            ->getChannelUser($connection, $this->getName())\n            ->then(function ($user) &#123;\n                $user = @json_decode($user);\n\n                if ($user) &#123;\n                    // 触发事件\n                    UserExitChannel::dispatch($user->id, $user->gid);\n                &#125;\n\n                return $user;\n            &#125;)\n            ->then(function ($user) use ($connection) &#123;\n                if (! $user) &#123;\n                    return;\n                &#125;\n\n                $this->channelManager\n                    ->userLeftPrivateChannel($connection, $user, $this->getName())\n                    ->then(function () use ($connection, $user) &#123;\n                        // The `pusher_internal:member_removed` is triggered when a user leaves a channel.\n                        // It's quite possible that a user can have multiple connections to the same channel\n                        // (for example by having multiple browser tabs open)\n                        // and in this case the events will only be triggered when the last one is closed.\n                        $this->channelManager\n                            ->getMemberSockets($user->id, $connection->app->id, $this->getName())\n                            ->then(function ($sockets) use ($connection, $user) &#123;\n                                if (count($sockets) === 0) &#123;\n                                    $memberRemovedPayload = [\n                                        'event' => 'pusher_internal:member_removed',\n                                        'channel' => $this->getName(),\n                                        'data' => json_encode([\n                                            'uid' => $user->id,\n                                        ]),\n                                    ];\n\n                                    $this->broadcastToEveryoneExcept(\n                                        (object) $memberRemovedPayload,\n                                        $connection->socketId,\n                                        $connection->app->id\n                                    );\n\n                                    UnsubscribedFromChannel::dispatch(\n                                        $connection->app->id,\n                                        $connection->socketId,\n                                        $this->getName(),\n                                        $user\n                                    );\n                                &#125;\n                            &#125;);\n                    &#125;);\n            &#125;);\n\n        return $truth;\n    &#125;\n&#125;\n涉及的几个助手函数\n&lt;?php\n\nif (!function_exists('getUserChannelPrefix')) &#123;\n    /**\n     * 获取玩家的频道前缀\n     *\n     * @return string\n     */\n    function getUserChannelPrefix(): string\n    &#123;\n        return 'private-user.';\n    &#125;\n&#125;\n\nif (!function_exists('isUserChannel')) &#123;\n    /**\n     * 判断是否为玩家用户的频道\n     *\n     * @param string $channel\n     * @return bool\n     */\n    function isUserChannel(string $channel): bool\n    &#123;\n        $userChannelPrefix = getUserChannelPrefix();\n        $isUserChannel = Str::startsWith($channel, $userChannelPrefix);\n\n        return $isUserChannel;\n    &#125;\n&#125;\n\nif (!function_exists('getIdsByChannel')) &#123;\n    /**\n     * 根据玩家频道名获取各ID\n     *\n     * @param string $channel\n     * @return stdClass\n     */\n    function getUserByChannel(string $channel): stdClass\n    &#123;\n        $userChannelPrefix = getUserChannelPrefix();\n\n        $idString = str_replace($userChannelPrefix, '', $channel);\n        list($uid, $gid) = explode('.', $idString);\n\n        $user = new stdClass();\n        $user->id = $uid;\n        $user->gid = $gid;\n\n        return $user;\n    &#125;\n&#125;\n\n继承BeyondCode\\LaravelWebSockets\\ChannelManagers\\LocalChannelManager，实现userJoinedPrivateChannel、userLeftPrivateChannel、getChannelUser三个方法，在PrivateChannel中使用。\n&lt;?php\n\nnamespace App\\Services\\WebSockets\\ChannelManagers;\n\nuse App\\Services\\WebSockets\\Channels\\Channel;\nuse App\\Services\\WebSockets\\Channels\\PresenceChannel;\nuse App\\Services\\WebSockets\\Channels\\PrivateChannel;\nuse BeyondCode\\LaravelWebSockets\\ChannelManagers\\LocalChannelManager as BaseLocalChannelManager;\nuse BeyondCode\\LaravelWebSockets\\Helpers;\nuse Illuminate\\Support\\Str;\nuse Ratchet\\ConnectionInterface;\nuse stdClass;\nuse React\\Promise\\PromiseInterface;\n\nclass LocalChannelManager extends BaseLocalChannelManager\n&#123;\n    /**\n     * The list of users that joined the presence channel or private channel.\n     *\n     * private channel: key => UserObject\n     * presence channel: key => [ socketId => UserObject ]\n     * @var array\n     */\n    protected $users = [];\n\n    /**\n     * The list of users by socket and their attached id.\n     *\n     * @var array\n     */\n    protected $userSockets = [];\n\n    /**\n     * Get the channel class by the channel name.\n     *\n     * @param  string  $channelName\n     * @return string\n     */\n    protected function getChannelClassName(string $channelName): string\n    &#123;\n        if (Str::startsWith($channelName, 'private-')) &#123;\n            return PrivateChannel::class;\n        &#125;\n\n        if (Str::startsWith($channelName, 'presence-')) &#123;\n            return PresenceChannel::class;\n        &#125;\n\n        return Channel::class;\n    &#125;\n\n    /**\n     * Get a member from a private channel based on connection.\n     *\n     * @param  \\Ratchet\\ConnectionInterface  $connection\n     * @param  string  $channel\n     * @return \\React\\Promise\\PromiseInterface\n     */\n    public function getChannelUser(ConnectionInterface $connection, string $channel): PromiseInterface\n    &#123;\n        $user = $this->users[\"&#123;$connection->app->id&#125;:&#123;$channel&#125;\"] ?? null;\n\n        return Helpers::createFulfilledPromise($user);\n    &#125;\n\n    /**\n     * Handle the user when it joined a private channel.\n     *\n     * @param  \\Ratchet\\ConnectionInterface  $connection\n     * @param  stdClass  $user\n     * @param  string  $channel\n     * @param  stdClass  $payload\n     * @return PromiseInterface[bool]\n     */\n    public function userJoinedPrivateChannel(ConnectionInterface $connection, stdClass $user, string $channel, stdClass $payload): PromiseInterface\n    &#123;\n        $this->users[\"&#123;$connection->app->id&#125;:&#123;$channel&#125;\"] = json_encode($user);\n        $this->userSockets[\"&#123;$connection->app->id&#125;:&#123;$channel&#125;:&#123;$user->id&#125;\"][] = $connection->socketId;\n        used($payload);\n\n        return Helpers::createFulfilledPromise(true);\n    &#125;\n\n    /**\n     * Handle the user when it left a presence channel.\n     *\n     * @param  \\Ratchet\\ConnectionInterface  $connection\n     * @param  stdClass  $user\n     * @param  string  $channel\n     * @return PromiseInterface[bool]\n     */\n    public function userLeftPrivateChannel(ConnectionInterface $connection, stdClass $user, string $channel): PromiseInterface\n    &#123;\n        unset($this->users[\"&#123;$connection->app->id&#125;:&#123;$channel&#125;\"]);\n\n        $deletableSocketKey = array_search(\n            $connection->socketId,\n            $this->userSockets[\"&#123;$connection->app->id&#125;:&#123;$channel&#125;:&#123;$user->id&#125;\"]\n        );\n\n        if ($deletableSocketKey !== false) &#123;\n            unset($this->userSockets[\"&#123;$connection->app->id&#125;:&#123;$channel&#125;:&#123;$user->id&#125;\"][$deletableSocketKey]);\n\n            if (count($this->userSockets[\"&#123;$connection->app->id&#125;:&#123;$channel&#125;:&#123;$user->id&#125;\"]) === 0) &#123;\n                unset($this->userSockets[\"&#123;$connection->app->id&#125;:&#123;$channel&#125;:&#123;$user->id&#125;\"]);\n            &#125;\n        &#125;\n\n        return Helpers::createFulfilledPromise(true);\n    &#125;\n&#125;\n\n配置修改websockets.php，使用继承后的类，并配置多app。\n&lt;?php\n\nreturn [\n\n    /*\n    |--------------------------------------------------------------------------\n    | Dashboard Settings\n    |--------------------------------------------------------------------------\n    |\n    | You can configure the dashboard settings from here.\n    |\n    */\n\n    'dashboard' => [\n\n        'port' => env('LARAVEL_WEBSOCKETS_PORT', 6001),\n\n        'domain' => env('LARAVEL_WEBSOCKETS_DOMAIN'),\n\n        'path' => env('LARAVEL_WEBSOCKETS_PATH', 'websockets'),\n\n        'middleware' => [\n            'web',\n            \\BeyondCode\\LaravelWebSockets\\Dashboard\\Http\\Middleware\\Authorize::class,\n        ],\n\n    ],\n\n    'managers' => [\n\n        /*\n        |--------------------------------------------------------------------------\n        | Application Manager\n        |--------------------------------------------------------------------------\n        |\n        | An Application manager determines how your websocket server allows\n        | the use of the TCP protocol based on, for example, a list of allowed\n        | applications.\n        | By default, it uses the defined array in the config file, but you can\n        | anytime implement the same interface as the class and add your own\n        | custom method to retrieve the apps.\n        |\n        */\n\n        'app' => \\BeyondCode\\LaravelWebSockets\\Apps\\ConfigAppManager::class,\n\n    ],\n\n    /*\n    |--------------------------------------------------------------------------\n    | Applications Repository\n    |--------------------------------------------------------------------------\n    |\n    | By default, the only allowed app is the one you define with\n    | your PUSHER_* variables from .env.\n    | You can configure to use multiple apps if you need to, or use\n    | a custom App Manager that will handle the apps from a database, per se.\n    |\n    | You can apply multiple settings, like the maximum capacity, enable\n    | client-to-client messages or statistics.\n    |\n    */\n\n    'apps' => [\n        [\n            'id' => 'admin-app-id',\n            'name' => 'ADMIN',\n            'host' => null,\n            'key' => 'admin-app-key',\n            'secret' => 'admin-app-secret',\n            'path' => null,\n            'capacity' => null,\n            'enable_client_messages' => true,\n            'enable_statistics' => true,\n            'allowed_origins' => [\n                // env('LARAVEL_WEBSOCKETS_DOMAIN_ADMIN'),\n            ],\n        ],\n        [\n            'id' => 'api-app-id',\n            'name' => 'API',\n            'host' => null,\n            'key' => 'api-app-key',\n            'secret' => 'api-app-secret',\n            'path' => null,\n            'capacity' => null,\n            'enable_client_messages' => true,\n            'enable_statistics' => true,\n            'allowed_origins' => [\n                // env('LARAVEL_WEBSOCKETS_DOMAIN'),\n            ],\n        ],\n    ],\n\n    /*\n    |--------------------------------------------------------------------------\n    | Broadcasting Replication PubSub\n    |--------------------------------------------------------------------------\n    |\n    | You can enable replication to publish and subscribe to\n    | messages across the driver.\n    |\n    | By default, it is set to 'local', but you can configure it to use drivers\n    | like Redis to ensure connection between multiple instances of\n    | WebSocket servers. Just set the driver to 'redis' to enable the PubSub using Redis.\n    |\n    */\n\n    'replication' => [\n\n        'mode' => 'local',\n\n        'modes' => [\n\n            /*\n            |--------------------------------------------------------------------------\n            | Local Replication\n            |--------------------------------------------------------------------------\n            |\n            | Local replication is actually a null replicator, meaning that it\n            | is the default behaviour of storing the connections into an array.\n            |\n            */\n\n            'local' => [\n\n                /*\n                |--------------------------------------------------------------------------\n                | Channel Manager\n                |--------------------------------------------------------------------------\n                |\n                | The channel manager is responsible for storing, tracking and retrieving\n                | the channels as long as their members and connections.\n                |\n                */\n\n                'channel_manager' => \\App\\Services\\WebSockets\\ChannelManagers\\LocalChannelManager::class,\n\n                /*\n                |--------------------------------------------------------------------------\n                | Statistics Collector\n                |--------------------------------------------------------------------------\n                |\n                | The Statistics Collector will, by default, handle the incoming statistics,\n                | storing them until they will become dumped into another database, usually\n                | a MySQL database or a time-series database.\n                |\n                */\n\n                'collector' => \\BeyondCode\\LaravelWebSockets\\Statistics\\Collectors\\MemoryCollector::class,\n\n            ],\n\n            'redis' => [\n\n                'connection' => env('WEBSOCKETS_REDIS_REPLICATION_CONNECTION', 'default'),\n\n                /*\n                |--------------------------------------------------------------------------\n                | Channel Manager\n                |--------------------------------------------------------------------------\n                |\n                | The channel manager is responsible for storing, tracking and retrieving\n                | the channels as long as their members and connections.\n                |\n                */\n\n                'channel_manager' => BeyondCode\\LaravelWebSockets\\ChannelManagers\\RedisChannelManager::class,\n\n                /*\n                |--------------------------------------------------------------------------\n                | Statistics Collector\n                |--------------------------------------------------------------------------\n                |\n                | The Statistics Collector will, by default, handle the incoming statistics,\n                | storing them until they will become dumped into another database, usually\n                | a MySQL database or a time-series database.\n                |\n                */\n\n                'collector' => \\BeyondCode\\LaravelWebSockets\\Statistics\\Collectors\\RedisCollector::class,\n\n            ],\n\n        ],\n\n    ],\n\n    'statistics' => [\n\n        /*\n        |--------------------------------------------------------------------------\n        | Statistics Store\n        |--------------------------------------------------------------------------\n        |\n        | The Statistics Store is the place where all the temporary stats will\n        | be dumped. This is a much reliable store and will be used to display\n        | graphs or handle it later on your app.\n        |\n        */\n\n        'store' => \\BeyondCode\\LaravelWebSockets\\Statistics\\Stores\\DatabaseStore::class,\n\n        /*\n        |--------------------------------------------------------------------------\n        | Statistics Interval Period\n        |--------------------------------------------------------------------------\n        |\n        | Here you can specify the interval in seconds at which\n        | statistics should be logged.\n        |\n        */\n\n        'interval_in_seconds' => 60,\n\n        /*\n        |--------------------------------------------------------------------------\n        | Statistics Deletion Period\n        |--------------------------------------------------------------------------\n        |\n        | When the clean-command is executed, all recorded statistics older than\n        | the number of days specified here will be deleted.\n        |\n        */\n\n        'delete_statistics_older_than_days' => 60,\n\n    ],\n\n    /*\n    |--------------------------------------------------------------------------\n    | Maximum Request Size\n    |--------------------------------------------------------------------------\n    |\n    | The maximum request size in kilobytes that is allowed for\n    | an incoming WebSocket request.\n    |\n    */\n\n    'max_request_size_in_kb' => 250,\n\n    /*\n    |--------------------------------------------------------------------------\n    | SSL Configuration\n    |--------------------------------------------------------------------------\n    |\n    | By default, the configuration allows only on HTTP. For SSL, you need\n    | to set up the the certificate, the key, and optionally, the passphrase\n    | for the private key.\n    | You will need to restart the server for the settings to take place.\n    |\n    */\n\n    'ssl' => [\n\n        'local_cert' => env('LARAVEL_WEBSOCKETS_SSL_LOCAL_CERT', null),\n\n        'capath' => env('LARAVEL_WEBSOCKETS_SSL_CA', null),\n\n        'local_pk' => env('LARAVEL_WEBSOCKETS_SSL_LOCAL_PK', null),\n\n        'passphrase' => env('LARAVEL_WEBSOCKETS_SSL_PASSPHRASE', null),\n\n        'verify_peer' => env('APP_ENV') === 'production',\n\n        'allow_self_signed' => env('APP_ENV') !== 'production',\n\n    ],\n\n    /*\n    |--------------------------------------------------------------------------\n    | Route Handlers\n    |--------------------------------------------------------------------------\n    |\n    | Here you can specify the route handlers that will take over\n    | the incoming/outgoing websocket connections. You can extend the\n    | original class and implement your own logic, alongside\n    | with the existing logic.\n    |\n    */\n\n    'handlers' => [\n\n        'websocket' => \\App\\Services\\WebSockets\\Server\\WebSocketHandler::class,\n\n        'health' => \\BeyondCode\\LaravelWebSockets\\Server\\HealthHandler::class,\n\n        'trigger_event' => \\BeyondCode\\LaravelWebSockets\\API\\TriggerEvent::class,\n\n        'fetch_channels' => \\BeyondCode\\LaravelWebSockets\\API\\FetchChannels::class,\n\n        'fetch_channel' => \\BeyondCode\\LaravelWebSockets\\API\\FetchChannel::class,\n\n        'fetch_users' => \\BeyondCode\\LaravelWebSockets\\API\\FetchUsers::class,\n\n    ],\n\n    /*\n    |--------------------------------------------------------------------------\n    | Promise Resolver\n    |--------------------------------------------------------------------------\n    |\n    | The promise resolver is a class that takes a input value and is\n    | able to make sure the PHP code runs async by using ->then(). You can\n    | use your own Promise Resolver. This is usually changed when you want to\n    | intercept values by the promises throughout the app, like in testing\n    | to switch from async to sync.\n    |\n    */\n\n    'promise_resolver' => \\React\\Promise\\FulfilledPromise::class,\n\n];\n\n修改broadcasting.php，以实现同时在两个app中进行广播\n&lt;?php\n\nreturn [\n\n    /*\n    |--------------------------------------------------------------------------\n    | Default Broadcaster\n    |--------------------------------------------------------------------------\n    |\n    | This option controls the default broadcaster that will be used by the\n    | framework when an event needs to be broadcast. You may set this to\n    | any of the connections defined in the \"connections\" array below.\n    |\n    | Supported: \"pusher\", \"redis\", \"log\", \"null\"\n    |\n    */\n\n    'default' => env('BROADCAST_DRIVER', 'null'),\n\n    /*\n    |--------------------------------------------------------------------------\n    | Broadcast Connections\n    |--------------------------------------------------------------------------\n    |\n    | Here you may define all of the broadcast connections that will be used\n    | to broadcast events to other systems or over websockets. Samples of\n    | each available type of connection are provided inside this array.\n    |\n    */\n\n    'connections' => [\n\n        'pusher' => [\n            'driver' => 'multiple',\n            'connections' => ['pusher-for-admin', 'pusher-for-api'],\n            'options' => [\n                'cluster' => 'mt1',\n                'useTLS' => true,\n                'encrypted' => true,\n                'host' => '127.0.0.1',\n                'port' => 6001,\n                'scheme' => 'http',\n            ],\n        ],\n\n        'pusher-for-admin' => [\n            'driver' => 'pusher',\n            'key' => 'admin-app-key',\n            'secret' => 'admin-app-secret',\n            'app_id' => 'admin-app-id',\n            'options' => [\n                'cluster' => 'mt1',\n                'useTLS' => true,\n                'encrypted' => true,\n                'host' => '127.0.0.1',\n                'port' => 6001,\n                'scheme' => 'http',\n            ],\n        ],\n\n        'pusher-for-api' => [\n            'driver' => 'pusher',\n            'key' => 'api-app-key',\n            'secret' => 'api-app-secret',\n            'app_id' => 'api-app-id',\n            'options' => [\n                'cluster' => 'mt1',\n                'useTLS' => true,\n                'encrypted' => true,\n                'host' => '127.0.0.1',\n                'port' => 6001,\n                'scheme' => 'http',\n            ],\n        ],\n\n        'redis' => [\n            'driver' => 'redis',\n            'connection' => 'default',\n        ],\n\n        'log' => [\n            'driver' => 'log',\n        ],\n\n        'null' => [\n            'driver' => 'null',\n        ],\n\n    ],\n\n];\n\n最后将ENV文件中的BROADCAST_DRIVER改为pusher即可。\n启动php artisan websockets:serve\n\n客户端接入后台Nodejs\nimport Echo from 'laravel-echo';\n\nwindow.Pusher = require('pusher-js');\n\nwindow.Echo = new Echo(&#123;\n  broadcaster: 'pusher',\n  key: 'admin-app-key',\n  wsHost: window.location.hostname,\n  wsPort: 6001,\n  forceTLS: false,\n  disableStats: true,\n&#125;);\n\nAndroid 使用 pusher-websocket-java SDKIOS 使用 pusher-websocket-swift SDK\n连接参数\nhost: &#123;Websocket服务域名&#125; (我这边和laravel项目域名是同一个)\nport: 6001\napp_key: api-app-key\nauth_url: &#123;laravel项目域名&#125;&#x2F;broadcasting&#x2F;auth\n\n注意pusher-websocket-swift要使用8.0.0版本，9.x版本有bug无法连接服务\n\n","slug":"Laravel-Websockets组件实践","date":"2021-04-30T10:11:34.000Z","categories_index":"php","tags_index":"laravel,websocket","author_index":"CloudyCity"},{"id":"7383adf578f96139725a89cef1cef06f","title":"PHP强制规范检查的最佳实践","content":"规范是团队中最重要的部分之一，多数团队是靠自觉+review维护规范，而强制检查是最有效的方案。本文就水一下介绍下PHP_CodeSniffer在项目中强制执行的最佳实践。\n\n\n规范检查和表单检验一样，服务端是必须要检查的，客户端检查主要是优化使用体验。\n客户端引入组件$ composer require 'squizlabs/php_codesniffer' --dev\n\n自定义规范如果你的项目用的是Laravel框架，会发现它并没有完全遵守PSR2规范，这时候就需要使用自定义规范。在项目根目录创建phpcs.xml作为自定义规范，这里放出我的项目的例子。\n&lt;?xml version=\"1.0\"?>\n&lt;ruleset name=\"MyStandard\">\n    &lt;description>基于PSR2，去掉部分规则&lt;/description>\n    &lt;arg name=\"tab-width\" value=\"4\"/>\n\n    &lt;rule ref=\"PSR2\">\n        &lt;!-- 不限制行的长度 -->\n        &lt;exclude name=\"Generic.Files.LineLength\"/>\n        &lt;!-- 跳过的目录 -->\n        &lt;exclude-pattern>bootstrap/cache/*&lt;/exclude-pattern>\n        &lt;exclude-pattern>node_modules/*&lt;/exclude-pattern>\n        &lt;exclude-pattern>public/*&lt;/exclude-pattern>\n        &lt;exclude-pattern>resources/*&lt;/exclude-pattern>\n        &lt;exclude-pattern>storage/*&lt;/exclude-pattern>\n        &lt;exclude-pattern>vendor/*&lt;/exclude-pattern>\n    &lt;/rule>\n\n    &lt;!-- Laravel Migration &amp; Seeder 没有命名空间 -->\n    &lt;rule ref=\"PSR1.Classes.ClassDeclaration\">\n        &lt;exclude-pattern>database/*&lt;/exclude-pattern>\n    &lt;/rule>\n&lt;/ruleset>\n\n配置命令我的使用场景只检查php，为了加快执行速度，跳过了部分目录。加上这些参数之后命令会比较长，先加入到composer.json的脚本中，方便执行。\ncomposer.json\n\"scripts\": &#123;\n    \"phpcs\": [\n        \"./vendor/bin/phpcs --extensions='php' --standard='./phpcs.xml' --ignore='*/bootstrap/*,*/docker/*,*/node_modules/*,*/public/*,*/resources/*,*/storage/*,*/vendor/*,_ide_helper*,*.blade.php' -p\"\n    ],\n    \"phpcbf\": [\n        \"./vendor/bin/phpcbf --extensions='php' --standard='./phpcs.xml' --ignore='*/bootstrap/*,*/docker/*,*/node_modules/*,*/public/*,*/resources/*,*/storage/*,*/vendor/*,_ide_helper*,*.blade.php' -p\"\n    ]\n&#125;\n\n手动执行$ composer phpcs ./\n$ composer phpcbf ./\n\n\n自动执行通过pre-commit钩子，在提交时自动执行phpcs进行检查，如果未通过检查将阻止提交。\n在项目根目录创建git-pre-commit-hook:\n#!/bin/sh\n\nPROJECT=`php -r \"echo dirname(dirname(dirname(realpath('$0'))));\"`\nSTAGED_FILES_CMD=`git diff --cached --name-only --diff-filter=ACMR HEAD | grep \\\\\\\\.php`\n\n# Determine if a file list is passed\nif [ \"$#\" -eq 1 ]\nthen\n    oIFS=$IFS\n    IFS='\n    '\n    SFILES=\"$1\"\n    IFS=$oIFS\nfi\nSFILES=$&#123;SFILES:-$STAGED_FILES_CMD&#125;\n\necho \"Checking PHP Lint...\"\nfor FILE in $SFILES\ndo\n    php -l -d display_errors=0 $PROJECT/$FILE\n    if [ $? != 0 ]\n    then\n        echo \"Fix the error before commit.\"\n        exit 1\n    fi\n    FILES=\"$FILES $PROJECT/$FILE\"\ndone\n\nif [ \"$FILES\" != \"\" ]\nthen\n    echo \"Running Code Sniffer. Code standard PSR2.\"\n    composer phpcs -- $FILES\n    if [ $? != 0 ]\n    then\n        echo \"Fix the error before commit!\"\n        echo \"Run\"\n        echo \"  composer phpcbf -- $FILES\"\n        echo \"for automatic fix or fix it manually.\"\n        exit 1\n    fi\nfi\n\nexit $?\n\n同样是在项目根目录创建git-hook-setup.sh，用于安装钩子:\n#!/bin/sh\n\nif [ -e .git/hooks/pre-commit ];\nthen\n    PRE_COMMIT_EXISTS=1\nelse\n    PRE_COMMIT_EXISTS=0\nfi\n\ncp ./git-pre-commit-hook .git/hooks/pre-commit\nchmod +x .git/hooks/pre-commit\n\nif [ \"$PRE_COMMIT_EXISTS\" = 0 ];\nthen\n    echo \"Pre-commit git hook is installed!\"\nelse\n    echo \"Pre-commit git hook is updated!\"\nfi\n\n在composer.json的钩子中加入git钩子的安装脚本 禁止套娃\n\"scripts\": &#123;\n    \"install-hooks\": [\n        \"sh ./git-hook-setup.sh\"\n    ],\n    \"post-install-cmd\": [\n        \"@install-hooks\"\n    ],\n&#125;\n\n每一位开发者在克隆项目后都会执行composer install，安装完依赖就会自动安装git钩子，从而实现自动检查。\n\n使用命令行提交被拒:\n\n正常安装钩子后，使用PHPStorm提交时将出现Run Git hooks选项并且默认勾选，如果没有，就重启大法。\n\n使用PHPStorm提交被拒:\n\n虽然客户端有办法跳过自动检查，不过后面服务端也会进行检查，不必担心。客户端检查主要是提高用户体验，也可以杜绝不规范的提交。\n\nPHPStorm协同正常来说，在引入PHPCS组件后，PHPStorm会自动发现配置。如果没有自动配置，需要在 Languages &amp; Frameworks &gt; PHP &gt; Quality Tools &gt; Code Sniffer 中配置。\n\n不过这时候默认是使用PSR2规范，需要手动选择一下自定义的规范。在 Editor &gt; Inspections &gt; PHP &gt; Quality tools &gt; PHP Code Sniffer validation 中，将Coding standard改为了Custom，并点击冒号图标，选中项目根目录的phpcs.xml。\n\n保存后重启PHPStorm以生效。\n服务端精力有限，这里只介绍我们团队用的GitLab的方案。其他的托管仓库只要支持Hook都能实现。\nGitLab首先进入GitLab所在终端，找到存放所有仓库的目录。\n$ cat /etc/gitlab/gitlab.rb |grep git_data_dirs -A 4\ngit_data_dirs(&#123;\n   \"default\" => &#123;\n     \"path\" => \"/data/gitlab\"\n    &#125;\n&#125;)\n\n然后进入项目所在仓库目录，创建custom_hooks目录，并在该目录中创建pre-receive:\n#!/usr/bin/env bash\n \n# 创建临时目录\nTMP_DIR=$(mktemp -d)\n# 删除临时目录(脚本退出时)\ntrap 'rm -rf \"$TMP_DIR\"' exit\n \n# 警告数\nwarnings_count=0\n# 错误数\nerrors_count=0\n# 自定义规范\ncustom_standard='phpcs.xml'\n \n# 空hash\nEMPTY_REF='0000000000000000000000000000000000000000'\n \n# Colors\nPURPLE='\\033[35m'\nRED='\\033[31m'\nRED_BOLD='\\033[1;31m'\nYELLOW='\\033[33m'\nYELLOW_BOLD='\\033[1;33m'\nGREEN='\\033[32m'\nGREEN_BOLD='\\033[1;32m'\nBLUE='\\033[34m'\nBLUE_BOLD='\\033[1;34m'\nCOLOR_END='\\033[0m'\n \nwhile read oldrev newrev ref\ndo\n    # 当push新分支的时候oldrev会不存在，删除时newrev就不存在\n    if [[ $oldrev != $EMPTY_REF &amp;&amp; $newrev != $EMPTY_REF ]]; then\n        echo -e \"\\n$&#123;PURPLE&#125;CodeSniffer check result:$&#123;COLOR_END&#125;\"\n        # 取最新版本的自定义规则，不存在则使用PSR2\n        git show $newrev:$custom_standard > $TMP_DIR/$custom_standard\n        if [[ $? != 0 ]]; then\n            standard='PSR2'\n        else\n            standard=$TMP_DIR/$custom_standard\n        fi\n        # 被检查了的文件数\n        checked_file_count=0\n        # 找出哪些文件被更新了\n        for line in $(git diff-tree -r $oldrev..$newrev | grep -oP '.*\\.(php)' | awk '&#123;print $5$6&#125;')\n        do\n            # 文件状态\n            # D: deleted\n            # A: added\n            # M: modified\n            status=$(echo $line | grep -o '^.')\n \n            # 不检查被删除的文件\n            if [[ $status == 'D' ]]; then\n                continue\n            fi\n \n            # 文件名\n            file=$(echo $line | sed 's/^.//')\n \n            # 为文件创建目录\n            mkdir -p $(dirname $TMP_DIR/$file)\n            # 保存文件内容\n            git show $newrev:$file > $TMP_DIR/$file\n \n            output=$(phpcs --standard=$standard --colors --encoding=utf-8 -n -p  $TMP_DIR/$file)\n \n            warning=$(echo $output | grep -oP '([0-9]+) WARNING' | grep -oP '[0-9]+')\n            error=$(echo $output | grep -oP '([0-9]+) ERROR' | grep -oP '[0-9]+')\n \n            if [[ $warning || $error ]]; then\n \n                msg=\"$&#123;file&#125;: \"\n \n                if [[ $warning > 0 ]]; then\n                    msg=\"$msg$&#123;YELLOW_BOLD&#125;$&#123;warning&#125;$&#123;COLOR_END&#125; $&#123;YELLOW&#125;warnings$&#123;COLOR_END&#125; \"\n \n                    let \"warnings_count = warnings_count + 1\"\n                fi\n                if [[ $error > 0 ]]; then\n                    msg=\"$msg$&#123;RED_BOLD&#125;$&#123;error&#125;$&#123;COLOR_END&#125; $&#123;RED&#125;errors$&#123;COLOR_END&#125;\"\n \n                    let \"errors_count = errors_count + 1\"\n                fi\n \n                echo -e \"    $msg\"\n            fi\n \n            let \"checked_file_count = checked_file_count + 1\";\n \n        done\n \n        if [[ $checked_file_count == 0 ]]; then\n            echo -e \"    $&#123;BLUE_BOLD&#125;No file was checked.$&#123;COLOR_END&#125;\"\n        elif [[ $warnings_count == 0 &amp;&amp; $errors_count == 0 ]]; then\n            echo -e \"$&#123;GREEN_BOLD&#125;$(cowsay 'Congratulations!!!')$&#123;COLOR_END&#125;\"\n        elif [[ $errors_count  == 0 ]]; then\n            echo -e \"    $&#123;BLUE&#125;Good job, no errors were found!!!$&#123;COLOR_END&#125;\"\n        fi\n         \n    fi\ndone\n \nif [[ $warnings_count > 0 || $errors_count > 0 ]]; then\n    echo -e \"$&#123;RED&#125;$(cowsay -f dragon 'PHPCS Check Error!!!')$&#123;COLOR_END&#125;\"\n    exit 1\nfi\n \nexit 0\n\n之后客户端推送提交时，便会执行这个钩子进行检查。\n推送通过:\n\n推送被拒:\n\n如果使用PHPStorm的UI进行推送，被拒是不提示原因的，不过相信大家心里一般都有b数的。\n\n _____________________________ \n&lt; 你心里没点b数吗？ >\n ----------------------------- \n        \\   ^__^\n         \\  (oo)\\_______\n            (__)\\       )\\/\\\n                ||----w |\n                ||     ||\n\n额外规则phpcs自带的规则集比较少，这里推荐一组规则集slevomat/coding-standard，最新版本使用了做了自动安装，使用体验非常丝滑。\ncomposer require slevomat/coding-standard --dev\n\n如果你的项目中有使用ORM、数据库的字段有使用下划线、并且希望变量名强制使用小驼峰，那目前截至v3.5的phpcs自带规则Squiz.NamingConventions.ValidVariableName.NotCamelCaps将无法实现你的需求，会把$user-&gt;created_at误判为不规范，参照Issue#1773\n等phpcs发布v4.0可能会修复，我写了个组件cloudycity/coding-standard，可以暂时解决这个问题。\ncomposer require cloudycity/coding-standard --dev\n\n最终的规则集&lt;?xml version=\"1.0\"?>\n&lt;ruleset name=\"MyStandard\">\n    &lt;!-- 新版本不需要手动安装第三方规则 -->\n    &lt;!-- &lt;config name=\"installed_paths\" value=\"vendor/slevomat/coding-standard\"/> -->\n    &lt;description>基于PSR2与slevomat的规则&lt;/description>\n    &lt;arg name=\"tab-width\" value=\"4\"/>\n\n    &lt;rule ref=\"PSR2\">\n        &lt;!-- 不限制行的长度 -->\n        &lt;exclude name=\"Generic.Files.LineLength\"/>\n        &lt;!-- 跳过的目录 -->\n        &lt;exclude-pattern>bootstrap/cache/*&lt;/exclude-pattern>\n        &lt;exclude-pattern>node_modules/*&lt;/exclude-pattern>\n        &lt;exclude-pattern>public/*&lt;/exclude-pattern>\n        &lt;exclude-pattern>resources/*&lt;/exclude-pattern>\n        &lt;exclude-pattern>storage/*&lt;/exclude-pattern>\n        &lt;exclude-pattern>vendor/*&lt;/exclude-pattern>\n    &lt;/rule>\n\n    &lt;!-- Laravel Migration &amp; Seeder 没有命名空间 -->\n    &lt;rule ref=\"PSR1.Classes.ClassDeclaration\">\n        &lt;exclude-pattern>database/*&lt;/exclude-pattern>\n    &lt;/rule>\n\n    &lt;!-- 变量名采用驼峰 -->\n    &lt;rule ref=\"CloudyCityCodingStandard.NamingConventions.ValidVariableName.NotCamelCaps\"/>\n\n    &lt;!-- 字符串连接符前后空格 -->\n    &lt;rule ref=\"Squiz.Strings.ConcatenationSpacing\">\n        &lt;properties>\n            &lt;property name=\"spacing\" value=\"1\"/>\n        &lt;/properties>\n    &lt;/rule>\n\n    &lt;!-- 确保函数前后空行，首个/最后函数除外 -->\n    &lt;rule ref=\"Squiz.WhiteSpace.FunctionSpacing\">\n        &lt;properties>\n            &lt;property name=\"spacing\" value=\"1\"/>\n            &lt;property name=\"spacingBeforeFirst\" value=\"0\"/>\n            &lt;property name=\"spacingAfterLast\" value=\"0\"/>\n        &lt;/properties>\n    &lt;/rule>\n\n    &lt;!-- 操作符前后空格 -->\n    &lt;rule ref=\"Squiz.WhiteSpace.OperatorSpacing\">\n        &lt;properties>\n            &lt;property name=\"ignoreNewlines\" value=\"false\"/>\n            &lt;property name=\"ignoreSpacingBeforeAssignments\" value=\"false\"/>\n        &lt;/properties>\n    &lt;/rule>\n\n    &lt;!-- 单行数组空格 -->\n    &lt;rule ref=\"SlevomatCodingStandard.Arrays.SingleLineArrayWhitespace\"/>\n\n    &lt;!-- 多行数组元素强制以逗号结尾 -->\n    &lt;rule ref=\"SlevomatCodingStandard.Arrays.TrailingArrayComma\"/>\n\n    &lt;!-- 禁止数组隐式创建 -->\n    &lt;rule ref=\"SlevomatCodingStandard.Arrays.DisallowImplicitArrayCreation\"/>\n\n    &lt;!-- 禁止自动生成的注释 -->\n    &lt;rule ref=\"SlevomatCodingStandard.Commenting.ForbiddenComments\">\n        &lt;properties>\n            &lt;property\n                name=\"forbiddenCommentPatterns\"\n                type=\"array\"\n                value=\"~^Created by \\S+\\.\\z~i,\"/>\n        &lt;/properties>\n    &lt;/rule>\n&lt;/ruleset>\n\nGitLab的兼容只要在gitlab的机器上也用composer引入slevomat/coding-standard即可。\n在哪里引入都可以，这边选择和钩子同一个目录。\n授予执行权限\nchmod a+x vendor/squizlabs/php_codesniffer/bin/phpcs\nchmod a+x vendor/squizlabs/php_codesniffer/bin/phpcbf\n\n修改pre-receive中的执行命令\noutput=$(/usr/local/bin/php7 /data/gitlab/repositories/php/demo.git/custom_hooks/vendor/squizlabs/php_codesniffer/bin/phpcs --standard=$standard --colors --encoding=utf-8 -n -p  $TMP_DIR/$file)\n\n最后上面提到的主要是针对单个仓库的强制规范检查策略，主要是我目前团队的各个项目的规范都有不同。如果你的各项目都有相同的规范，可以将规范提取为一个组件，服务端也可以使用全局Hook，不必为每一个仓库加Hook。\nReferencesPHP_CodeSnifferGit HooksGitLab Server Hooks客户端Hook自动安装脚本服务端Hook脚本\n","slug":"PHP强制规范检查的最佳实践","date":"2021-01-29T08:25:35.000Z","categories_index":"php","tags_index":"","author_index":"CloudyCity"},{"id":"54163d6395a4d14b28c019a0ae6d39e3","title":"Laravel优雅地支持多SMS","content":"小公司可能为了节省短信成本，会选择多家短信服务商，但短信本身的模板不会太多。本文介绍下Laravel下如何优雅地实现这种场景。\n\n\n依赖Laravel社区一个很赞的枚举组件\ncomposer require bensampo/laravel-enum\n\n这里以腾讯短信为例\ncomposer require tencentcloud/tencentcloud-sdk-php\n\n接口现在多数短信服务端都是采用模板，发送更快，所以这里接口直接按这种模式设计。如果需要接入未使用模版的服务商，可以自行实现模板（用sprintf()替换字符串），相当于做了使用模板的服务商所做的工作。\n&lt;?php\n\nnamespace App\\Contracts;\n\ninterface Sms\n&#123;\n    /**\n     * 发送短信\n     *\n     * @param $phone\n     * @param $templateId\n     * @param $templateParams\n     * @return bool\n     */\n    public function send($phone, $templateId, $templateParams);\n\n    /**\n     * 批量发送短信\n     *\n     * @param array $phones\n     * @param $templateId\n     * @param $templateParams\n     * @return bool\n     */\n    public function batchSend($phones, $templateId, $templateParams);\n\n    /**\n     * 返回余额\n     *\n     * @return float\n     */\n    public function getBalance();\n\n    /**\n     * 获取模版\n     *\n     * @param string $for 模板用途\n     * @return int\n     */\n    public function getTemplateId($for);\n&#125;\n\n枚举每当要接入一个服务商，首先增加一个枚举，后面在服务，模型，界面选项都使用该枚举。\n&lt;?php\n\nnamespace App\\Enums;\n\nuse BenSampo\\Enum\\Enum;\n\n/**\n * 短信服务商\n *\n * @method static static TENCENT()\n */\nfinal class SmsProvider extends Enum\n&#123;\n    public const TENCENT = 'tencent';\n\n    public static function getDescription($value): string\n    &#123;\n        if ($value === self::TENCENT) &#123;\n            return '腾讯';\n        &#125;\n\n        return parent::getDescription($value);\n    &#125;\n&#125;\n\n\n配置文件config/sms.php\n&lt;?php\n\nreturn [\n    // 默认服务商\n    'default_provider' => env('SMS_DEFAULT_PROVIDER'),\n\n    // 各服务商配置\n    'tencent' => [\n        'app_id' => env('SMS_TENCENT_APP_ID'),\n        'secret_id' => env('SMS_TENCENT_SECRET_ID'),\n        'secret_key' => env('SMS_TENCENT_SECRET_KEY'),\n        'template_ids' => [\n            'captcha' => env('SMS_TENCENT_TEMPLATE_IDS_CAPTCHA'),\n        ],\n    ]\n];\n\n\n服务实现创建基类，构造时从配置中初始化模板参数。\n&lt;?php\n\nnamespace App\\Services\\Sms;\n\nuse App\\Contracts\\Sms;\n\nabstract class BaseSms implements Sms\n&#123;\n    /**\n     * 服务商名称\n     *\n     * @var string\n     */\n    protected $name;\n\n    /**\n     * 短信模板ID映射\n     *\n     * @var array\n     */\n    protected $templateIds;\n\n    /**\n     * 短信模板用途集合\n     *\n     * @var array\n     */\n    protected $templateUses = ['captcha'];\n\n    /**\n     * BaseSms constructor.\n     */\n    public function __construct()\n    &#123;\n        foreach ($this->templateUses as $templateUse) &#123;\n            $this->templateIds[$templateUse] = config(\"system.sms.&#123;$this->name&#125;.template_ids.&#123;$templateUse&#125;&#125;\");\n        &#125;\n    &#125;\n\n    /**\n     * 获取模版\n     *\n     * @param $for\n     * @return int|mixed|null\n     * @throws \\Exception\n     */\n    public function getTemplateId($for)\n    &#123;\n        if (empty($this->templateIds[$for])) &#123;\n            throw new \\Exception(\"&#123;$for&#125;短信模板不存在\");\n        &#125;\n\n        return $this->templateIds[$for];\n    &#125;\n&#125;\n\n每个服务类只需要在构造函数中做好参数初始化，并实现三个方法即可。\n&lt;?php\n\nnamespace App\\Services\\Sms;\n\nuse App\\Enums\\SmsProvider;\nuse TencentCloud\\Common\\Credential;\nuse TencentCloud\\Common\\Profile\\ClientProfile;\nuse TencentCloud\\Common\\Profile\\HttpProfile;\nuse TencentCloud\\Sms\\V20190711\\Models\\SendSmsRequest;\nuse TencentCloud\\Sms\\V20190711\\Models\\SmsPackagesStatisticsRequest;\nuse TencentCloud\\Sms\\V20190711\\SmsClient;\n\nclass TencentSms extends BaseSms\n&#123;\n    protected $appId;\n\n    protected $secretId;\n\n    protected $secretKey;\n\n    /**\n     * TencentSMS constructor.\n     */\n    public function __construct()\n    &#123;\n        $this->name = SmsProvider::TENCENT;\n        $this->appId = config('system.sms.tencent.app_id');\n        $this->secretId = config('system.sms.tencent.secret_id');\n        $this->secretKey = config('system.sms.tencent.secret_key');\n\n        parent::__construct();\n    &#125;\n\n    /**\n     * 发送短信\n     *\n     * @param $phone\n     * @param $templateId\n     * @param $templateParams\n     * @return bool\n     */\n    public function send($phone, $templateId, $templateParams)\n    &#123;\n        return $this->batchSend([$phone], $templateId, $templateParams);\n    &#125;\n\n    /**\n     * 批量发送短信\n     *\n     * @param array $phones\n     * @param $templateId\n     * @param $templateParams\n     * @return bool\n     */\n    public function batchSend($phones, $templateId, $templateParams)\n    &#123;\n        // 处理参数\n        $phones = is_array($phones) ? $phones : [$phones];\n        $phones = array_map('addPhoneAreaCode', $phones);\n        $templateParams = array_map('strval', $templateParams);\n\n        // 实例化一个证书对象，入参需要传入腾讯云账户secretId，secretKey\n        $cred = new Credential($this->secretId, $this->secretKey);\n\n        $httpProfile = new HttpProfile();\n        $httpProfile->setEndpoint(\"sms.tencentcloudapi.com\");\n\n        $clientProfile = new ClientProfile();\n        $clientProfile->setHttpProfile($httpProfile);\n\n        // 实例化要请求产品(以cvm为例)的client对象\n        $client = new SmsClient($cred, \"ap-guangzhou\");\n\n        // 实例化一个请求对象\n        $req = new SendSmsRequest();\n        $req->fromJsonString(json_encode([\n            'PhoneNumberSet' => $phones,\n            'TemplateID' => $templateId,\n            'Sign' => config('system.sms.tencent.sign'),\n            'TemplateParamSet' => $templateParams,\n            'SmsSdkAppid' => $this->appId,\n        ]));\n\n        // 通过client对象调用想要访问的接口，需要传入请求对象\n        $res = $client->SendSms($req);\n\n        foreach ($res->SendStatusSet as $sendStatus) &#123;\n            /** @var \\TencentCloud\\Sms\\V20190711\\Models\\SendStatus $sendStatus */\n            if ($sendStatus->Code != 'Ok') &#123;\n                return false;\n            &#125;\n        &#125;\n\n        return true;\n    &#125;\n\n    /**\n     * 返回余额\n     *\n     * @return float\n     */\n    public function getBalance()\n    &#123;\n        $cred = new Credential($this->secretId, $this->secretKey);\n        $httpProfile = new HttpProfile();\n        $httpProfile->setEndpoint(\"sms.tencentcloudapi.com\");\n\n        $clientProfile = new ClientProfile();\n        $clientProfile->setHttpProfile($httpProfile);\n        $client = new SmsClient($cred, \"\", $clientProfile);\n\n        $req = new SmsPackagesStatisticsRequest();\n        $params = ['Limit' => 100, 'Offset' => 0, 'SmsSdkAppid' => $this->appId];\n        $params = json_encode($params);\n        $req->fromJsonString($params);\n\n        $resp = $client->SmsPackagesStatistics($req);\n        $smsPackagesStatisticsSet = $resp->SmsPackagesStatisticsSet;\n\n        $maxSmsPackagesStatistics = $this->getMaxSmsPackagesStatistics($smsPackagesStatisticsSet);\n        // 当前套餐包剩余使用量\n        $remainingNumber = $maxSmsPackagesStatistics->AmountOfPackage - $maxSmsPackagesStatistics->CurrentUsage;\n        $balance = $remainingNumber * 0.05;\n\n        return $balance;\n    &#125;\n\n    /**\n     * 从集合中查找出剩余短信条数最大的套餐包\n     *\n     * @param $smsPackagesStatisticsSet\n     * @return mixed | object\n     */\n    protected function getMaxSmsPackagesStatistics($smsPackagesStatisticsSet)\n    &#123;\n        if (empty($smsPackagesStatisticsSet) || !is_array($smsPackagesStatisticsSet)) &#123;\n            return $smsPackagesStatisticsSet;\n        &#125;\n\n        $maxRemainingNumber = 0; // 最大套餐包剩余使用量\n        $maxSmsPackagesStatistics = null; // 剩余短信条数最大的套餐包\n        foreach ($smsPackagesStatisticsSet as $smsPackagesStatistics) &#123;\n            // 当前套餐包剩余使用量\n            $remainingNumber = $smsPackagesStatistics->AmountOfPackage - $smsPackagesStatistics->CurrentUsage;\n            if ($remainingNumber >= $maxRemainingNumber) &#123;\n                $maxRemainingNumber = $remainingNumber;\n                $maxSmsPackagesStatistics = $smsPackagesStatistics;\n            &#125;\n        &#125;\n\n        return $maxSmsPackagesStatistics;\n    &#125;\n&#125;\n\n服务提供者与发送类分为两类场景：调用方始终使用同一个服务商、调用方可能使用不同服务商。\n调用方始终使用同一个服务商服务提供者扩展绑定Sms接口到实现上，并绑定Sender的单例。\n&lt;?php\n\nnamespace App\\Providers;\n\nuse App\\Contracts\\Sms;\nuse App\\Services\\Sms\\TencentSms\nuse Illuminate\\Support\\ServiceProvider;\n\nclass SmsServiceProvider extends ServiceProvider\n&#123;\n    /**\n     * Register any application services.\n     *\n     * @return void\n     */\n    public function register()\n    &#123;\n        //\n    &#125;\n\n    /**\n     * Bootstrap any application services.\n     *\n     * @return void\n     */\n    public function boot()\n    &#123;\n        $this->app->extend(Sms::class, function ($service, $app) &#123;\n            $smsProvider = config('system.sms.provider');\n            if ($smsProvider === SmsProvider::TENCENT) &#123;\n                return new TencentSMS();\n            &#125;\n            return new TencentSms();\n        &#125;);\n\n        $this->app->singleton(Sender::class, function ($app) &#123;\n            return new Sender($app->make(Sms::class));\n        &#125;);\n    &#125;\n&#125;\n\n发送类&lt;?php\n\nnamespace App\\Services\\Sms;\n\nuse App\\Enums\\SmsProvider;\nuse Illuminate\\Support\\Facades\\Redis;\n\nclass Sender\n&#123;\n    /**\n     * @var TencentSms\n     */\n    protected $sms;\n\n    public function __construct(Sms $smsProvider)\n    &#123;\n        $this->smsProvider = $smsProvider;\n    &#125;\n\n    /**\n     * 发送验证码\n     *\n     * @template 验证码 &#123;1&#125;，15分钟内有效，请勿向任何人泄露。\n     * @param int|string $phone\n     * @param int $length 验证码长度, 范围4-6\n     * @param int $ttl 有效时间(分钟)\n     * @return bool\n     * @throws \\Exception\n     */\n    public function sendCaptcha($phone, $length = 4, $ttl = 15)\n    &#123;\n        $captcha = substr(mt_rand(100000, 999999), 0, $length);\n        $templateId = $this->sms->getTemplateId('captcha');\n        Redis::setex(\"captcha:&#123;$phone&#125;\", $ttl * 60, $captcha);\n        return $this->sms->send($phone, $templateId, [$captcha]);\n    &#125;\n&#125;\n\n调用示例自动注入获取单例\nuse App\\Services\\Sms\\Sender;\n\npublic function index(Request $request, Sender $sender)\n&#123;\n    // do some work and send a message\n    $sender->sendCaptcha();\n&#125;\n\n直接解析获取单例\nuse App\\Services\\Sms\\Sender;\n\n$sender = resolve(Sender::class);\n$sender->sendCaptcha();\n\n调用方可能使用不同服务商服务提供者每个服务使用单例，采用延迟加载。\n&lt;?php\n\nnamespace App\\Providers;\n\nuse App\\Services\\Sms\\TencentSms;\nuse Illuminate\\Contracts\\Support\\DeferrableProvider;\nuse Illuminate\\Support\\ServiceProvider;\n\nclass SmsServiceProvider extends ServiceProvider implements DeferrableProvider\n&#123;\n    /**\n     * Register any application services.\n     *\n     * @return void\n     */\n    public function register()\n    &#123;\n        $this->app->singleton(TencentSms::class, function () &#123;\n            return new TencentSms();\n        &#125;);\n    &#125;\n\n    /**\n     * Bootstrap any application services.\n     *\n     * @return void\n     */\n    public function boot()\n    &#123;\n        //\n    &#125;\n\n    /**\n     * Get the services provided by the provider.\n     *\n     * @return array\n     */\n    public function provides()\n    &#123;\n        return [TencentSms::class];\n    &#125;\n&#125;\n\n\n发送类调用方传入服务商的枚举值。\n&lt;?php\n\nnamespace App\\Services\\Sms;\n\nuse App\\Enums\\SmsProvider;\nuse Illuminate\\Support\\Facades\\Redis;\n\nclass Sender\n&#123;\n    /**\n     * @var TencentSms\n     */\n    protected $sms;\n\n    public function __construct($smsProvider = null)\n    &#123;\n        $smsProvider = $smsProvider ?: config('system.sms.default_provider');\n        if ($smsProvider === SmsProvider::TENCENT) &#123;\n            $this->sms = resolve(TencentSms::class); // 获取单例\n        &#125;\n    &#125;\n\n    /**\n     * 发送验证码\n     *\n     * @template 验证码 &#123;1&#125;，15分钟内有效，请勿向任何人泄露。\n     * @param int|string $phone\n     * @param int $length 验证码长度, 范围4-6\n     * @param int $ttl 有效时间(分钟)\n     * @return bool\n     * @throws \\Exception\n     */\n    public function sendCaptcha($phone, $length = 4, $ttl = 15)\n    &#123;\n        $captcha = substr(mt_rand(100000, 999999), 0, $length);\n        $templateId = $this->sms->getTemplateId('captcha');\n        Redis::setex(\"captcha:&#123;$phone&#125;\", $ttl * 60, $captcha);\n        return $this->sms->send($phone, $templateId, [$captcha]);\n    &#125;\n&#125;\n\n调用示例use App\\Enums\\SmsProvider;\nuse App\\Services\\Sms\\Sender;\n\n$sender = new Sender(SmsProvider::TENCENT);\n$sender->sendCaptcha();","slug":"Laravel优雅地支持多SMS","date":"2021-01-29T10:23:49.000Z","categories_index":"php","tags_index":"laravel","author_index":"CloudyCity"},{"id":"c745740a7cf2e407606f48886b844e67","title":"PHP项目在MySQL使用顺序的UUID","content":"分布式系统的数据库都离不开UUID。在RFC 4122标准中各版本的UUID都有存在一些缺点，简单概括就是长而乱序。其中乱序则是通过顺序的UUID来减少影响。\n本文介绍什么是顺序的UUID，以及如何在PHP中生成。\n\n\n标准UUID的缺点长度为36位太长基本是无解的。虽然转换成字节型，可以将长度从36位减少为16位，但是不具备可读性，查询出来后需要再转换为字符串才可读。不过我们可以去掉4个无意义的短横线，将长度减少为32位。\n乱序所有UUID都不是单调递增的。在InnoDB中，如果将UUID作为主键插入，数据会散列在硬盘中。对比自增主键，数据库会更大、查询会更慢。另外，InnoDB所有的次要键都会包括主键，长度为36位(或16位)的UUID也仍将被包含在每一个次要键中，将大幅增加索引大小，意味着增加内存占用。所以，UUID不适合作为InnoDB表的主键，建议只是将UUID作为作为次要键，使用唯一约束。\n不过乱序则是通过顺序的UUID来减少影响。\n什么是顺序的UUID顺序的UUID，AKA按时间排序的UUID、单调递增的UUID，是RFC 4122 Version 1 UUID的变种，在RFC 4122 Version 6草稿被提出。需注意的是该草稿并未通过，所以不能直接将其称为Version 6，并且在获取社区支持上可能不如官方标准。\n顺序的UUID相对于Version 1加上了一个特性：新生成的值总是大于已生成的值。这个特性可以减少插入UUID和重新编排索引的IO开销。\n即便如此，顺序UUID的长度并未变化，意味着它仍不适合作为InnoDB表的主键。\n\n如何生成顺序的UUID这里推荐使用10k star的组件ramsey/uuid, 里面已实现了按时间排序的UUID。\n引入组件composer require ramsey/uuid;\n\n快速生成use Ramsey\\Uuid\\Uuid;\n\n$uuid = Uuid::uuid6();\n\n$uuid->toString(); // 36位字符串\n$uuid->getByte(); // 16位字节型\n\n虽然组件文档很严谨将**按时间排序的UUID**归为非官方标准，但组件中还是沿用了草稿的`version 6`命名，所以本文具有时效性，如果RFC标准发生更新了，请以组件文档为主。\n\n生成流程解析这里以4.0.1版本为例(为便于阅读进行了重排版)作简单的解析。组件遵循RFC 4122以及草稿的规范，uuid6()也是uuid()的变种，也是接收节点$node与时钟序列$clockSeq两个参数。\npublic static function uuid6(?Hexadecimal $node = null, ?int $clockSeq = null): UuidInterface \n&#123;\n    return self::getFactory()->uuid6($node, $clockSeq);\n&#125;\n\n这两个参数最后在vendor/ramsey/uuid/src/Generator/DefaultTimeGenerator.php中使用\npublic function generate($node = null, ?int $clockSeq = null): string\n&#123;\n    if ($node instanceof Hexadecimal) &#123;\n        $node = $node->toString();\n    &#125;\n\n    $node = $this->getValidNode($node);\n\n    if ($clockSeq === null) &#123;\n        try &#123;\n            // This does not use \"stable storage\"; see RFC 4122, Section 4.2.1.1.\n            $clockSeq = random_int(0, 0x3fff);\n        &#125; catch (Throwable $exception) &#123;\n            throw new RandomSourceException(\n                $exception->getMessage(),\n                (int) $exception->getCode(),\n                $exception\n            );\n        &#125;\n    &#125;\n\n    $time = $this->timeProvider->getTime();\n\n    $uuidTime = $this->timeConverter->calculateTime(\n        $time->getSeconds()->toString(),\n        $time->getMicroseconds()->toString()\n    );\n\n    $timeHex = str_pad($uuidTime->toString(), 16, '0', STR_PAD_LEFT);\n\n    if (strlen($timeHex) !== 16) &#123;\n        throw new TimeSourceException(sprintf(\n            'The generated time of \\'%s\\' is larger than expected',\n            $timeHex\n        ));\n    &#125;\n\n    $timeBytes = (string) hex2bin($timeHex);\n\n    return $timeBytes[4] . $timeBytes[5] . $timeBytes[6] . $timeBytes[7]\n        . $timeBytes[2] . $timeBytes[3]\n        . $timeBytes[0] . $timeBytes[1]\n        . pack('n*', $clockSeq)\n        . $node;\n&#125;\n\n/**\n * Uses the node provider given when constructing this instance to get\n * the node ID (usually a MAC address)\n *\n * @param string|int|null $node A node value that may be used to override the node provider\n *\n * @return string 6-byte binary string representation of the node\n *\n * @throws InvalidArgumentException\n */\nprivate function getValidNode($node): string\n&#123;\n    if ($node === null) &#123;\n        $node = $this->nodeProvider->getNode();\n    &#125;\n\n    // Convert the node to hex, if it is still an integer.\n    if (is_int($node)) &#123;\n        $node = dechex($node);\n    &#125;\n\n    if (!ctype_xdigit((string) $node) || strlen((string) $node) > 12) &#123;\n        throw new InvalidArgumentException('Invalid node value');\n    &#125;\n\n    return (string) hex2bin(str_pad((string) $node, 12, '0', STR_PAD_LEFT));\n&#125;\n\n如果$clockSeq为null，则默认使用一个0~16383范围内的随机数。\n对于默认的时钟序列，组件未遵循RFC标准的稳定存储，因为这部分需要额外的数据存储。如果你的节点在每微秒都有很高的生成频率，就需要自行维护。目前组件支持相同节点在每微秒生成16384个不重复的UUID，目前地球上应该还没出现这个频率以上的场景。\n\n如果$node为null，将调用默认的nodeProvider获取。而vendor/ramsey/uuid/src/FeatureSet.php中定义了所有默认特性，默认的nodeProvider为FallbackNodeProvider, 其实是一个集合，将按顺序尝试获取。其中集合中的SystemNodeProvider是获取系统的MAC地址，RandomNodeProvider是使用随机数。\n/**\n * Returns a node provider configured for this environment\n */\nprivate function buildNodeProvider(): NodeProviderInterface\n&#123;\n    if ($this->ignoreSystemNode) &#123;\n        return new RandomNodeProvider();\n    &#125;\n\n    return new FallbackNodeProvider(new NodeProviderCollection([\n        new SystemNodeProvider(),\n        new RandomNodeProvider(),\n    ]));\n&#125;\n\n如果你的分布式项目运行在Docker容器中，要注意：如果没有启动参数，按照Docker的默认分配机制，会导致每个PHP容器的MAC地址一致，而此组件默认使用MAC地址，所以最终导致节点一致，提高UUID的重复几率。\n\nRefrences[0] RFC 4122[1] Storing UUID Values in MySQL[2] ramsey/uuid doc\n","slug":"PHP项目在MySQL使用顺序的UUID","date":"2021-01-20T09:38:35.000Z","categories_index":"php","tags_index":"mysql","author_index":"CloudyCity"},{"id":"cac2d032fc8fac9e1fbce97e3094eaa7","title":"ElementUI Tree组件实现完美的联动选择","content":"Element Tree组件默认支持【联动选择】，但是无法【只选中父项，不选任何子项】，这里介绍如何实现完美的联动选择。\n\n\n关闭自带的【联动选择 】特性ElTree的check-strictly属性默认为false，至少一个子项被勾选时，父项会进入半选中/选中状态。\n改为true即可实现【只选中父项，不选任何子项】，后面自行实现联动。\n&lt;el-form-item label=\"授权\">\n  &lt;el-tree\n    ref=\"permissionTree\"\n    :data=\"permissionTree\"\n    :props=\"treeProps\"\n    :default-checked-keys=\"checkedIds\"\n    node-key=\"id\"\n    :expand-on-click-node=\"false\"\n    default-expand-all\n    check-on-click-node\n    check-strictly\n    show-checkbox\n  />\n&lt;/el-form-item>\n\n监听check事件实现【联动选择】\n&lt;el-form-item label=\"授权\">\n  &lt;el-tree\n    ref=\"permissionTree\"\n    :data=\"permissionTree\"\n    :props=\"treeProps\"\n    :default-checked-keys=\"checkedIds\"\n    node-key=\"id\"\n    :expand-on-click-node=\"false\"\n    default-expand-all\n    check-on-click-node\n    check-strictly\n    show-checkbox\n    @check=\"handleCheckNode\"\n  />\n&lt;/el-form-item>\nhandleCheckNode(obj) &#123;\n  if (this.$refs.permissionTree.getCheckedKeys().indexOf(obj.id) !== -1) &#123;\n    this.checkParentNode(obj); // 勾选父项\n    this.checkChildrenNode(obj, true); // 全选子项\n  &#125; else &#123;\n    if (obj.children) &#123;\n      this.checkChildrenNode(obj, false); // 所有子项反选\n    &#125;\n  &#125;\n&#125;,\ncheckChildrenNode(obj, isChecked) &#123;\n  this.$refs.permissionTree.setChecked(obj.id, isChecked);\n  if (obj.children) &#123;\n    for (let i = 0; i &lt; obj.children.length; i++) &#123;\n      this.checkChildrenNode(obj.children[i], isChecked);\n    &#125;\n  &#125;\n&#125;,\ncheckParentNode(obj) &#123;\n  const node = this.$refs.permissionTree.getNode(obj);\n  if (node.parent.key !== undefined) &#123;\n    this.$refs.permissionTree.setChecked(node.parent, true);\n    this.checkParentNode(node.parent);\n  &#125;\n&#125;,\n\n自由选择和关联选择共存以权限树为例，在某些授权场景，用户希望只选中父项。经过第2步的处理已经能实现，但是体验较差(需要选择反选子项)。这时候没有联动选择反而效率更高，所以【自由选择】和【关联选择】两个特性如果能共存，就能应对更多场景。\n实现很简单，只需要将监听的事件改成node-check即可。点击节点是关联选择，点击勾选框是自由选择(即最原始的勾选框)。\n&lt;el-form-item label=\"授权\">\n  &lt;el-tree\n    ref=\"permissionTree\"\n    :data=\"permissionTree\"\n    :props=\"treeProps\"\n    :default-checked-keys=\"checkedIds\"\n    node-key=\"id\"\n    :expand-on-click-node=\"false\"\n    default-expand-all\n    check-on-click-node\n    check-strictly\n    show-checkbox\n    @node-check=\"handleCheckNode\"\n  />\n&lt;/el-form-item>\n\n\n","slug":"ElementUI-Tree组件实现完美的联动选择","date":"2021-01-07T06:24:56.000Z","categories_index":"前端","tags_index":"vue","author_index":"CloudyCity"},{"id":"54aa2f264be2b519410761b4dc6c84bf","title":"Laravel8 实现消息通知","content":"Laravel从5.3起，提供了广播、通知两个模块，可以很方便的实现消息通知。这里以评论回复通知为例进行介绍。\n\n\n简单介绍下概念\n\n广播的对象是Socket客户端，通知的对象是根据渠道而定。可选的通知渠道有广播、短信、邮件、数据库或自定义渠道。\n广播可以直接由事件触发或由通知触发，这里采用的是后者。\n\n流程\nLaravel部分用户\nnamespace App\\Models\\Sys;\n\nuse App\\Models\\Model;\nuse Illuminate\\Notifications\\Notifiable;\n\nclass User extends Model\n&#123;\n    use Notifiable;\n\n    protected $table = 'user';\n    \n    /**\n     * 用户接收广播通知的通道.\n     *\n     * @return mixed\n     */\n    public function receivesBroadcastNotificationsOn()\n    &#123;\n        return 'user.' . $this->id;\n    &#125;\n\n&#125;\n\n评论\nnamespace App\\Models\\Common;\n\nuse App\\Models\\Model;\nuse App\\Models\\Sys\\User;\nuse Illuminate\\Database\\Eloquent\\Relations\\BelongsTo;\nuse Illuminate\\Database\\Eloquent\\Relations\\MorphTo;\n\nclass Comment extends Model\n&#123;\n    protected $table = 'comment';\n\n    protected $fillable = [\n        'content', 'uid', 'commentable_id', 'commentable_type'\n    ];\n\n    protected $with = [\n        'user'\n    ];\n\n    public function user(): BelongsTo\n    &#123;\n        return $this->belongsTo(User::class, 'uid');\n    &#125;\n\n    public function commentable(): MorphTo\n    &#123;\n        return $this->morphTo();\n    &#125;\n&#125;\n\n观察者\nnamespace App\\Observers;\n\nuse App\\Models\\Common\\Comment;\nuse App\\Notifications\\CommentCreated;\n\nclass CommentObserver extends Observer\n&#123;\n    /**\n     * Handle the User \"created\" event.\n     *\n     * @param Comment $comment\n     * @return void\n     */\n    public function created(Comment $comment)\n    &#123;\n        event(new CommentCreated($comment));\n    &#125;\n&#125;\n\n注册观察者\nnamespace App\\Providers;\n\nuse App\\Models\\Common\\Comment;\nuse App\\Observers\\CommentObserver;\n\nuse Illuminate\\Support\\ServiceProvider;\n\n\nclass AppServiceProvider extends ServiceProvider\n&#123;\n    /**\n     * Register any application services.\n     *\n     * @return void\n     */\n    public function register()\n    &#123;\n        //\n    &#125;\n\n    /**\n     * Bootstrap any application services.\n     *\n     * @return void\n     */\n    public function boot()\n    &#123;\n        Comment::observe(CommentObserver::class);\n    &#125;\n&#125;\n\n事件\nnamespace App\\Events;\n\nuse App\\Models\\Common\\Comment;\nuse Illuminate\\Foundation\\Events\\Dispatchable;\nuse Illuminate\\Queue\\SerializesModels;\n\nclass CommentCreated\n&#123;\n    use Dispatchable, SerializesModels;\n\n    /**\n     * @var Comment\n     */\n    public $comment;\n\n    /**\n     * Create a new event instance.\n     *\n     * @param $comment\n     */\n    public function __construct($comment)\n    &#123;\n        $this->comment = $comment;\n    &#125;\n&#125;\n\n监听器\nnamespace App\\Listeners;\n\nuse App\\Events\\CommentCreated as CommentCreatedEvent;\nuse App\\Models\\Gs\\IssueLog;\nuse App\\Models\\Sys\\User;\nuse App\\Notifications\\CommentCreated;\n\nclass NotifyComment extends Listener\n&#123;\n    /**\n     * Handle the notification.\n     *\n     * @param CommentCreatedEvent $event\n     */\n    public function handle(CommentCreatedEvent $event)\n    &#123;\n        // 相关用户\n        $users = [];\n        if ($event->comment->commentable instanceof IssueLog) &#123;\n            // 工单跟进者\n            $user[$event->comment->commentable->user->id] = $event->comment->commentable->user;\n            // 工单创建者\n            $user[$event->comment->commentable->creator->id] = $event->comment->commentable->creator;\n            // 工单报表评论者\n            foreach ($event->comment->commentable->comments as $cmt) &#123;\n                $users[$cmt->user->id] = $users[$cmt->user->id] ?? $cmt->user;\n            &#125;\n        &#125;\n\n        // 发送通知\n        foreach ($users as $user) &#123;\n            /** @var User $user */\n            if ($user->id != $event->comment->uid) &#123;\n                $user->notify(new CommentCreated($event->comment));\n            &#125;\n        &#125;\n    &#125;\n&#125;\n\nLaravel从5.8.9开始支持事件发现，无需手动注册事件及对应监听器。\n\n通知\nnamespace App\\Notifications;\n\nuse Illuminate\\Bus\\Queueable;\nuse Illuminate\\Contracts\\Queue\\ShouldQueue;\nuse App\\Models\\Common\\Comment;\nuse \\Illuminate\\Notifications\\Notification\n\nclass CommentCreated extends BaseNotification implements ShouldQueue\n&#123;\n    use Queueable;\n\n    protected $comment;\n\n    /**\n     * Get the notification's delivery channels.\n     *\n     * @return array\n     */\n    public function via()\n    &#123;\n        return ['broadcast', 'database'];\n    &#125;\n\n    /**\n     * Create a new notification instance.\n     *\n     * @param Comment $comment\n     */\n    public function __construct(Comment $comment)\n    &#123;\n        $this->comment = $comment;\n    &#125;\n\n    /**\n     * Get the array representation of the notification.\n     *\n     * @return array\n     */\n    public function toArray()\n    &#123;\n        return [\n            'commentable' => $this->comment->commentable,\n            'commentable_type' => get_class($this->comment->commentable),\n            'comment' => $this->comment\n        ];\n    &#125;\n&#125;\n\nNodeJS部分安装依赖npm i laravel-echo laravel-echo-server pm2 socket.io-client\n\n启动Larvel Echo Server启动脚本queue-listen.sh\n#!/usr/bin/env bash\n\nphp artisan queue:listen --tries=1\n\nsocket.sh\n#!/usr/bin/env bash\n\nnode_modules/laravel-echo-server/bin/server.js  start\n\n使用PM2调度node_modules&#x2F;pm2&#x2F;bin&#x2F;pm2 start queue-listen.sh\nnode_modules&#x2F;pm2&#x2F;bin&#x2F;pm2 start socket.sh\nnode_modules&#x2F;pm2&#x2F;bin&#x2F;pm2 monit # 监控进程输出，便于开发调试\n# 后续调度可使用stop&#x2F;start&#x2F;restart all\n\n你可以使用Supervisor代替PM2。\n\nPM2启动的进程与用户关联，使用同一个户进行操作，避免重复启动\n\nLaravel Echo监听通知全局变量声明resources/js/bootstrap.js\n\n/**\n * Echo exposes an expressive API for subscribing to channels and listening\n * for events that are broadcast by Laravel. Echo and event broadcasting\n * allows your team to easily build robust real-time web applications.\n */\n\nimport Echo from 'laravel-echo';\n\nwindow.io = require('socket.io-client');\nwindow.Echo = new Echo(&#123;\n    broadcaster: 'socket.io',\n    host: window.location.hostname + (process.env.MIX_APP_ENV === 'local' ? ':6001' : ''),\n    auth: &#123;\n        headers: &#123;&#125;\n    &#125;,\n&#125;);\n\n\n启动监听主视图\n&lt;script>\n    Echo.private('user.' + uid)\n        .notification((e) => &#123;\n            // do something\n        &#125;);\n&lt;/script>","slug":"Laravel8-实现消息通知","date":"2020-11-04T03:29:16.000Z","categories_index":"php","tags_index":"laravel","author_index":"CloudyCity"},{"id":"771f319b1167e8a6f517a3bd10fbf0af","title":"使用Laravel-Mix构建Asset","content":"公司几个后台老项目的asset都没有构建方案，直接放到版本控制仓库里，臃肿凌乱，加载速度也堪忧。最近开发一个新后台，决定改用laravel-mix构建asset。\n\n\n改造前的文件结构(Git)├── public\n│   ├── asset\n│   │   ├── adminlte\n│   │   │   ├── css\n│   │   │   │   ├── adminlte.min.css\n│   │   │   │   ├── adminlte.min.css.map\n│   │   │   │   └── alt\n│   │   │   │       ├── adminlte.components.min.css\n│   │   │   │       ├── adminlte.components.min.css.map\n│   │   │   │       ├── adminlte.core.min.css\n│   │   │   │       ├── adminlte.core.min.css.map\n│   │   │   │       ├── adminlte.extra-components.min.css\n│   │   │   │       ├── adminlte.extra-components.min.css.map\n│   │   │   │       ├── adminlte.pages.min.css\n│   │   │   │       ├── adminlte.pages.min.css.map\n│   │   │   │       ├── adminlte.plugins.min.css\n│   │   │   │       └── adminlte.plugins.min.css.map\n│   │   │   ├── img\n│   │   │   │   └── AdminLTELogo.png\n│   │   │   ├── js\n│   │   │   │   ├── adminlte.min.js\n│   │   │   │   ├── adminlte.min.js.map\n│   │   │   │   └── customize.js\n│   │   │   └── plugins\n│   │   │       ├── bootstrap\n│   │   │       │   ├── css\n│   │   │       │   │   ├── bootstrap.min.css\n│   │   │       │   │   └── bootstrap.min.css.map\n│   │   │       │   └── js\n│   │   │       │       ├── bootstrap.bundle.min.js\n│   │   │       │       ├── bootstrap.bundle.min.js.map\n│   │   │       │       ├── bootstrap.min.js\n│   │   │       │       └── bootstrap.min.js.map\n│   │   │       ├── bootstrap-iconpicker\n│   │   │       │   ├── css\n│   │   │       │   │   └── bootstrap-iconpicker.min.css\n│   │   │       │   └── js\n│   │   │       │       └── bootstrap-iconpicker.bundle.min.js\n│   │   │       ├── bootstrap-treeview\n│   │   │       │   ├── css\n│   │   │       │   │   └── bootstrap-treeview.min.css\n│   │   │       │   └── js\n│   │   │       │       └── bootstrap-treeview.min.js\n│   │   │       ├── datatables\n│   │   │       │   ├── css\n│   │   │       │   │   ├── dataTables.bootstrap4.min.css\n│   │   │       │   │   └── select.bootstrap.min.css\n│   │   │       │   ├── extensions\n│   │   │       │   │   ├── datatables-fixedcolumns\n│   │   │       │   │   │   ├── css\n│   │   │       │   │   │   │   └── fixedColumns.bootstrap4.min.css\n│   │   │       │   │   │   └── js\n│   │   │       │   │   │       ├── dataTables.fixedColumns.min.js\n│   │   │       │   │   │       └── fixedColumns.bootstrap4.min.js\n│   │   │       │   │   ├── datatables-fixedheader\n│   │   │       │   │   │   ├── css\n│   │   │       │   │   │   │   └── fixedHeader.bootstrap4.min.css\n│   │   │       │   │   │   └── js\n│   │   │       │   │   │       ├── dataTables.fixedHeader.min.js\n│   │   │       │   │   │       └── fixedHeader.bootstrap4.min.js\n│   │   │       │   │   └── datatables-responsive\n│   │   │       │   │       ├── css\n│   │   │       │   │       │   └── responsive.bootstrap4.min.css\n│   │   │       │   │       └── js\n│   │   │       │   │           ├── dataTables.responsive.min.js\n│   │   │       │   │           └── responsive.bootstrap4.min.js\n│   │   │       │   └── js\n│   │   │       │       ├── dataTables.bootstrap4.min.js\n│   │   │       │       └── jquery.dataTables.min.js\n│   │   │       ├── daterangepicker\n│   │   │       │   ├── css\n│   │   │       │   │   └── daterangepicker.min.css\n│   │   │       │   └── js\n│   │   │       │       └── daterangepicker.min.js\n│   │   │       ├── datetimepicker\n│   │   │       │   ├── css\n│   │   │       │   │   └── bootstrap-datetimepicker.min.css\n│   │   │       │   └── js\n│   │   │       │       └── bootstrap-datetimepicker.min.js\n│   │   │       ├── distpicker\n│   │   │       │   └── distpicker.min.js\n│   │   │       ├── echarts\n│   │   │       │   └── echarts.min.js\n│   │   │       ├── fontawesome-free\n│   │   │       │   ├── css\n│   │   │       │   │   └── all.min.css\n│   │   │       │   ├── js\n│   │   │       │   │   └── all.min.js\n│   │   │       │   ├── sprites\n│   │   │       │   │   ├── brands.svg\n│   │   │       │   │   ├── regular.svg\n│   │   │       │   │   └── solid.svg\n│   │   │       │   └── webfonts\n│   │   │       │       ├── fa-brands-400.eot\n│   │   │       │       ├── fa-brands-400.svg\n│   │   │       │       ├── fa-brands-400.ttf\n│   │   │       │       ├── fa-brands-400.woff\n│   │   │       │       ├── fa-brands-400.woff2\n│   │   │       │       ├── fa-regular-400.eot\n│   │   │       │       ├── fa-regular-400.svg\n│   │   │       │       ├── fa-regular-400.ttf\n│   │   │       │       ├── fa-regular-400.woff\n│   │   │       │       ├── fa-regular-400.woff2\n│   │   │       │       ├── fa-solid-900.eot\n│   │   │       │       ├── fa-solid-900.svg\n│   │   │       │       ├── fa-solid-900.ttf\n│   │   │       │       ├── fa-solid-900.woff\n│   │   │       │       └── fa-solid-900.woff2\n│   │   │       ├── icheck\n│   │   │       │   ├── css\n│   │   │       │   │   ├── all.css\n│   │   │       │   │   ├── flat\n│   │   │       │   │   │   ├── _all.css\n│   │   │       │   │   │   ├── aero.css\n│   │   │       │   │   │   ├── aero.png\n│   │   │       │   │   │   ├── aero@2x.png\n│   │   │       │   │   │   ├── blue.css\n│   │   │       │   │   │   ├── blue.png\n│   │   │       │   │   │   ├── blue@2x.png\n│   │   │       │   │   │   ├── flat.css\n│   │   │       │   │   │   ├── flat.png\n│   │   │       │   │   │   ├── flat@2x.png\n│   │   │       │   │   │   ├── green.css\n│   │   │       │   │   │   ├── green.png\n│   │   │       │   │   │   ├── green@2x.png\n│   │   │       │   │   │   ├── grey.css\n│   │   │       │   │   │   ├── grey.png\n│   │   │       │   │   │   ├── grey@2x.png\n│   │   │       │   │   │   ├── orange.css\n│   │   │       │   │   │   ├── orange.png\n│   │   │       │   │   │   ├── orange@2x.png\n│   │   │       │   │   │   ├── pink.css\n│   │   │       │   │   │   ├── pink.png\n│   │   │       │   │   │   ├── pink@2x.png\n│   │   │       │   │   │   ├── purple.css\n│   │   │       │   │   │   ├── purple.png\n│   │   │       │   │   │   ├── purple@2x.png\n│   │   │       │   │   │   ├── red.css\n│   │   │       │   │   │   ├── red.png\n│   │   │       │   │   │   ├── red@2x.png\n│   │   │       │   │   │   ├── yellow.css\n│   │   │       │   │   │   ├── yellow.png\n│   │   │       │   │   │   └── yellow@2x.png\n│   │   │       │   │   ├── futurico\n│   │   │       │   │   │   ├── futurico.css\n│   │   │       │   │   │   ├── futurico.png\n│   │   │       │   │   │   └── futurico@2x.png\n│   │   │       │   │   ├── line\n│   │   │       │   │   │   ├── _all.css\n│   │   │       │   │   │   ├── aero.css\n│   │   │       │   │   │   ├── blue.css\n│   │   │       │   │   │   ├── green.css\n│   │   │       │   │   │   ├── grey.css\n│   │   │       │   │   │   ├── line.css\n│   │   │       │   │   │   ├── line.png\n│   │   │       │   │   │   ├── line@2x.png\n│   │   │       │   │   │   ├── orange.css\n│   │   │       │   │   │   ├── pink.css\n│   │   │       │   │   │   ├── purple.css\n│   │   │       │   │   │   ├── red.css\n│   │   │       │   │   │   └── yellow.css\n│   │   │       │   │   ├── minimal\n│   │   │       │   │   │   ├── _all.css\n│   │   │       │   │   │   ├── aero.css\n│   │   │       │   │   │   ├── aero.png\n│   │   │       │   │   │   ├── aero@2x.png\n│   │   │       │   │   │   ├── blue.css\n│   │   │       │   │   │   ├── blue.png\n│   │   │       │   │   │   ├── blue@2x.png\n│   │   │       │   │   │   ├── green.css\n│   │   │       │   │   │   ├── green.png\n│   │   │       │   │   │   ├── green@2x.png\n│   │   │       │   │   │   ├── grey.css\n│   │   │       │   │   │   ├── grey.png\n│   │   │       │   │   │   ├── grey@2x.png\n│   │   │       │   │   │   ├── minimal.css\n│   │   │       │   │   │   ├── minimal.png\n│   │   │       │   │   │   ├── minimal@2x.png\n│   │   │       │   │   │   ├── orange.css\n│   │   │       │   │   │   ├── orange.png\n│   │   │       │   │   │   ├── orange@2x.png\n│   │   │       │   │   │   ├── pink.css\n│   │   │       │   │   │   ├── pink.png\n│   │   │       │   │   │   ├── pink@2x.png\n│   │   │       │   │   │   ├── purple.css\n│   │   │       │   │   │   ├── purple.png\n│   │   │       │   │   │   ├── purple@2x.png\n│   │   │       │   │   │   ├── red.css\n│   │   │       │   │   │   ├── red.png\n│   │   │       │   │   │   ├── red@2x.png\n│   │   │       │   │   │   ├── yellow.css\n│   │   │       │   │   │   ├── yellow.png\n│   │   │       │   │   │   └── yellow@2x.png\n│   │   │       │   │   ├── polaris\n│   │   │       │   │   │   ├── polaris.css\n│   │   │       │   │   │   ├── polaris.png\n│   │   │       │   │   │   └── polaris@2x.png\n│   │   │       │   │   └── square\n│   │   │       │   │       ├── _all.css\n│   │   │       │   │       ├── aero.css\n│   │   │       │   │       ├── aero.png\n│   │   │       │   │       ├── aero@2x.png\n│   │   │       │   │       ├── blue.css\n│   │   │       │   │       ├── blue.png\n│   │   │       │   │       ├── blue@2x.png\n│   │   │       │   │       ├── green.css\n│   │   │       │   │       ├── green.png\n│   │   │       │   │       ├── green@2x.png\n│   │   │       │   │       ├── grey.css\n│   │   │       │   │       ├── grey.png\n│   │   │       │   │       ├── grey@2x.png\n│   │   │       │   │       ├── orange.css\n│   │   │       │   │       ├── orange.png\n│   │   │       │   │       ├── orange@2x.png\n│   │   │       │   │       ├── pink.css\n│   │   │       │   │       ├── pink.png\n│   │   │       │   │       ├── pink@2x.png\n│   │   │       │   │       ├── purple.css\n│   │   │       │   │       ├── purple.png\n│   │   │       │   │       ├── purple@2x.png\n│   │   │       │   │       ├── red.css\n│   │   │       │   │       ├── red.png\n│   │   │       │   │       ├── red@2x.png\n│   │   │       │   │       ├── square.css\n│   │   │       │   │       ├── square.png\n│   │   │       │   │       ├── square@2x.png\n│   │   │       │   │       ├── yellow.css\n│   │   │       │   │       ├── yellow.png\n│   │   │       │   │       └── yellow@2x.png\n│   │   │       │   └── js\n│   │   │       │       └── icheck.min.js\n│   │   │       ├── ionicons\n│   │   │       │   └── icon.min.css\n│   │   │       ├── jquery\n│   │   │       │   └── jquery.min.js\n│   │   │       ├── jquery-validation\n│   │   │       │   ├── additional-methods.min.js\n│   │   │       │   ├── jquery.validate.min.js\n│   │   │       │   └── locazation\n│   │   │       │       └── messages_zh.min.js\n│   │   │       ├── jsonview\n│   │   │       │   ├── css\n│   │   │       │   │   └── jquery.jsonview.min.css\n│   │   │       │   └── js\n│   │   │       │       └── jquery.jsonview.min.js\n│   │   │       ├── layer\n│   │   │       │   ├── layer.js\n│   │   │       │   ├── mobile\n│   │   │       │   │   ├── layer.js\n│   │   │       │   │   └── need\n│   │   │       │   │       └── layer.css\n│   │   │       │   └── theme\n│   │   │       │       └── default\n│   │   │       │           ├── icon-ext.png\n│   │   │       │           ├── icon.png\n│   │   │       │           ├── layer.css\n│   │   │       │           ├── loading-0.gif\n│   │   │       │           ├── loading-1.gif\n│   │   │       │           └── loading-2.gif\n│   │   │       ├── layui\n│   │   │       │   ├── css\n│   │   │       │   │   ├── layui.css\n│   │   │       │   │   ├── layui.mobile.css\n│   │   │       │   │   └── modules\n│   │   │       │   │       ├── code.css\n│   │   │       │   │       ├── laydate\n│   │   │       │   │       │   └── default\n│   │   │       │   │       │       └── laydate.css\n│   │   │       │   │       └── layer\n│   │   │       │   │           └── default\n│   │   │       │   │               ├── icon-ext.png\n│   │   │       │   │               ├── icon.png\n│   │   │       │   │               ├── layer.css\n│   │   │       │   │               ├── loading-0.gif\n│   │   │       │   │               ├── loading-1.gif\n│   │   │       │   │               └── loading-2.gif\n│   │   │       │   ├── font\n│   │   │       │   │   ├── iconfont.eot\n│   │   │       │   │   ├── iconfont.svg\n│   │   │       │   │   ├── iconfont.ttf\n│   │   │       │   │   ├── iconfont.woff\n│   │   │       │   │   └── iconfont.woff2\n│   │   │       │   ├── lay\n│   │   │       │   │   └── modules\n│   │   │       │   │       ├── carousel.js\n│   │   │       │   │       ├── code.js\n│   │   │       │   │       ├── colorpicker.js\n│   │   │       │   │       ├── element.js\n│   │   │       │   │       ├── flow.js\n│   │   │       │   │       ├── form.js\n│   │   │       │   │       ├── jquery.js\n│   │   │       │   │       ├── laydate.js\n│   │   │       │   │       ├── layedit.js\n│   │   │       │   │       ├── layer.js\n│   │   │       │   │       ├── laypage.js\n│   │   │       │   │       ├── laytpl.js\n│   │   │       │   │       ├── mobile.js\n│   │   │       │   │       ├── rate.js\n│   │   │       │   │       ├── slider.js\n│   │   │       │   │       ├── table.js\n│   │   │       │   │       ├── transfer.js\n│   │   │       │   │       ├── tree.js\n│   │   │       │   │       ├── upload.js\n│   │   │       │   │       └── util.js\n│   │   │       │   ├── layui.all.js\n│   │   │       │   └── layui.js\n│   │   │       ├── moment\n│   │   │       │   ├── moment-with-locales.min.js\n│   │   │       │   └── moment.min.js\n│   │   │       ├── overlayScrollbars\n│   │   │       │   ├── css\n│   │   │       │   │   └── OverlayScrollbars.min.css\n│   │   │       │   └── js\n│   │   │       │       └── OverlayScrollbars.min.js\n│   │   │       ├── paste\n│   │   │       │   └── paste.min.js\n│   │   │       ├── select2\n│   │   │       │   ├── css\n│   │   │       │   │   ├── select2-bootstrap4.min.css\n│   │   │       │   │   └── select2.min.css\n│   │   │       │   └── js\n│   │   │       │       ├── i18n\n│   │   │       │       │   ├── build.txt\n│   │   │       │       │   ├── en.js\n│   │   │       │       │   ├── zh-CN.js\n│   │   │       │       │   └── zh-TW.js\n│   │   │       │       ├── select2.full.min.js\n│   │   │       │       └── select2.min.js\n│   │   │       ├── summernote\n│   │   │       │   ├── css\n│   │   │       │   │   └── summernote-bs4.min.css\n│   │   │       │   ├── font\n│   │   │       │   │   ├── summernote.eot\n│   │   │       │   │   ├── summernote.ttf\n│   │   │       │   │   ├── summernote.woff\n│   │   │       │   │   └── summernote.woff2\n│   │   │       │   ├── js\n│   │   │       │   │   └── summernote-bs4.min.js\n│   │   │       │   └── lang\n│   │   │       │       └── summernote-zh-CN.min.js\n│   │   │       └── tempusdominus-bootstrap-4\n│   │   │           ├── css\n│   │   │           │   └── tempusdominus-bootstrap-4.min.css\n│   │   │           └── js\n│   │   │               └── tempusdominus-bootstrap-4.min.js\n│   │   └── common\n│   │       ├── css\n│   │       │   └── base.css\n│   │       ├── images\n│   │       │   ├── 401.gif\n│   │       │   ├── 404.png\n│   │       │   ├── 404_cloud.png\n│   │       │   ├── addpic.jpg\n│   │       │   ├── admineap.png\n│   │       │   ├── avatar.jpg\n│   │       │   └── btnclose.png\n│   │       └── js\n│   │           ├── base-form.js\n│   │           ├── base-modal.js\n│   │           ├── base-render.js\n│   │           ├── base.js\n│   │           └── dataTables.js\n│   ├── favicon.ico\n│   ├── index.php\n│   ├── robots.txt\n│   ├── storage -&gt; &#x2F;Users&#x2F;lyc&#x2F;Sites&#x2F;gsadmin.ggxx&#x2F;storage&#x2F;app&#x2F;public\n│   ├── vendor\n│   │   ├── horizon\n│   │   │   ├── app-dark.css\n│   │   │   ├── app.css\n│   │   │   ├── app.js\n│   │   │   ├── img\n│   │   │   │   ├── favicon.png\n│   │   │   │   ├── horizon.svg\n│   │   │   │   └── sprite.svg\n│   │   │   └── mix-manifest.json\n│   │   └── telescope\n│   │       ├── app-dark.css\n│   │       ├── app.css\n│   │       ├── app.js\n│   │       ├── favicon.ico\n│   │       └── mix-manifest.json\n│   └── web.config\n\n改造后的文件结构(Git)├──  public\n│   ├──  .htaccess\n│   ├──  favicon.ico\n│   ├──  favicon.ico\n│   ├──  index.php\n│   ├──  robots.txt\n│   ├──  web.config\n├── resources\n│   ├── js\n│   │   ├── app.js\n│   │   ├── bootstrap.js\n│   │   └── util.js\n│   ├── sass\n│   │   └── app.scss\n│   └── views\n├── package.json\n├── package-lock.json\n└── webpack.mix.js\n\n改造过程移除asset将public目录下的asset全部移出版本控制库，并在.gitignore中添加忽略。\n使用npm引入依赖在npm仓库中找到之前用到的所有组件，例如admin-lte\nnpm i admin-lte -D\n\n整理后的package.json\n&#123;\n    &quot;private&quot;: true,\n    &quot;scripts&quot;: &#123;\n        &quot;dev&quot;: &quot;npm run development&quot;,\n        &quot;development&quot;: &quot;cross-env NODE_ENV&#x3D;development node_modules&#x2F;webpack&#x2F;bin&#x2F;webpack.js --progress --hide-modules --config&#x3D;node_modules&#x2F;laravel-mix&#x2F;setup&#x2F;webpack.config.js&quot;,\n        &quot;watch&quot;: &quot;npm run development -- --watch&quot;,\n        &quot;watch-poll&quot;: &quot;npm run watch -- --watch-poll&quot;,\n        &quot;hot&quot;: &quot;cross-env NODE_ENV&#x3D;development node_modules&#x2F;webpack-dev-server&#x2F;bin&#x2F;webpack-dev-server.js --inline --hot --disable-host-check --config&#x3D;node_modules&#x2F;laravel-mix&#x2F;setup&#x2F;webpack.config.js&quot;,\n        &quot;prod&quot;: &quot;npm run production&quot;,\n        &quot;production&quot;: &quot;cross-env NODE_ENV&#x3D;production node_modules&#x2F;webpack&#x2F;bin&#x2F;webpack.js --no-progress --hide-modules --config&#x3D;node_modules&#x2F;laravel-mix&#x2F;setup&#x2F;webpack.config.js&quot;\n    &#125;,\n    &quot;devDependencies&quot;: &#123;\n        &quot;@fortawesome&#x2F;fontawesome-free&quot;: &quot;^5.15.1&quot;,\n        &quot;@ttskch&#x2F;select2-bootstrap4-theme&quot;: &quot;^1.3.4&quot;,\n        &quot;admin-lte&quot;: &quot;^3.0.5&quot;,\n        &quot;axios&quot;: &quot;^0.19&quot;,\n        &quot;bootstrap&quot;: &quot;^4.5.3&quot;,\n        &quot;bootstrap-iconpicker-latest&quot;: &quot;^1.12.0&quot;,\n        &quot;bower&quot;: &quot;^1.8.8&quot;,\n        &quot;browser-sync&quot;: &quot;^2.26.12&quot;,\n        &quot;browser-sync-webpack-plugin&quot;: &quot;^2.0.1&quot;,\n        &quot;cross-env&quot;: &quot;^7.0&quot;,\n        &quot;datatables.net&quot;: &quot;^1.10.22&quot;,\n        &quot;datatables.net-bs4&quot;: &quot;^1.10.22&quot;,\n        &quot;datatables.net-buttons&quot;: &quot;^1.6.5&quot;,\n        &quot;datatables.net-buttons-bs4&quot;: &quot;^1.6.5&quot;,\n        &quot;datatables.net-fixedcolumns&quot;: &quot;^3.3.2&quot;,\n        &quot;datatables.net-fixedcolumns-bs4&quot;: &quot;^3.3.2&quot;,\n        &quot;datatables.net-fixedheader&quot;: &quot;^3.1.7&quot;,\n        &quot;datatables.net-fixedheader-bs4&quot;: &quot;^3.1.7&quot;,\n        &quot;datatables.net-responsive&quot;: &quot;^2.2.6&quot;,\n        &quot;datatables.net-responsive-bs4&quot;: &quot;^2.2.6&quot;,\n        &quot;datatables.net-select-bs4&quot;: &quot;^1.3.1&quot;,\n        &quot;daterangepicker&quot;: &quot;^3.1.0&quot;,\n        &quot;distpicker&quot;: &quot;^2.0.6&quot;,\n        &quot;echarts&quot;: &quot;^4.9.0&quot;,\n        &quot;icheck&quot;: &quot;^1.0.2&quot;,\n        &quot;ionicons&quot;: &quot;^2.0.1&quot;,\n        &quot;jquery&quot;: &quot;^3.5.1&quot;,\n        &quot;jquery-datatables-checkboxes&quot;: &quot;^1.2.12&quot;,\n        &quot;jquery-jsonview&quot;: &quot;^1.2.3&quot;,\n        &quot;jquery-validation&quot;: &quot;^1.19.2&quot;,\n        &quot;jszip&quot;: &quot;^3.5.0&quot;,\n        &quot;laravel-mix&quot;: &quot;^5.0.7&quot;,\n        &quot;layui-src&quot;: &quot;^2.5.5&quot;,\n        &quot;lodash&quot;: &quot;^4.17.19&quot;,\n        &quot;moment&quot;: &quot;^2.29.1&quot;,\n        &quot;overlayscrollbars&quot;: &quot;^1.13.0&quot;,\n        &quot;paste.js&quot;: &quot;0.0.21&quot;,\n        &quot;pc-bootstrap4-datetimepicker&quot;: &quot;^4.17.51&quot;,\n        &quot;resolve-url-loader&quot;: &quot;^3.1.0&quot;,\n        &quot;sass&quot;: &quot;^1.15.2&quot;,\n        &quot;sass-loader&quot;: &quot;^8.0.0&quot;,\n        &quot;sc-bootstrap-treeview&quot;: &quot;^1.2.4&quot;,\n        &quot;select2&quot;: &quot;^4.0.13&quot;,\n        &quot;summernote&quot;: &quot;^0.8.18&quot;,\n        &quot;toastr&quot;: &quot;^2.1.4&quot;,\n        &quot;vue-template-compiler&quot;: &quot;^2.6.12&quot;\n    &#125;,\n    &quot;dependencies&quot;: &#123;\n   &#125;\n&#125;\n\n维护asset主文件\n\n\n\n\n\n\n\n\n建议使用IDE编辑，路径会有跳转提示，不容易出错。\nbootstrap.js\nwindow._ &#x3D; require(&#39;lodash&#39;);\n\n&#x2F;**\n * We&#39;ll load jQuery and the Bootstrap jQuery plugin which provides support\n * for JavaScript based Bootstrap features such as modals and tabs. This\n * code may be modified to fit the specific needs of your application.\n *&#x2F;\n\nwindow.$ &#x3D; window.jQuery &#x3D; require(&#39;jquery&#39;);\nwindow.moment &#x3D; require(&#39;moment&#39;);\nwindow.echarts &#x3D; require(&#39;echarts&#39;);\nwindow.toastr &#x3D; require(&#39;toastr&#39;);\nwindow.JSZip &#x3D; require(&#39;jszip&#39;);\nrequire(&#39;bootstrap&#x2F;dist&#x2F;js&#x2F;bootstrap.bundle&#39;);\nrequire(&#39;admin-lte&#39;);\nrequire(&#39;datatables.net&#39;);\nrequire(&#39;datatables.net-bs4&#39;);\nrequire(&#39;datatables.net-responsive&#39;);\nrequire(&#39;datatables.net-responsive-bs4&#39;);\nrequire(&#39;datatables.net-fixedheader&#39;);\nrequire(&#39;datatables.net-fixedheader-bs4&#39;);\nrequire(&#39;datatables.net-fixedcolumns&#39;);\nrequire(&#39;datatables.net-fixedcolumns-bs4&#39;);\nrequire(&#39;datatables.net-buttons&#39;);\nrequire(&#39;datatables.net-buttons&#x2F;js&#x2F;buttons.colVis.min&#39;);\nrequire(&#39;datatables.net-buttons&#x2F;js&#x2F;buttons.flash.min&#39;);\nrequire(&#39;datatables.net-buttons&#x2F;js&#x2F;buttons.html5.min&#39;);\nrequire(&#39;datatables.net-buttons-bs4&#39;);\nrequire(&#39;@fortawesome&#x2F;fontawesome-free&#x2F;js&#x2F;all&#39;);\nrequire(&#39;select2&#x2F;dist&#x2F;js&#x2F;select2.full&#39;);\nrequire(&#39;jquery-validation&#39;);\nrequire(&#39;jquery-validation&#x2F;dist&#x2F;localization&#x2F;messages_zh&#39;);\nrequire(&#39;jquery-jsonview&#39;);\nrequire(&#39;jquery-datatables-checkboxes&#39;);\nrequire(&#39;bootstrap-iconpicker-latest&#x2F;dist&#x2F;js&#x2F;bootstrap-iconpicker.bundle.min&#39;);\nrequire(&#39;pc-bootstrap4-datetimepicker&#39;);\nrequire(&#39;daterangepicker&#39;);\nrequire(&#39;distpicker&#39;);\nrequire(&#39;sc-bootstrap-treeview&#x2F;dist&#x2F;bootstrap-treeview.min&#39;);\nrequire(&#39;icheck&#39;);\nrequire(&#39;summernote&#39;);\nrequire(&#39;paste.js&#39;);\nrequire(&#39;overlayscrollbars&#39;);\n\n&#x2F;**\n * We&#39;ll load the axios HTTP library which allows us to easily issue requests\n * to our Laravel back-end. This library automatically handles sending the\n * CSRF token as a header based on the value of the &quot;XSRF&quot; token cookie.\n *&#x2F;\n\nwindow.axios &#x3D; require(&#39;axios&#39;);\n\nwindow.axios.defaults.headers.common[&#39;X-Requested-With&#39;] &#x3D; &#39;XMLHttpRequest&#39;;\n\nlet token &#x3D; document.head.querySelector(&#39;meta[name&#x3D;&quot;csrf-token&quot;]&#39;);\nif (token) &#123;\n    window.axios.defaults.headers.common[&#39;X-CSRF-TOKEN&#39;] &#x3D; token.content;\n&#125;\n\napp.scss\n@import &quot;~admin-lte&#x2F;build&#x2F;scss&#x2F;AdminLTE&quot;;\n@import &quot;~datatables.net-bs4&#x2F;css&#x2F;dataTables.bootstrap4.css&quot;;\n@import &quot;~datatables.net-select-bs4&#x2F;css&#x2F;select.bootstrap4.css&quot;;\n@import &quot;~datatables.net-responsive-bs4&#x2F;css&#x2F;responsive.bootstrap4.css&quot;;\n@import &quot;~datatables.net-fixedheader-bs4&#x2F;css&#x2F;fixedHeader.bootstrap4.css&quot;;\n@import &quot;~datatables.net-fixedcolumns-bs4&#x2F;css&#x2F;fixedColumns.bootstrap4.css&quot;;\n@import &quot;~datatables.net-buttons-bs4&#x2F;css&#x2F;buttons.bootstrap4.css&quot;;\n@import &quot;~select2&#x2F;dist&#x2F;css&#x2F;select2.css&quot;;\n@import &quot;~@ttskch&#x2F;select2-bootstrap4-theme&#x2F;dist&#x2F;select2-bootstrap4.css&quot;;\n@import &quot;~pc-bootstrap4-datetimepicker&#x2F;build&#x2F;css&#x2F;bootstrap-datetimepicker.css&quot;;\n@import &quot;~bootstrap-iconpicker-latest&#x2F;dist&#x2F;css&#x2F;bootstrap-iconpicker.css&quot;;\n@import &quot;~sc-bootstrap-treeview&#x2F;dist&#x2F;bootstrap-treeview.min.css&quot;;\n@import &quot;~jquery-jsonview&#x2F;dist&#x2F;jquery.jsonview.css&quot;;\n@import &quot;~daterangepicker&#x2F;daterangepicker.css&quot;;\n@import &quot;~icheck&#x2F;skins&#x2F;all.css&quot;;\n@import &quot;~summernote&#x2F;dist&#x2F;summernote-bs4.css&quot;;\n@import &quot;~layui-src&#x2F;dist&#x2F;css&#x2F;layui.css&quot;;\n@import &quot;~ionicons&#x2F;css&#x2F;ionicons.css&quot;;\n@import &quot;~overlayscrollbars&#x2F;css&#x2F;OverlayScrollbars.css&quot;;\n@import &quot;~toastr&#x2F;build&#x2F;toastr.css&quot;;\n\n&#x2F;&#x2F; 以下是自定义的样式\n正常来说，这里时不需要编译adminlte的scss，可以直接引入css，加快编译速度。但是不这样做的话，我后续做自动化构建会遇到问题)\n\n维护构建配置我这里将两个composer组件horizon、telescope的asset做了复制目录动作，也就不需要用版本控制维护。如果做自动构建，要记得先安装composer组件再执行构建。\nconst mix &#x3D; require(&#39;laravel-mix&#39;);\n\n&#x2F;*\n |--------------------------------------------------------------------------\n | Mix Asset Management\n |--------------------------------------------------------------------------\n |\n | Mix provides a clean, fluent API for defining some Webpack build steps\n | for your Laravel application. By default, we are compiling the Sass\n | file for the application as well as bundling up all the JS files.\n |\n *&#x2F;\n\nmix.copy(&#39;node_modules&#x2F;admin-lte&#x2F;dist&#x2F;img&#x2F;AdminLTELogo.png&#39;, &#39;public&#x2F;images&#x2F;vendor&#x2F;admin-lte&#x2F;AdminLTELogo.png&#39;)\n    .copyDirectory(&#39;vendor&#x2F;laravel&#x2F;horizon&#x2F;public&#39;, &#39;public&#x2F;vendor&#x2F;horizon&#39;)\n    .copyDirectory(&#39;vendor&#x2F;laravel&#x2F;telescope&#x2F;public&#39;, &#39;public&#x2F;vendor&#x2F;telescope&#39;)\n    .copyDirectory(&#39;node_modules&#x2F;layui-src&#x2F;dist&#39;, &#39;public&#x2F;vendor&#x2F;layui&#39;);\n\nmix.js(&#39;resources&#x2F;js&#x2F;app.js&#39;, &#39;public&#x2F;js&#39;)\n    .scripts([\n        &#39;resources&#x2F;js&#x2F;util.js&#39;,\n    ], &#39;public&#x2F;js&#x2F;util.js&#39;)\n    .sass(&#39;resources&#x2F;sass&#x2F;app.scss&#39;, &#39;public&#x2F;css&#39;)\n    .extract()\n    .version();\n\nif (mix.inProduction()) &#123;\n    mix.disableNotifications();\n&#125;\n\n截至发文时间，layui的结构还不能很好的支持webpack打包[[issue]](https://github.com/sentsin/layui/issues/268)，所以这里直接复制了目录，视图中单独引入。\n\n执行构建npm i\nnpm run prod\n\n引入构建后的文件index.blade.php\n&lt;link rel&#x3D;&quot;shortcut icon&quot; type&#x3D;&quot;image&#x2F;x-icon&quot; href&#x3D;&quot;&#123;&#123;asset(&#39;images&#x2F;vendor&#x2F;admin-lte&#x2F;AdminLTELogo.png&#39;)&#125;&#125;&quot;\n          media&#x3D;&quot;screen&quot;&#x2F;&gt;\n&lt;link rel&#x3D;&quot;stylesheet&quot; href&#x3D;&quot;&#123;&#123;mix(&#39;css&#x2F;app.css&#39;)&#125;&#125;&quot;&gt;\n\n...\n\n&lt;script src&#x3D;&quot;&#123;&#123;mix(&#39;&#x2F;js&#x2F;manifest.js&#39;)&#125;&#125;&quot;&gt;&lt;&#x2F;script&gt;\n&lt;script src&#x3D;&quot;&#123;&#123;mix(&#39;&#x2F;js&#x2F;vendor.js&#39;)&#125;&#125;&quot;&gt;&lt;&#x2F;script&gt;\n&lt;script src&#x3D;&quot;&#123;&#123;mix(&#39;js&#x2F;app.js&#39;)&#125;&#125;&quot;&gt;&lt;&#x2F;script&gt;\n&lt;!-- LayUI 注意是LayUI的结构不规范导致需要单独引入 其他组件请使用Laravel-mix维护 --&gt;\n&lt;script src&#x3D;&quot;&#123;&#123;asset(&#39;vendor&#x2F;layui&#x2F;layui.all.js&#39;)&#125;&#125;&quot;&gt;&lt;&#x2F;script&gt;\n&lt;!-- common 工具类组件单独引入方便调用 --&gt;\n&lt;script src&#x3D;&quot;&#123;&#123;asset(&#39;js&#x2F;util.js&#39;)&#125;&#125;&quot;&gt;&lt;&#x2F;script&gt;\n\n...\n","slug":"使用Laravel-Mix构建Asset","date":"2020-11-03T10:31:58.000Z","categories_index":"前端","tags_index":"webpack","author_index":"CloudyCity"},{"id":"76ef2e250c5014c401277f737e1b27cf","title":"Eloquent自动维护int类型的时间","content":"火星救援，刻不容缓！\n\n\nLaravel Eloquent提供了自动维护created_at、updated_at的功能，时间的默认类型为格式化的字符串(Carbon\\Carbon::toString()的返回值)。如果表设计是存储Unix时间戳，可以通过一个trait支持。\nnamespace App\\Models;\n\ntrait UseUnixTimestamp\n&#123;\n    public function freshTimestamp() &#123;\n        return time();\n    &#125;\n\n    public function fromDateTime($value) &#123;\n        return $value;\n    &#125;\n\n    public function getDateFormat() &#123;\n        return 'U';\n    &#125;\n&#125;\n\nnamespace App\\Models;\n\nuse UseUnixTimestamp;\n\nclass MyModel extends Model\n&#123;\n    use UseUnixTimestamp;\n    \n    //\n&#125;","slug":"Eloquent自动维护int类型的时间","date":"2020-08-12T03:20:16.000Z","categories_index":"php","tags_index":"laravel","author_index":"CloudyCity"},{"id":"0abd40c040136e2dd273f02ae6ffdae7","title":"如何引用同一级查询的列别名作为新列","content":"火星救援，刻不容缓！\n\n示例表：\nmysql> SELECT * FROM core;\n+--------+--------+--------+\n| field1 | field2 | field3 |\n+--------+--------+--------+\n|      1 |      2 |      3 |\n|      4 |      5 |      6 |\n+--------+--------+--------+\n2 rows in set (0.00 sec)\nMySQL中无法直接执行以下查询：\nmysql> SELECT\n    ->     field1 + field2 AS col1,\n    ->     col1 + field3 AS col2\n    -> FROM\n    ->     core;\nERROR 1054 (42S22): Unknown column 'col1' in 'field list'\n但有三种方案实现这个效果。\n子查询mysql> SELECT\n    ->     col1,\n    ->     col1 + field3 AS col2\n    -> FROM\n    ->     ( SELECT field1 + field2 AS col1, field3 FROM core ) AS subQuery;\n+------+------+\n| col1 | col2 |\n+------+------+\n|    3 |    6 |\n|    9 |   15 |\n+------+------+\n2 rows in set (0.00 sec)\n\n用户变量mysql> SELECT\n    ->     @col1 := ( field1 + field2 ) AS col1,\n    ->     @col1 + field3 AS col2\n    -> FROM\n    ->     core;\n+------+------+\n| col1 | col2 |\n+------+------+\n|    3 |    6 |\n|    9 |   15 |\n+------+------+\n2 rows in set, 1 warning (0.00 sec)\n这里结果显示了一个warning: SELECT里的表达式在被发送到mysql客户端时才会被执行，所以[用户变量](https://dev.mysql.com/doc/refman/5.6/en/user-variables.html)在`HAVING`、`GROUP BY`、`ORDER BY`中无法使用。\n\n引用别名mysql> SELECT\n    ->     field1 + field2 AS col1,\n    ->     ( SELECT col1 ) + field3 AS col2\n    -> FROM\n    ->     core;\n+------+------+\n| col1 | col2 |\n+------+------+\n|    3 |    6 |\n|    9 |   15 |\n+------+------+\n2 rows in set (0.00 sec)\n与`用户变量`类似，在`GROUP BY`中无法使用。\n\n在GROUP BY里中使用引用:\nmysql> SELECT\n    ->     MAX( field1 ) AS col1,\n    ->     ( SELECT col1 ) AS col2\n    -> FROM\n    ->     core\n    -> GROUP BY\n    ->     field1;\nERROR 1247 (42S22): Reference 'col1' not supported (reference to group function)\n\nReferenceshttps://stackoverflow.com/questions/6081436/how-to-alias-a-field-or-column-in-mysql#\n","slug":"如何引用同一级查询的列别名作为新列","date":"2019-08-03T15:46:21.000Z","categories_index":"db","tags_index":"mysql","author_index":"CloudyCity"},{"id":"50cf5c76074e26e315ae86b2cbee0e59","title":"用Docker搭建LNMP环境","content":"人类的本质是复读机。\n\n\n安装docker查看内核版本$ uname -r\n3.10.0-957.el7.x86_64\n\n更新yum包$ yum update\n\n添加包源$ yum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo\nLoaded plugins: fastestmirror, langpacks\nadding repo from: https://download.docker.com/linux/centos/docker-ce.repo\ngrabbing file https://download.docker.com/linux/centos/docker-ce.repo to /etc/yum.repos.d/docker-ce.repo\nrepo saved to /etc/yum.repos.d/docker-ce.repo\n\n查看版本$ yum list docker-ce --showduplicates | sort -r\nLoading mirror speeds from cached hostfile\nLoaded plugins: fastestmirror, langpacks\ndocker-ce.x86_64            3:18.09.8-3.el7                     docker-ce-stable\ndocker-ce.x86_64            3:18.09.7-3.el7                     docker-ce-stable\ndocker-ce.x86_64            3:18.09.6-3.el7                     docker-ce-stable\ndocker-ce.x86_64            3:18.09.5-3.el7                     docker-ce-stable\ndocker-ce.x86_64            3:18.09.4-3.el7                     docker-ce-stable\ndocker-ce.x86_64            3:18.09.3-3.el7                     docker-ce-stable\ndocker-ce.x86_64            3:18.09.2-3.el7                     docker-ce-stable\ndocker-ce.x86_64            3:18.09.1-3.el7                     docker-ce-stable\ndocker-ce.x86_64            3:18.09.0-3.el7                     docker-ce-stable\ndocker-ce.x86_64            18.06.3.ce-3.el7                    docker-ce-stable\ndocker-ce.x86_64            18.06.2.ce-3.el7                    docker-ce-stable\ndocker-ce.x86_64            18.06.1.ce-3.el7                    docker-ce-stable\ndocker-ce.x86_64            18.06.0.ce-3.el7                    docker-ce-stable\ndocker-ce.x86_64            18.03.1.ce-1.el7.centos             docker-ce-stable\ndocker-ce.x86_64            18.03.0.ce-1.el7.centos             docker-ce-stable\ndocker-ce.x86_64            17.12.1.ce-1.el7.centos             docker-ce-stable\ndocker-ce.x86_64            17.12.0.ce-1.el7.centos             docker-ce-stable\ndocker-ce.x86_64            17.09.1.ce-1.el7.centos             docker-ce-stable\ndocker-ce.x86_64            17.09.0.ce-1.el7.centos             docker-ce-stable\ndocker-ce.x86_64            17.06.2.ce-1.el7.centos             docker-ce-stable\ndocker-ce.x86_64            17.06.1.ce-1.el7.centos             docker-ce-stable\ndocker-ce.x86_64            17.06.0.ce-1.el7.centos             docker-ce-stable\ndocker-ce.x86_64            17.03.3.ce-1.el7                    docker-ce-stable\ndocker-ce.x86_64            17.03.2.ce-1.el7.centos             docker-ce-stable\ndocker-ce.x86_64            17.03.1.ce-1.el7.centos             docker-ce-stable\ndocker-ce.x86_64            17.03.0.ce-1.el7.centos             docker-ce-stable\nAvailable Packages\n\n安装$ yum install docker-ce-18.03.1.ce\n\n启动$ systemctl start docker\n\n设置开机启动 (可选)$ systemctl enable docker\nCreated symlink from /etc/systemd/system/multi-user.target.wants/docker.service to /usr/lib/systemd/system/docker.service.\n\n查看$ docker version\nClient:\n Version:      18.03.1-ce\n API version:  1.37\n Go version:   go1.9.5\n Git commit:   9ee9f40\n Built:        Thu Apr 26 07:20:16 2018\n OS/Arch:      linux/amd64\n Experimental: false\n Orchestrator: swarm\n\nServer:\n Engine:\n  Version:      18.03.1-ce\n  API version:  1.37 (minimum version 1.12)\n  Go version:   go1.9.5\n  Git commit:   9ee9f40\n  Built:        Thu Apr 26 07:23:58 2018\n  OS/Arch:      linux/amd64\n  Experimental: false\n\n安装docker-compose从github安装$ curl -L \"https://github.com/docker/compose/releases/download/1.24.1/docker-compose-$(uname -s)-$(uname -m)\" -o /usr/local/bin/docker-compose\n给予执行权限$ chmod +x /usr/local/bin/docker-compose\n查看$ docker-compose --version\ndocker-compose version 1.24.1, build 4667896b\n\n搭建LNMP这里直接用yeszao/dnmp的配置。\n选取目录选择一个存放容器配置的目录(只是配置文件位置，镜像与容器在/var/lib/docker目录中)\n$ cd ~ &amp;&amp; mkdir dnmp &amp;&amp; cd dnmp\n\n拉取配置$ git clone git@github.com:yeszao/dnmp.git # 这里用的是v2.0.4的tag\n$ cp env.sample .env &amp;&amp; cp docker-compose.sample.yml docker-compose.yml\n\n修改配置这里docker-compose.yml 只开启了nginx、php、mysql8和redis，.env 给php加了一些扩展。\n# .env\nPHP_VERSION=7.2.19\nPHP_PHP_CONF_FILE=./conf/php.ini\nPHP_FPM_CONF_FILE=./conf/php-fpm.conf\nPHP_LOG_DIR=./log/php\nPHP_EXTENSIONS=pdo_mysql,mysqli,mbstring,gd,curl,opcache,redis,imap,swoole,xhprof,acpu\n所有配置文件都在~/dnmp/services/目录中，所有日志都在~/dnmp/log中，具体见yeszao/dnmp。\n执行构建在配置文件处执行\n$ docker-compose up -d\nCreating network \"dnmp_default\" with the default driver\nCreating redis ... done\nCreating mysql ... done\nCreating php   ... done\nCreating nginx ... done\n初始构建需要一定时间，如果构建时无法下载组件，需要给容器指定dns服务器。\n\n查看宿主机nameserver$ cat &#x2F;etc&#x2F;resolv.conf\n# Your system has been configured with &#39;manage-resolv-conf&#39; set to true.\n# As a result, cloud-init has written this file with configuration data\n# that it has been provided. Cloud-init, by default, will write this file\n# a single time (PER_ONCE).\n#\nnameserver 183.60.83.19\nnameserver 183.60.82.98\n新建或修改/etc/default/dockerDOCKER_OPTS&#x3D;&quot;--dns 183.60.83.19&quot;\n重启dockersystemctl restart docker\n\n查看容器$ docker-compose ps\nName               Command              State                    Ports\n----------------------------------------------------------------------------------------\nmysql   docker-entrypoint.sh mysqld     Up      0.0.0.0:3306->3306/tcp, 33060/tcp\nnginx   nginx -g daemon off;            Up      0.0.0.0:443->443/tcp, 0.0.0.0:80->80/tcp\nphp     docker-php-entrypoint php-fpm   Up      9000/tcp, 9501/tcp\nredis   redis-server /etc/redis.conf    Up      0.0.0.0:6379->6379/tcp           \n\n配置命令别名从bash.alias.sample提取需要的别名到~/.bashrc或~/.zshrc中，然后重新source生效\nalias dnginx='docker exec -it nginx /bin/sh'\nalias dphp='docker exec -it php /bin/sh'\nalias dmysql='docker exec -it mysql /bin/bash'\nalias dredis='docker exec -it redis /bin/sh'\n\nphp () &#123;\n\ttty=\n\ttty -s &amp;&amp; tty=--tty\n\tdocker run \\\n\t\t$tty \\\n\t\t--interactive \\\n\t\t--rm \\\n\t\t--volume $PWD:/www:rw \\\n\t\t--workdir /www \\\n\t\tdnmp_php php \"$@\"\n&#125;\n\ncomposer() &#123;\n\ttty=\n\ttty -s &amp;&amp; tty=--tty\n\tdocker run \\\n\t\t$tty \\\n\t\t--interactive \\\n\t\t--rm \\\n\t\t--user www-data:www-data \\\n\t\t--volume ~/dnmp/data/composer:/tmp/composer \\\n\t\t--volume $(pwd):/app \\\n\t\t--workdir /app \\\n\t\tdnmp_php composer \"$@\"\n&#125;\n\nReferencesGet Docker CE for CentOSInstall Docker Composeyeszao/dnmp\n","slug":"用Docker搭建LNMP环境","date":"2019-07-19T09:57:13.000Z","categories_index":"运维","tags_index":"docker","author_index":"CloudyCity"},{"id":"ff1fb0ae51583213dce3cf60573ca74e","title":"使用Webpack开发JS Sdk","content":"最近项目需要开发一个JS Sdk，为了保证可读性与可维护性，决定按模块开发，最后使用webpack打包。\n\n\n文件结构|-- config\n|   |-- webpack.base.js\n|   |-- webpack.development.js\n|   |-- webpack.production.js\n|-- dist\n|   |-- mars_minigame_sdk.js\n|   |-- mars_minigame_sdk.min.js\n|-- node_modules\n|-- package-lock.json\n|-- package.json\n|-- src\n|   |-- index.js      # SDK入口\n|   |-- lib\n|   |   &#96;-- util.js   # 工具函数\n|   |-- sdk           # 各渠道SDK\n|       |-- qq.js \n|       |-- wechat.js\n|-- webpack.config.js\n\n安装依赖npm install -g webpack webpack-cli\nnpm install --save-dev webpack webpack-cli webpack-merge uglifyjs-webpack-plugin babel-loader\n\n配置webpackconfig\\webpack.base.js\nconst path &#x3D; require(&#39;path&#39;)\n\nmodule.exports &#x3D; &#123;\n    entry: &#123;\n        &#39;mars_minigame_sdk&#39;: &#39;@&#x2F;index.js&#39;\n    &#125;,\n    output: &#123;\n        path: path.resolve(__dirname, &#39;..&#x2F;dist&#39;),\n        filename: &#39;[name].min.js&#39;,\n        library: &#39;mars_mg_sdk&#39;,\n        libraryTarget: &quot;umd&quot;\n    &#125;,\n    module: &#123;\n        rules: [\n            &#123; \n                test: &#x2F;\\.js$&#x2F;, \n                exclude: &#x2F;node_modules&#x2F;, \n                use: &#123;\n                    loader: &quot;babel-loader&quot; \n                &#125;\n            &#125;\n        ]\n    &#125;,\n    resolve: &#123;\n        alias: &#123;\n            &#39;@&#39;: path.resolve(&#39;src&#39;)\n        &#125;\n    &#125;\n&#125;\n\nconfig\\webpack.development.js\nconst merge &#x3D; require(&quot;webpack-merge&quot;);\nmodule.exports &#x3D; &#123;\n    devtool: &#39;source-map&#39;,\n    output: &#123;\n        filename: &#39;[name].js&#39;,\n    &#125;\n&#125;\n\nconfig\\webpack.production.js\nconst merge &#x3D; require(&quot;webpack-merge&quot;);\nmodule.exports &#x3D; &#123;\n    output: &#123;\n        filename: &#39;[name].min.js&#39;,\n    &#125;\n&#125;\n\nwebpack.config.js\nconst merge &#x3D; require(&#39;webpack-merge&#39;);\nconst baseConfig &#x3D; require(&#39;.&#x2F;config&#x2F;webpack.base&#39;);\nconst developmentConfig &#x3D; require(&#39;.&#x2F;config&#x2F;webpack.development&#39;);\nconst productionConfig &#x3D; require(&#39;.&#x2F;config&#x2F;webpack.production&#39;);\n\nmodule.exports &#x3D; mode &#x3D;&gt; &#123;\n    if (mode &#x3D;&#x3D;&#x3D; &quot;production&quot;) &#123;\n        return merge(baseConfig, productionConfig, &#123; mode &#125;);\n    &#125;\n    return merge(baseConfig, developmentConfig, &#123; mode &#125;);\n&#125;\n\npackage.json\n&#123;\n  &quot;name&quot;: &quot;mars_mg_sdk&quot;,\n  &quot;version&quot;: &quot;1.0.0&quot;,\n  &quot;description&quot;: &quot;火星救援小游戏SDK&quot;,\n  &quot;private&quot;: true,\n  &quot;scripts&quot;: &#123;\n    &quot;test&quot;: &quot;echo \\&quot;Error: no test specified\\&quot; &amp;&amp; exit 1&quot;,\n    &quot;start&quot;: &quot;npm run dev&quot;,\n    &quot;dev&quot;: &quot;webpack --watch --env development&quot;,\n    &quot;build&quot;: &quot;webpack --env production&quot;,\n    &quot;server&quot;: &quot;webpack-dev-server --open --env development&quot;\n  &#125;,\n  &quot;repository&quot;: &#123;\n    &quot;type&quot;: &quot;git&quot;,\n    &quot;url&quot;: &quot;ssh:&#x2F;&#x2F;git@gitlab.mars.com&#x2F;lcpd&#x2F;mars_mg_sdk.git&quot;\n  &#125;,\n  &quot;keywords&quot;: [\n    &quot;火星救援&quot;,\n    &quot;小游戏&quot;,\n    &quot;SDK&quot;\n  ],\n  &quot;author&quot;: &quot;Mars Developer&quot;,\n  &quot;license&quot;: &quot;MIT&quot;,\n  &quot;dependencies&quot;: &#123;&#125;,\n  &quot;devDependencies&quot;: &#123;\n    &quot;@babel&#x2F;core&quot;: &quot;^7.5.4&quot;,\n    &quot;babel-loader&quot;: &quot;^8.0.6&quot;,\n    &quot;uglifyjs-webpack-plugin&quot;: &quot;^2.1.3&quot;,\n    &quot;webpack&quot;: &quot;^4.35.3&quot;,\n    &quot;webpack-cli&quot;: &quot;^3.3.5&quot;,\n    &quot;webpack-dev-server&quot;: &quot;^3.7.2&quot;,\n    &quot;webpack-merge&quot;: &quot;^4.2.1&quot;\n  &#125;\n&#125;\n\n业务代码index.js\nconst qqSdk &#x3D; require(&#39;.&#x2F;sdk&#x2F;qq&#39;);\nconst wechatSdk &#x3D; require(&#39;.&#x2F;sdk&#x2F;wechat&#39;);\nconst util &#x3D; require(&#39;.&#x2F;lib&#x2F;util&#39;);\n\nwindow.apiHost &#x3D; &#39;https:&#x2F;&#x2F;api.mp.mars.com&#x2F;&#39;;\n\nmodule.exports &#x3D; &#123;\n    init: function (e) &#123;&#125;,\n    login: function (e) &#123;&#125;,\n    pay: function (e) &#123;&#125;\n&#125;\n\nsdk\\wechat.js\nconst util &#x3D; require(&#39;..&#x2F;lib&#x2F;util&#39;);\n\nmodule.exports &#x3D; &#123;\n    init: function (e) &#123;&#125;,\n    login: function (e) &#123;&#125;,\n    pay: function (e) &#123;&#125;\n&#125;\n\n打包打包开发环境文件，即打包成mars_minigame_sdk.js。启动命令参数加了--watch，文件改动时会自动打包。\nnpm run dev\n\n打包生产环境文件，即mars_minigame_sdk.min.js\nnpm run build\n\n使用SDK以微信开发工具为例\n\nReferences用 webpack 写一个简单的 JS SDK\n","slug":"使用Webpack开发JS-Sdk","date":"2019-07-17T05:55:32.000Z","categories_index":"前端","tags_index":"webpack","author_index":"CloudyCity"},{"id":"58d4f495b2526d01b8b9004566be2a59","title":"Laravel5.8+Dingo+JWT+Swagger 开发API","content":"在Laravel5.8中使用“Laravel必知必会”的两个轮子dingo/api和tymon/jwt-auth以及文档系统swagger-api/swagger-ui开发一个规范优雅的API。\n\n\nDingo安装composer require dingo&#x2F;api\n\n组件包含自动包发现配置，无需手动注册Provider\n配置php artisan vendor:publish --provider&#x3D;&quot;Dingo\\Api\\Provider\\LaravelServiceProvider&quot;\n无特殊需求直接通过.env文件配置\n# Dingo Api \nAPI_STANDARDS_TREE&#x3D;x\nAPI_SUBTYPE&#x3D;mp_admin\nAPI_PREFIX&#x3D;api # 前缀\nAPI_VERSION&#x3D;v1 # 默认版本\nAPI_NAME&#x3D;&quot;Mp Admin API&quot; # 名称\nAPI_CONDITIONAL_REQUEST&#x3D;false # 条件请求\nAPI_STRICT&#x3D;false # 严格模式，开启时请求头必要带标准的Accept信息\nAPI_DEFAULT_FORMAT&#x3D;json\nAPI_DEBUG&#x3D;true # 调试\n由于子域已被占用，这里采用前缀的格式。接口地址格式为：https://admin.mp.example.com/api\n路由&#x2F;* @var \\Dingo\\Api\\Routing\\Router $api *&#x2F;\n$api &#x3D; app(&#39;Dingo\\Api\\Routing\\Router&#39;);\n\n$api-&gt;version(&#39;v1&#39;, function () use ($api) &#123;\n    $api-&gt;group([&#39;middleware&#39; &#x3D;&gt; [&#39;api&#39;, &#39;bindings&#39;]], function () use ($api) &#123;\n        &#x2F;&#x2F; 系统调试日志\n        $api-&gt;get(&#39;dev-logs&#39;, [&#39;as&#39; &#x3D;&gt; &#39;dev-logs&#39;, &#39;uses&#39; &#x3D;&gt; &#39;\\Rap2hpoutre\\LaravelLogViewer\\LogViewerController@index&#39;, &#39;middleware&#39; &#x3D;&gt; [&#39;auth&#39;]]);\n\n        &#x2F;&#x2F; 验证\n        $api-&gt;group([&#39;prefix&#39; &#x3D;&gt; &#39;auth&#39;], function () use ($api) &#123;\n            $api-&gt;post(&#39;login&#39;, [&#39;as&#39; &#x3D;&gt; &#39;auth.login&#39;, &#39;uses&#39; &#x3D;&gt; &#39;App\\Http\\Controllers\\AuthController@login&#39;]);\n            $api-&gt;get(&#39;me&#39;, [&#39;as&#39; &#x3D;&gt; &#39;auth.me&#39;, &#39;uses&#39; &#x3D;&gt; &#39;App\\Http\\Controllers\\AuthController@me&#39;]);\n            $api-&gt;post(&#39;refresh&#39;, [&#39;as&#39; &#x3D;&gt; &#39;auth.refresh&#39;, &#39;uses&#39; &#x3D;&gt; &#39;App\\Http\\Controllers\\AuthController@refresh&#39;]);\n            $api-&gt;post(&#39;logout&#39;, [&#39;as&#39; &#x3D;&gt; &#39;auth.logout&#39;, &#39;uses&#39; &#x3D;&gt; &#39;App\\Http\\Controllers\\AuthController@logout&#39;]);\n            $api-&gt;put(&#39;reset-pwd&#39;, [&#39;as&#39; &#x3D;&gt; &#39;auth.reset-pwd&#39;, &#39;uses&#39; &#x3D;&gt; &#39;App\\Http\\Controllers\\AuthController@resetPwd&#39;]);\n        &#125;);\n\n        &#x2F;&#x2F; 系统\n        $api-&gt;group([&#39;prefix&#39; &#x3D;&gt; &#39;sys&#39;], function () use ($api) &#123;\n            &#x2F;&#x2F; 当前用户能看到的菜单与拥有的权限(别名)\n            $api-&gt;get(&#39;menu&#39;, [&#39;as&#39; &#x3D;&gt; &#39;sys.menu&#39;, &#39;uses&#39; &#x3D;&gt; &#39;App\\Http\\Controllers\\System\\AdminController@menu&#39;]);\n\n            &#x2F;&#x2F; 系统资源\n            $api-&gt;resource(&#39;permissions&#39;, &#39;App\\Http\\Controllers\\System\\PermissionController&#39;, [&#39;names&#39; &#x3D;&gt; &#39;sys.permissions&#39;]);\n            $api-&gt;resource(&#39;roles&#39;, &#39;App\\Http\\Controllers\\System\\RoleController&#39;, [&#39;names&#39; &#x3D;&gt; &#39;sys.roles&#39;]);\n            $api-&gt;resource(&#39;admins&#39;, &#39;App\\Http\\Controllers\\System\\AdminController&#39;, [&#39;names&#39; &#x3D;&gt; &#39;sys.admins&#39;]);\n        &#125;);\n\n        ...\n    &#125;);\n&#125;);\n所有控制器都需要完整的命名空间，不支持为群组配置命名空间\n\n异常定义异常Dingo已经定义了接口场景下常用的异常，所以相关异常可以继承\\Dingo\\Api\\Exception\\下的异常。例如：\nclass UpdateResourceFailedException extends \\Dingo\\Api\\Exception\\UpdateResourceFailedException\n&#123;\n    protected $message &#x3D; &#39;更新失败&#39;;\n\n    public function __construct($message &#x3D; null, $errors &#x3D; null, \\Exception $previous &#x3D; null, $headers &#x3D; [], $code &#x3D; 0) &#123;\n        $message &#x3D; $message ?? $this-&gt;getMessage();\n        parent::__construct($message, $errors, $previous, $headers, $code);\n    &#125;\n&#125;\n自定义异常响应Dingo会先于Laravel自带的Handle获取Symfony\\Component\\HttpKernel\\Exception，所以在系统Handle::render()中处理不了这些异常。需要这样：\nclass AppServiceProvider extends ServiceProvider\n&#123;\n    &#x2F;**\n     * Register any application services.\n     *\n     * @return void\n     *&#x2F;\n    public function register()\n    &#123;\n        &#x2F;&#x2F; 优化显示验证异常\n        app(&#39;Dingo\\Api\\Exception\\Handler&#39;)-&gt;register(function (ValidationException $exception) &#123;\n            $error &#x3D; $exception-&gt;validator-&gt;errors()-&gt;first();\n            throw new ValidationHttpException($error);\n        &#125;);\n    &#125;\n\n    ...\nTransformers目前通过Eloquent ORM的$casts属性来自动转化字段类型，还没复杂的需求需要用到Transformers。\nJWT安装Laravel 5.5以上需要使用1.0.0版本\ncomposer require &quot;tymon&#x2F;jwt-auth:1.0.0-rc.4.1&quot;\n在config/app.php中手动注册Provider\n&#39;providers&#39; &#x3D;&gt; [\n\n    ...\n\n    Tymon\\JWTAuth\\Providers\\LaravelServiceProvider::class,\n]\n配置发布配置\nphp artisan vendor:publish --provider&#x3D;&quot;Tymon\\JWTAuth\\Providers\\LaravelServiceProvider&quot;\n生成密钥(可选)\nphp artisan jwt:secret\n配置ENV\n# JWT Oauth\nJWT_SECRET&#x3D;F5C5Qodnaa78PGFTFGhWgt7cNaHCOcXTI6SdtfuCfjHpotu7uwmlTy8HlbvsXeNt #64位密钥\nJWT_TTL&#x3D;1440 #Token过期时间\n\n使用验证定义一个控制器基类，在构造函数中指定验证中间件即可。\nclass Controller extends BaseController\n&#123;\n    use AuthorizesRequests, DispatchesJobs, ValidatesRequests, Helpers;\n\n    &#x2F;**\n     * Create a new AuthController instance.\n     *\n     * @return void\n     *&#x2F;\n    public function __construct()\n    &#123;\n        if (needAuth()) &#123; &#x2F;&#x2F; 助手函数，开发环境不验证Token\n            $this-&gt;middleware(&#39;auth:api&#39;, [&#39;except&#39; &#x3D;&gt; [&#39;login&#39;]]);\n        &#125;\n    &#125;\n&#125;\n之后所有路由到此控制器子类的请求必须带有Authorization头，值为Bearer $token才能通过检验。\n只有继承这个基类的控制器才会进行检验，如果不是其子类需要在路由中指定中间件，例如上面路由中`dev-logs`的例子。\n\n验证控制器class AuthController extends Controller\n&#123;\n    public function login(LoginRequest $request)\n    &#123;\n        $credentials &#x3D; $request-&gt;only([&#39;email&#39;, &#39;password&#39;]);\n\n        $auth &#x3D; auth();\n        if (!$token &#x3D; $auth-&gt;attempt($credentials)) &#123;\n            return response()-&gt;json([&#39;error&#39; &#x3D;&gt; &#39;Unauthorized&#39;, &#39;status_code&#39; &#x3D;&gt; 401], 401);\n        &#125;\n\n        return $this-&gt;respondWithToken($token);\n    &#125;\n\n    public function me()\n    &#123;\n        return response()-&gt;json(auth()-&gt;user());\n    &#125;\n\n    public function logout()\n    &#123;\n        auth()-&gt;logout();\n\n        return response()-&gt;json([&#39;message&#39; &#x3D;&gt; &#39;Successfully logged out&#39;]);\n    &#125;\n    \n    public function refresh()\n    &#123;\n        &#x2F;** @noinspection PhpUndefinedMethodInspection *&#x2F;\n        return $this-&gt;respondWithToken(auth()-&gt;refresh());\n    &#125;\n\n    public function resetPwd(ResetPwdRequest $request)\n    &#123;\n        $oldPassword &#x3D; $request-&gt;get(&#39;old_password&#39;);\n        $newPassword &#x3D; $request-&gt;get(&#39;new_password&#39;);\n\n        &#x2F;&#x2F; 检查旧密码\n        $admin &#x3D; auth()-&gt;user();\n        if (!password_verify($oldPassword, $admin-&gt;password)) &#123;\n            throw new AuthenticationException(&#39;密码错误&#39;);\n        &#125;\n\n        &#x2F;&#x2F; 更新密码\n        $admin-&gt;update([\n            &#39;password&#39; &#x3D;&gt; password_hash($newPassword, PASSWORD_DEFAULT)\n        ]);\n\n        return success();\n    &#125;\n    \n    protected function respondWithToken($token)\n    &#123;\n        &#x2F;** @noinspection PhpUndefinedMethodInspection *&#x2F;\n        return $this-&gt;response-&gt;array([\n            &#39;access_token&#39; &#x3D;&gt; $token,\n            &#39;token_type&#39; &#x3D;&gt; &#39;bearer&#39;,\n            &#39;expires_in&#39; &#x3D;&gt; auth()-&gt;factory()-&gt;getTTL() * 60\n        ])-&gt;withHeader(&#39;Authorization&#39;, $token);\n    &#125;\n&#125;\n\nSwagger这里采用l5-swagger扩展，集成了swagger-ui（使用json配置的文档系统）和php-swagger(使用代码注释生成json配置)。\n安装composer require &quot;darkaonline&#x2F;l5-swagger:5.8.*&quot;\n在config/app.php中手动注册Provider\n&#39;providers&#39; &#x3D;&gt; [\n\n    ...\n\n    L5Swagger\\L5SwaggerServiceProvider::class,\n]\n配置发布配置与视图模板\nphp artisan vendor:publish --provider &quot;L5Swagger\\L5SwaggerServiceProvider&quot;\n修改配置config/l5-swagger.php\nreturn [\n    &#39;api&#39; &#x3D;&gt; [\n        &#x2F;*\n        |--------------------------------------------------------------------------\n        | Edit to set the api&#39;s title\n        |--------------------------------------------------------------------------\n        *&#x2F;\n\n        &#39;title&#39; &#x3D;&gt; &#39;后台Api文档&#39;, # 文档页面的标题\n    ],\n\n    &#39;routes&#39; &#x3D;&gt; [\n        &#x2F;*\n        |--------------------------------------------------------------------------\n        | Route for accessing api documentation interface\n        |--------------------------------------------------------------------------\n        *&#x2F;\n\n        &#39;api&#39; &#x3D;&gt; &#39;api&#x2F;docs&#39;, # 文档页面的路由\n\n        &#x2F;*\n        |--------------------------------------------------------------------------\n        | Route for accessing parsed swagger annotations.\n        |--------------------------------------------------------------------------\n        *&#x2F;\n\n        &#39;docs&#39; &#x3D;&gt; &#39;docs&#39;, # 路由别名\n\n        ...\n在.env中添加\n# Swagger\nSWAGGER_VERSION&#x3D;3.0 # php-swagger的版本，不同版本注释写法不同！\nL5_SWAGGER_GENERATE_ALWAYS&#x3D;true # 自动生成文档json，不要在生产环境打开此项\n最后记得将文档的json配置加入.gitignore\n...\n&#x2F;storage&#x2F;api-docs&#x2F;api-docs.json\n\n编写Swagger注释这里不详细介绍php-swagger的注释语法，只放出几个例子：\n\nswagger.php \n&lt;?php\n\n&#x2F;**\n *\n * @OA\\OpenApi(\n *     security&#x3D;&#123;\n *         &#123;\n *             &quot;Bearer&quot;:&#123;&#125;\n *         &#125;\n *     &#125;,\n *     @OA\\Server(\n *         url&#x3D;L5_SWAGGER_CONST_HOST\n *     )\n * )\n *\n * @OA\\Info(\n *     version&#x3D;&quot;1.0&quot;,\n *     title&#x3D;&quot;小程序后台Api文档&quot;,\n *     @OA\\Contact(\n *         name&#x3D;&quot;火星救援网络科技有限公司&quot;,\n *         url&#x3D;&quot;http:&#x2F;&#x2F;www.example.com&#x2F;&quot;\n *     )\n * )\n *\n * @OA\\SecurityScheme(\n *     securityScheme&#x3D;&quot;Bearer&quot;,\n *     type&#x3D;&quot;apiKey&quot;,\n *     name&#x3D;&quot;Authorization&quot;,\n *     in&#x3D;&quot;header&quot;,\n * )\n *\n *&#x2F;\nswagger-tags.php\n&#x2F;**\n * @OA\\Tag(\n *     name&#x3D;&quot;Auth&quot;,\n *     description&#x3D;&quot;验证模块&quot;\n * )\n *\n * @OA\\Tag(\n *     name&#x3D;&quot;System.Permission&quot;,\n *     description&#x3D;&quot;系统模块中的权限管理&quot;\n * )\n *\n * @OA\\Tag(\n *     name&#x3D;&quot;System.Role&quot;,\n *     description&#x3D;&quot;系统模块中的角色管理&quot;\n * )\n *\n * @OA\\Tag(\n *     name&#x3D;&quot;System.Admin&quot;,\n *     description&#x3D;&quot;系统模块中的用户管理&quot;\n * )\n *&#x2F;\nAuthController.php\nclass AuthController extends Controller\n&#123;\n    &#x2F;**\n     * @OA\\Post(\n     *     path&#x3D;&quot;&#x2F;auth&#x2F;login&quot;,\n     *     summary&#x3D;&quot;获取凭证&quot;,\n     *     tags&#x3D;&#123;&quot;Auth&quot;&#125;,\n     *     description&#x3D;&quot;通过账号密码获取Access Token&quot;,\n     *     @OA\\Parameter(\n     *         name&#x3D;&quot;email&quot;,\n     *         in&#x3D;&quot;query&quot;,\n     *         required&#x3D;true,\n     *         @OA\\Schema(\n     *             type&#x3D;&quot;string&quot;\n     *         ),\n     *         example&#x3D;&quot;test@example.com&quot;,\n     *         description&#x3D;&quot;邮箱&quot;\n     *     ),\n     *     @OA\\Parameter(\n     *         name&#x3D;&quot;password&quot;,\n     *         in&#x3D;&quot;query&quot;,\n     *         required&#x3D;true,\n     *         @OA\\Schema(\n     *             type&#x3D;&quot;string&quot;\n     *         ),\n     *         description&#x3D;&quot;密码&quot;\n     *     ),\n     *     @OA\\Response(\n     *         response&#x3D;200,\n     *         description&#x3D;&quot;返回凭证&quot;,\n     *         ref&#x3D;&quot;#&#x2F;components&#x2F;schemas&#x2F;Token&quot;\n     *     ),\n     *     @OA\\Response(\n     *         response&#x3D;401,\n     *         description&#x3D;&quot;账号不存在或密码错误&quot;\n     *     )\n     * )\n     *\n     * @param LoginRequest $request\n     * @return \\Illuminate\\Http\\JsonResponse\n     *&#x2F;\n    public function login(LoginRequest $request) &#123;\n         ...\n\n注释可以写在项目任意php文件中，建议是有归属语义的注释写在归属代码上（例如接口注释写在控制器中，模型注释写在模型中），公共语义的注释一样单独写在一个php文件中。\n\n生成文档jsonphp artisan l5-swagger:generate\n最终效果访问上面配置的路由地址\n\n点击Authorize按钮，value填入Authorization头的值即可在生产环境的文档页面请求接口。\n\n注释可以写在项目任意php文件中，建议是有归属语义的注释写在归属代码上（例如接口注释写在控制器中，模型注释写在模型中），公共语义的注释一样单独写在一个php文件中。\n\n结语至此，三个轮子在入门应用就介绍完了，这些轮子可以让你更快速的搭建API，专注于业务逻辑。\nReferences[0] dingo/api[1] tymon/jwt-auth[2] swagger-api/swagger-ui\n","slug":"Laravel5-8-Dingo-JWT-Swagger-开发API","date":"2019-06-03T06:03:45.000Z","categories_index":"php","tags_index":"laravel","author_index":"CloudyCity"},{"id":"a2a2c6e710e3fc9812c7982541e8d115","title":"Hexo提高加载速度","content":"Hexo作为纯静态博客最大的优点就是快，但要真正的快起来你可能需要做这些事情。\n\n\n托管平台（可选）直接在Coding等国内平台托管Page项目，修改国内线路解析。(可参照Github Hexo的百度收录问题)Coding绑定了域名需定期申请SSL证书，所以本博放弃此项。\nCDN加速这里只是针对第三方静态文件的加速，修改Next主题配置文件_config.yml如下：\nvendors:\n  # Internal path prefix. Please do not edit it.\n  _internal: lib\n\n  # Internal version: 2.1.3\n  jquery: https:&#x2F;&#x2F;cdn.bootcss.com&#x2F;jquery&#x2F;2.1.3&#x2F;jquery.min.js\n\n  # Internal version: 2.1.5\n  # See: http:&#x2F;&#x2F;fancyapps.com&#x2F;fancybox&#x2F;\n  fancybox: https:&#x2F;&#x2F;cdn.bootcss.com&#x2F;fancybox&#x2F;2.1.5&#x2F;jquery.fancybox.min.js # https:&#x2F;&#x2F;cdn.bootcss.com&#x2F;fancybox&#x2F;2.1.5&#x2F;jquery.fancybox.pack.js\n  fancybox_css: https:&#x2F;&#x2F;cdn.bootcss.com&#x2F;fancybox&#x2F;2.1.5&#x2F;jquery.fancybox.min.css\n\n  # Internal version: 1.0.6\n  # See: https:&#x2F;&#x2F;github.com&#x2F;ftlabs&#x2F;fastclick\n  fastclick: https:&#x2F;&#x2F;cdn.bootcss.com&#x2F;fastclick&#x2F;1.0.6&#x2F;fastclick.min.js\n\n  # Internal version: 1.9.7\n  # See: https:&#x2F;&#x2F;github.com&#x2F;tuupola&#x2F;jquery_lazyload\n  lazyload: https:&#x2F;&#x2F;cdn.bootcss.com&#x2F;jquery_lazyload&#x2F;1.9.7&#x2F;jquery.lazyload.min.js\n\n  # Internal version: 1.2.1\n  # See: http:&#x2F;&#x2F;VelocityJS.org\n  velocity: https:&#x2F;&#x2F;cdn.bootcss.com&#x2F;velocity&#x2F;1.2.1&#x2F;velocity.min.js\n\n  # Internal version: 1.2.1\n  # See: http:&#x2F;&#x2F;VelocityJS.org\n  velocity_ui: https:&#x2F;&#x2F;cdn.bootcss.com&#x2F;velocity&#x2F;1.2.1&#x2F;velocity.ui.min.js\n\n  # Internal version: 0.7.9\n  # See: https:&#x2F;&#x2F;faisalman.github.io&#x2F;ua-parser-js&#x2F;\n  ua_parser:\n\n  # Internal version: 4.6.2\n  # See: http:&#x2F;&#x2F;fontawesome.io&#x2F;\n  fontawesome: https:&#x2F;&#x2F;cdn.bootcss.com&#x2F;font-awesome&#x2F;4.6.2&#x2F;css&#x2F;font-awesome.min.css\n\n  # Internal version: 1\n  # https:&#x2F;&#x2F;www.algolia.com\n  algolia_instant_js:\n  algolia_instant_css:\n\n  # Internal version: 1.0.2\n  # See: https:&#x2F;&#x2F;github.com&#x2F;HubSpot&#x2F;pace\n  # Or use direct links below:\n  # pace: &#x2F;&#x2F;cdn.bootcss.com&#x2F;pace&#x2F;1.0.2&#x2F;pace.min.js\n  # pace_css: &#x2F;&#x2F;cdn.bootcss.com&#x2F;pace&#x2F;1.0.2&#x2F;themes&#x2F;blue&#x2F;pace-theme-flash.min.css\n  pace: https:&#x2F;&#x2F;cdn.bootcss.com&#x2F;pace&#x2F;1.0.2&#x2F;pace.min.js\n  pace_css: https:&#x2F;&#x2F;cdn.bootcss.com&#x2F;pace&#x2F;1.0.2&#x2F;themes&#x2F;blue&#x2F;pace-theme-flash.min.css\n\n针对自定义的静态文件(main.min.js和main.min.css)需要自行使用融合CDN，国内都需要备案域名，本博的`.me`域名没有备案资质，但我不太想将静态文件放到其他域名，所以放弃加速这类文件。\n\n压缩文件hexo-neat安装npm install hexo-neat --save\n\n配置修改项目_config.yml。\nneat_enable: true\nneat_html:\n  enable: true\n  exclude:\nneat_css:\n  enable: false\n  exclude:\n    - &#39;**&#x2F;*.min.css&#39;\nneat_js:\n  enable: false\n  mangle: true\n  output:\n  compress:\n  exclude:\n    - &#39;**&#x2F;*.min.js&#39;\n后面会使用`gulp`合并与压缩js与css，所以此处只用`neat`压缩了html。如果你不想使用合并js与css，此处可以打开`neat_js`、`neat_css`。\n\ngulpgulp是自动化构建工具，这里主要是用来合并、压缩js与css。\n构建配置Next主题目录自带了gulpfile.coffee，这里直接修改：\nfs &#x3D; require(&#39;fs&#39;)\npath &#x3D; require(&#39;path&#39;)\ngulp &#x3D; require(&#39;gulp&#39;)\njshint &#x3D; require(&#39;gulp-jshint&#39;) # js语法检查\njslish &#x3D; require(&#39;jshint-stylish&#39;) # js语法检查输出美化\nstylint &#x3D; require(&#39;gulp-stylint&#39;) # stylus语法检查\nstylish &#x3D; require(&#39;stylint-stylish&#39;) # stylus语法检查输出美化\nyaml &#x3D; require(&#39;js-yaml&#39;)\nconcat &#x3D; require(&#39;gulp-concat&#39;) # js合并\nuglify &#x3D; require(&quot;gulp-uglify&quot;) # js压缩\nconcatCss &#x3D; require(&#39;gulp-concat-css&#39;) # css合并\ncleanCss &#x3D; require(&#39;gulp-clean-css&#39;) # css压缩\n\n# js语法检查 https:&#x2F;&#x2F;jshint.com&#x2F;docs&#x2F;options&#x2F;\ngulp.task &#39;lint:js&#39;, -&gt;\n  return gulp.src path.join(__dirname, &#39;.&#x2F;source&#x2F;js&#x2F;**&#x2F;*.js&#39;)\n    .pipe jshint()\n    .pipe jshint.reporter()\n\n# stylus语法检查 https:&#x2F;&#x2F;github.com&#x2F;SimenB&#x2F;stylint\ngulp.task &#39;lint:stylus&#39;, -&gt;\n  return gulp.src path.join(__dirname, &#39;&#x2F;source&#x2F;css&#x2F;**&#x2F;*.styl&#39;)\n    .pipe stylint(&#123;config: path.join(__dirname, &#39;.stylintrc&#39;)&#125;)\n    .pipe stylint.reporter(stylish)\n\n# 配置文件检验\ngulp.task &#39;validate:config&#39;, (cb) -&gt;\n  themeConfig &#x3D; fs.readFileSync path.join(__dirname, &#39;_config.yml&#39;)\n  try\n    yaml.safeLoad(themeConfig)\n    cb()\n  catch error\n    cb new Error(error)\n\n# 语言文件检验\ngulp.task &#39;validate:languages&#39;, (cb) -&gt;\n  languagesPath &#x3D; path.join __dirname, &#39;languages&#39;\n  languages &#x3D; fs.readdirSync languagesPath\n  errors &#x3D; []\n\n  for lang in languages\n    languagePath &#x3D; path.join languagesPath, lang\n    try\n      yaml.safeLoad fs.readFileSync(languagePath), &#123;\n        filename: path.relative(__dirname, languagePath)\n      &#125;\n    catch error\n      errors.push error\n\n  if errors.length &#x3D;&#x3D; 0\n    cb()\n  else\n    cb(errors)\n\n# 合并压缩js\n# gulp.task &#39;minify:js&#39;, [&#39;lint:js&#39;], (cb) -&gt;\ngulp.task &#39;minify:js&#39;, (cb) -&gt;\n  return gulp.src([\n    path.join(__dirname, &#39;source&#x2F;js&#x2F;src&#x2F;utils.js&#39;),\n    path.join(__dirname, &#39;source&#x2F;js&#x2F;src&#x2F;motion.js&#39;),\n    path.join(__dirname, &#39;source&#x2F;js&#x2F;src&#x2F;gitment.browser.js&#39;),\n    path.join(__dirname, &#39;source&#x2F;js&#x2F;src&#x2F;bootstrap.js&#39;),\n    path.join(__dirname, &#39;source&#x2F;js&#x2F;src&#x2F;scrollspy.js&#39;),\n    path.join(__dirname, &#39;source&#x2F;js&#x2F;src&#x2F;post-details.js&#39;),\n  ]).pipe concat(&#39;main.min.js&#39;)\n    .pipe uglify()\n    .pipe gulp.dest path.join __dirname, &#39;..&#x2F;..&#x2F;public&#x2F;js&#39;\n\n# 合并压缩js\n# gulp.task &#39;minify:css&#39;, [&#39;lint:stylus&#39;], (cb) -&gt;\ngulp.task &#39;minify:css&#39;, (cb) -&gt;\n  return gulp.src([\n    path.join(__dirname, &#39;..&#x2F;..&#x2F;public&#x2F;css&#x2F;main.css&#39;),\n    path.join(__dirname, &#39;source&#x2F;css&#x2F;src&#x2F;gitment.css&#39;),\n  ]).pipe concat(&#39;main.min.css&#39;)\n    .pipe cleanCss()\n    .pipe gulp.dest path.join __dirname, &#39;..&#x2F;..&#x2F;public&#x2F;css&#39;\n\n# 执行\ngulp.task &#39;default&#39;, [\n  &#39;validate:config&#39;,\n  &#39;validate:languages&#39;\n  &#39;minify:js&#39;,\n  &#39;minify:css&#39;,\n]\n`Next`主题默认的`gulpfile.coffee`只是进行规范检查，不过此处修改后默认关闭，按需开启。\n合并js时尽量保持模板中引入的顺序，避免不必要错误。\n在项目根目录下新建`gulpfile.js`：\nrequire(&#39;coffeescript&#x2F;register&#39;)\nrequire(&#39;.&#x2F;themes&#x2F;next&#x2F;gulpfile.coffee&#39;)\n#### 安装相关依赖\n安装构建任务用到的依赖。\nnpm install gulp -g\nnpm install coffeescript --save-dev # 用于在gulpfile.js中引入gulpfile.coffee\nnpm install gulp-clean-css --save-dev # css压缩\nnpm install gulp-concat --save-dev # js合并\nnpm install gulp-concat-css --save-dev # css合并\nnpm install gulp-jshint --save-dev # js语法检查\nnpm install gulp-stylint --save-dev # css语法检查\nnpm install gulp-uglify --save-dev # js压缩\nnpm install jshint --save-dev # js压缩核心\nnpm install jshint-stylish --save-dev # js语法检查输出美化\nnpm install stylint-stylish --save-dev # css语法检查输出美化\n#### 执行构建\n项目根目录执行`gulp`：\n\n\n构建输出合并与压缩后的文件：\n\n更新模板修改themes/next/layout/_partials/head.swig:\n&lt;link href&#x3D;&quot;&#123;&#123; font_awesome_uri &#125;&#125;&quot; rel&#x3D;&quot;stylesheet&quot; type&#x3D;&quot;text&#x2F;css&quot; &#x2F;&gt;\n\n\n &lt;link href&#x3D;&quot;&#123;&#123; url_for(theme.css) &#125;&#125;&#x2F;main.css?v&#x3D;&#123;&#123; theme.version &#125;&#125;&quot; rel&#x3D;&quot;stylesheet&quot; type&#x3D;&quot;text&#x2F;css&quot; &#x2F;&gt;\t&lt;link href&#x3D;&quot;&#123;&#123; url_for(theme.css) &#125;&#125;&#x2F;main.min.css?v&#x3D;&#123;&#123; theme.version &#125;&#125;&quot; rel&#x3D;&quot;stylesheet&quot; type&#x3D;&quot;text&#x2F;css&quot; &#x2F;&gt;\n\n\n &#123;% if theme.favicon.apple_touch_icon %&#125;\t&#123;% if theme.favicon.apple_touch_icon %&#125;\n\n修改themes/next/layout/_layout.swig:\n&#123;% include &#39;_scripts&#x2F;vendors.swig&#39; %&#125;\n  &lt;script type&#x3D;&quot;text&#x2F;javascript&quot; src&#x3D;&quot;&#123;&#123; url_for(theme.js) &#125;&#125;&#x2F;main.min.js?v&#x3D;&#123;&#123; theme.version &#125;&#125;&quot;&gt;&lt;&#x2F;script&gt;\n  &#123;% include &#39;_scripts&#x2F;commons.swig&#39; %&#125;\t  &#123;% include &#39;_scripts&#x2F;commons.swig&#39; %&#125;\n\n然后在各模板中将引入合并前静态文件的部分注释掉，这里不详细列出，只放出一个例子：\n\n完成后重新部署：\nhexo g &amp;&amp; gulp &amp;&amp; hexo d\n\n引用效果：\n\n图片懒加载可以显著加速文章页。\n安装插件:\nnpm install hexo-lazyload-image --save\n\n修改项目配置文件_config.yml:\n# 图片懒加载\nlazyload:\n  enable: true \n  onlypost: false\n  loadingImg: &#x2F;images&#x2F;loading&#x2F;loading.gif #如果不填写图片则使用默认的图片\n\n精简功能功能涉及多个请求时会比较明显得拖慢加载速度，例如不蒜子、DaoVice，要考量这些功能是否真(hua)的(er)需(bu)要(shi)。（像我已经关掉了DaoVice，只留着不蒜子计算站点UV）\n最终效果首页\n\n文章页\n\n剩下的瓶颈主要是Gitment、不蒜子。\n不同网络环境下的加速效果也会不同，以上效果是我在家中的加速效果。在公司的加速效果就差了很多。","slug":"Hexo提高加载速度","date":"2019-05-01T18:46:17.000Z","categories_index":"新手村","tags_index":"hexo","author_index":"CloudyCity"},{"id":"95de16e3846c90a95f98f3b0e459fb6c","title":"Github Hexo的百度收录问题","content":"Github屏蔽了百度的爬虫，所以部署在Github Page的Hexo无法被百度收录，如果你绑定了自定义域名的话，这里有几个曲线救国方案。\n\n\n私有主机将博客部署到自己的机器上。\n对象存储将博客上传到对象存储。\n国内托管在国内的代码托管平台部署Hexo，这里推荐Coding，流程与部署到Github基本一致。\n分线路解析以Github Page + Coding Page 为例。\n部署多项目Coding的项目只需要master分支，Hexo的_config.yml增加仓库地址，然后执行hexo d便可以同时部署到两个项目。\n\nDNS解析注意：如果要开启HTTPS，解析之前要先确保Coding Page的SSL证书已经申请通过，后面会说明原因。\n默认解析到coding.me，境外解析到github.io。\n\n然后百度的爬虫在大陆就会访问到Coding Page，就能正常收录了。\n`Coding Page`的一大缺点是SSL证书每三个月需要手动申请一次，并且每次申请时需要先将境外指向`Github Page`的规则先暂停（因为`Coding`的认证服务器在境外）。\n\n总结多线路解析看上去是比较优雅的解决方案。但是如果要开启HTTPS的话，相对于GitHub Page的自动延期SSL证书，Coding Page需要定期手动申请确实比较麻烦。至于其他国内的托管平台，Gitcafe目前无法访问，Gitee Page没有开启HTTPS的选项。\n","slug":"Github-Hexo的百度收录问题","date":"2019-04-28T09:54:27.000Z","categories_index":"新手村","tags_index":"hexo","author_index":"CloudyCity"},{"id":"e5beee7d760d79952b7d1c5a76907b4e","title":"GitHub Hexo绑定域名","content":"火星救援，刻不容缓！\n\n\n域名比较流行的是.me顶级域名，简洁直观，不过没有备案资质。这里我用的就是cloudycity.me。\n购买关于购买，这里有个非常赞的域名注册商比价网站哪煮迷。我是在西部数码注册的，首年20续费98。\n解析添加两条CNAME规则将@与www都指向Github page地址：\n\nGithub添加CNAME文件在source分支中的source目录下新建一个CNAME文件，内容为绑定的域名：\n\n然后重新部署博客。\n申请HTTPS到仓库设置中的Github Page子项中勾选Enforce HTTPS\n\n添加`CNAME`文件之后，项目设置中会自动识别域名。刚识别完域名的1分钟内还无法勾选`Enforce HTTPS`，勾选之后要等几个小时才能生效。\n\n后续更新相关配置如果你的博客有插件涉及域名要记得修改，例如：\n\ngitment插件用到的授权应用需要重新创建，详见hexo使用github issue存放文章与评论\n\nNext主题的文章访问计数需要去leancloud的项目添加安全域名\n\n\n\n","slug":"GitHub-Hexo绑定域名","date":"2019-04-28T08:55:14.000Z","categories_index":"新手村","tags_index":"hexo","author_index":"CloudyCity"},{"id":"ad23f6f0a2b244ea9443c9602b422b7a","title":"使用satis搭建私有Composer库","content":"人类的本质是复读机。\n\n最近整理项目，将一些复用的轮子封装成Composer组件，但不便于放在packgist.org，所以需要搭建私有的Composer库。\n开发composer组件以之前的一遍文章 Laravel/Lumen 扩展DB Builder语法 的功能为例。\n\n在组件项目（这里称为A项目）根目录创建composer.json。\n&#123;\n    &quot;name&quot;: &quot;xuyang&#x2F;laravel-builder-ext&quot;,\n    &quot;type&quot;: &quot;library&quot;,\n    &quot;description&quot;: &quot;扩展Laravel DB Builder的查询语法&quot;,\n    &quot;keywords&quot;: [&quot;laravel&quot;, &quot;db&quot;, &quot;builder&quot;, &quot;extend&quot;],\n    &quot;license&quot;: &quot;MIT&quot;,\n    &quot;authors&quot;: [\n        &#123;\n            &quot;name&quot;: &quot;cloudycity&quot;,\n            &quot;email&quot;: &quot;cloudycity@foxmail.com&quot;\n        &#125;\n    ],\n    &quot;minimum-stability&quot;: &quot;dev&quot;,\n    &quot;require&quot;: &#123;\n        &quot;php&quot;: &quot;&gt;&#x3D;5.4.0&quot;,\n        &quot;laravel&#x2F;framework&quot; : &quot;^5.2&quot;\n    &#125;,\n    &quot;require-dev&quot;: &#123;\n        &quot;phpunit&#x2F;phpunit&quot;: &quot;4.*&quot;\n    &#125;,\n    &quot;autoload&quot;: &#123;\n        &quot;psr-4&quot;: &#123; &quot;Xuyang\\\\LaravelBuilderExt\\\\&quot;: &quot;src&#x2F;&quot; &#125;\n    &#125;,\n    &quot;extra&quot;: &#123;\n        &quot;branch-alias&quot;: &#123;\n            &quot;dev-master&quot;: &quot;1.0.0-dev&quot;\n        &#125;\n    &#125;\n&#125;\n最后传上gitlab。\n搭建satis并索引组件安装satis使用composer (方法一)$ cd &#x2F;data&#x2F;www&#x2F;\n$ composer create-project composer&#x2F;satis --keep-vcs\n\n使用docker (方法二)$ docker pull composer&#x2F;satis\n\n配置satis进入到satis项目根目录下创建satis.json。\n&#123;\n    &quot;name&quot;: &quot;私有Composer库&quot;,\n    &quot;homepage&quot;: &quot;http:&#x2F;&#x2F;satis.example.com&quot;,\n    &quot;repositories&quot;: [\n        &#123; &quot;type&quot;: &quot;git&quot;, &quot;url&quot;: &quot;ssh:&#x2F;&#x2F;git@gitlab.example.com&#x2F;sub&#x2F;laravel-builder-ext.git&quot; &#125;\n    ],\n    &quot;require&quot;: &#123;\n        &quot;company&#x2F;package&quot;: &quot;dev-master&quot;\n    &#125;\n&#125;\n\n创建索引使用composer (方法一)$ php bin&#x2F;satis build satis.json .&#x2F;web-v\n\n这里的web就是索引输出目录。\n使用docker (方法二)$ docker run --rm -it -v &#x2F;build:&#x2F;build composer&#x2F;satis\n\n自动索引最简单粗暴的方法是用crontab，但这里推荐使用GitLab Web Hook:\n\n在satis项目创建一个接口执行创建索引的操作。\n\n\n&lt;?php\n\n$valid_token &#x3D; &#39;3.1415926535857&#39;; &#x2F;&#x2F; GitLab web hook的token\n$valid_ip &#x3D; [&#39;127.0.0.1&#39;]; &#x2F;&#x2F; GitLab服务器IP\n\n$client_token &#x3D; $_SERVER[&#39;HTTP_X_GITLAB_TOKEN&#39;];\n$client_ip &#x3D; $_SERVER[&#39;REMOTE_ADDR&#39;];\n\nif ($client_token !&#x3D;&#x3D; $valid_token) die(&#39;Token mismatch!&#39;);\nif (!in_array($client_ip, $valid_ip)) die(&#39;Ip mismatch!&#39;);\n\n$ouptut &#x3D; [];\nexec(&quot;cd &#x2F;data&#x2F;www&#x2F;satis&#x2F;; php bin&#x2F;satis build satis.json .&#x2F;web -v 2&gt;&amp;1&quot;, $output); &#x2F;&#x2F; 创建索引的命令\nvar_dump($output);\n\n\n在组件的GitLab仓库中增加Web Hook\n\n\n每次组件推送新提交之后都会触发钩子请求satis创建索引。\n配置Nginx (可选)将satis.json中的homepage指向索引输出目录，然后就可以访问satis的界面。\n\n添加部署密钥 (可选)如果satis所在机器没有权限拉取gitlab仓库，需要生成key并加入到gitlab的Deploy Keys(只读)中。\n\n从satis引入composer组件修改使用A项目组件的项目（这里称B项目）的composer.json，加上私有库源：\n    ...\n    &quot;config&quot;: &#123;\n        &quot;preferred-install&quot;: &quot;dist&quot;,\n        &quot;secure-http&quot;: false \n    &#125;,\n    &quot;repositories&quot;: [&#123;\n        &quot;type&quot;: &quot;composer&quot;,\n        &quot;url&quot;: &quot;http:&#x2F;&#x2F;satis.example.com&quot;\n    &#125;]\n&#125;\n`\"secure-http\": false`是可选项，当你的私有库地址不支持https时才需要加上。\n\n然后正常引入即可：\n\n\nReferences使用satis自建私有镜像\n","slug":"使用satis搭建私有Composer库","date":"2019-04-16T08:05:33.000Z","categories_index":"php","tags_index":"composer","author_index":"CloudyCity"},{"id":"16ed07eb79eb4256778e578efa799c1a","title":"如何更好的通过IDE代码检查","content":"我身边有很多同事都没有重视代码检查，每次看他们IDE右侧都是一边红黄棕交错的“线谱”，特别难受。让自己的代码通过IDE的检查，可以避免很多低级的错误。下面分享下如何更好地通过Intellij系列IDE的代码检查。\n\n\n目标是什么目标是无任何notice，包括英文的拼写检查。\n\n为什么要达成目标通过代码检查可以：\n\n一定程度上规范开发\n更容易发现bug，避免低级错误\n\n如何达成目标遵守必要规则至于判断【规则是否必要】的标准因人而异，但确定是【必要规则】就必须遵守，这是代码检查的意义。\n关闭不必要规则全局关闭不必要的检查规则，例如No data sources configured、SQL dialect detection等等，可以将其关闭。\n在Inspection Notice处按Alt+Enter打开Inspection setting：\n\n去掉勾：\n\n效果：\n\n单次忽略有些规则是必要的，但因为某些原因我们无法遵守。可以选择Suppress for statement，将会自动在Notice前加入一行注释告诉IDE忽略掉此处的检查。\n引导IDE某些场景规则是必要的，我们也遵守了，只是IDE没有get到仍标出Notice，这时候就需要想办法引导IDE去get到。\n添加注释以常见的闭包Notice为例，内部都会报warning：\n\n使用/** @var 变量类型 $var */声明\n\n添加助手文件IDE无法识别Laravel的Facade的静态调用方式\n\n这时候需要创建额外的助手文件ide-helper.php，里面存放类声明：\n\nIDE识别后：\n\nP.S. 助手文件本身是可以忽略检查，即选择suppress all for file项。\n拼写检查英文拼写检查的优先级比较低，但能遵守的话可以避免一些奇怪的命名\n使用下划线或驼峰通过检查\n将专有名词加入字典\n\n给随机字符串添加忽略注释\n\n\n导出/导入配置导出配置以备份、与团队成员共享\n\n","slug":"如何更好的通过IDE代码检查","date":"2019-04-12T10:14:54.000Z","categories_index":"新手村","tags_index":"","author_index":"CloudyCity"},{"id":"c1faf785f7bcfca48734b5774b3466cc","title":"Laravel/Lumen 扩展DB Builder语法","content":"截至5.6版本，Laravel的DB Builder都没有方法实现忽略插入与插入或更新（5.7版本新增updateOrInsert()）。除了自己封装多一层之外，还有一个更优雅的解决方案是对Builder语法进行扩展。\n\n\n扩展支持的语法这里要扩展的是三个常用的语法: \n\nINSERT IGNORE INTO\nREPLACE INTO\nINSERT INTO ... ON DUPLICATE KEY UPDATE\n\n扩展Builder类Laravel官方已经在Illuminate\\Database包中提供了扩展实例，需要创建自定义的Grammar、Builder、Connection类，然后由服务提供者注册。\n自定义Grammar&lt;?php\n\nnamespace App\\Library\\Database\\Query\\Grammars;\n\nuse Illuminate\\Database\\Query\\Grammars\\MySqlGrammar as Grammar;\nuse App\\Library\\Database\\Query\\MySqlBuilder as Builder;\n\nclass MySqlGrammar extends Grammar\n&#123;\n    &#x2F;**\n     * Compile a replace into statement into SQL.\n     *\n     * @link https:&#x2F;&#x2F;dev.mysql.com&#x2F;doc&#x2F;refman&#x2F;5.5&#x2F;en&#x2F;replace.html\n     *\n     * @param  \\App\\Library\\Database\\Query\\MySqlBuilder $query\n     * @param  array $values\n     * @return string\n     *&#x2F;\n    public function compileReplace(Builder $query, array $values)\n    &#123;\n        &#x2F;&#x2F; Essentially we will force every insert to be treated as a batch insert which\n        &#x2F;&#x2F; simply makes creating the SQL easier for us since we can utilize the same\n        &#x2F;&#x2F; basic routine regardless of an amount of records given to us to insert.\n        $table &#x3D; $this-&gt;wrapTable($query-&gt;from);\n\n        if (!is_array(reset($values))) &#123;\n            $values &#x3D; [$values];\n        &#125;\n\n        $columns &#x3D; $this-&gt;columnize(array_keys(reset($values)));\n\n        &#x2F;&#x2F; We need to build a list of parameter place-holders of values that are bound\n        &#x2F;&#x2F; to the query. Each insert should have the exact same amount of parameter\n        &#x2F;&#x2F; bindings so we will loop through the record and parameterize them all.\n        $parameters &#x3D; [];\n\n        foreach ($values as $record) &#123;\n            $parameters[] &#x3D; &#39;(&#39; . $this-&gt;parameterize($record) . &#39;)&#39;;\n        &#125;\n\n        $parameters &#x3D; implode(&#39;, &#39;, $parameters);\n\n        return &quot;REPLACE INTO $table ($columns) VALUES $parameters&quot;;\n    &#125;\n\n    &#x2F;**\n     * Compile an insert ignore statement into SQL.\n     *\n     * @link https:&#x2F;&#x2F;dev.mysql.com&#x2F;doc&#x2F;refman&#x2F;5.5&#x2F;en&#x2F;insert.html\n     *\n     * @param  \\App\\Library\\Database\\Query\\MySqlBuilder $query\n     * @param  array $values\n     * @return string\n     *&#x2F;\n    public function compileInsertIgnore(Builder $query, array $values)\n    &#123;\n        &#x2F;&#x2F; Essentially we will force every insert to be treated as a batch insert which\n        &#x2F;&#x2F; simply makes creating the SQL easier for us since we can utilize the same\n        &#x2F;&#x2F; basic routine regardless of an amount of records given to us to insert.\n        $table &#x3D; $this-&gt;wrapTable($query-&gt;from);\n\n        if (!is_array(reset($values))) &#123;\n            $values &#x3D; [$values];\n        &#125;\n\n        $columns &#x3D; $this-&gt;columnize(array_keys(reset($values)));\n\n        &#x2F;&#x2F; We need to build a list of parameter place-holders of values that are bound\n        &#x2F;&#x2F; to the query. Each insert should have the exact same amount of parameter\n        &#x2F;&#x2F; bindings so we will loop through the record and parameterize them all.\n        $parameters &#x3D; [];\n\n        foreach ($values as $record) &#123;\n            $parameters[] &#x3D; &#39;(&#39; . $this-&gt;parameterize($record) . &#39;)&#39;;\n        &#125;\n\n        $parameters &#x3D; implode(&#39;, &#39;, $parameters);\n\n        return &quot;INSERT IGNORE INTO $table ($columns) VALUES $parameters&quot;;\n    &#125;\n\n    &#x2F;**\n     * Compile an insert update statement into SQL.\n     *\n     * @link https:&#x2F;&#x2F;dev.mysql.com&#x2F;doc&#x2F;refman&#x2F;8.0&#x2F;en&#x2F;insert-on-duplicate.html\n     * @link https:&#x2F;&#x2F;gist.github.com&#x2F;RuGa&#x2F;5354e44883c7651fd15c\n     *\n     * @param  \\App\\Library\\Database\\Query\\MySqlBuilder $query\n     * @param  array $values\n     * @return string\n     *&#x2F;\n    public function compileInsertUpdate(Builder $query, array $values)\n    &#123;\n        &#x2F;&#x2F; Essentially we will force every insert to be treated as a batch insert which\n        &#x2F;&#x2F; simply makes creating the SQL easier for us since we can utilize the same\n        &#x2F;&#x2F; basic routine regardless of an amount of records given to us to insert.\n        $table &#x3D; $this-&gt;wrapTable($query-&gt;from);\n\n        $columnNames &#x3D; array_keys(reset($values));\n\n        $columns &#x3D; $this-&gt;columnize($columnNames);\n\n        $parameters &#x3D; implode(&#39;,&#39;, array_map(function ($row) &#123;\n            return &#39;(&#39; . $this-&gt;parameterize($row) . &#39;)&#39;;\n        &#125;, $values));\n\n        $updates &#x3D; implode(&#39;,&#39;, array_map(function ($columnName) &#123;\n            return $this-&gt;wrap($columnName) . &#39; &#x3D; VALUES(&#39; . $this-&gt;wrap($columnName) . &#39;)&#39;;\n        &#125;, $columnNames));\n\n        return &quot;INSERT INTO $table ($columns) VALUES $parameters ON DUPLICATE KEY UPDATE $updates&quot;;\n    &#125;\n&#125;\n自定义Builder&lt;?php\n\nnamespace App\\Library\\Database\\Query;\n\nuse Illuminate\\Database\\Query\\Builder as QueryBuilder;\n\nclass MySqlBuilder extends QueryBuilder\n&#123;\n    &#x2F;**\n     * The database query grammar instance.\n     *\n     * @var Grammars\\MySqlGrammar\n     *&#x2F;\n    public $grammar;\n\n    &#x2F;**\n     * Insert a new record into the database, replace on primary key conflict.\n     *\n     * @param  array $values\n     * @return bool\n     *&#x2F;\n    public function replace(array $values)\n    &#123;\n        if (empty($values)) &#123;\n            return true;\n        &#125;\n\n        &#x2F;&#x2F; Since every insert gets treated like a batch insert, we will make sure the\n        &#x2F;&#x2F; bindings are structured in a way that is convenient for building these\n        &#x2F;&#x2F; inserts statements by verifying the elements are actually an array.\n        if (!is_array(reset($values))) &#123;\n            $values &#x3D; [$values];\n        &#125;\n\n        &#x2F;&#x2F; Since every insert gets treated like a batch insert, we will make sure the\n        &#x2F;&#x2F; bindings are structured in a way that is convenient for building these\n        &#x2F;&#x2F; inserts statements by verifying the elements are actually an array.\n        else &#123;\n            foreach ($values as $key &#x3D;&gt; $value) &#123;\n                ksort($value);\n                $values[$key] &#x3D; $value;\n            &#125;\n        &#125;\n\n        &#x2F;&#x2F; We&#39;ll treat every insert like a batch insert so we can easily insert each\n        &#x2F;&#x2F; of the records into the database consistently. This will make it much\n        &#x2F;&#x2F; easier on the grammars to just handle one type of record insertion.\n        $bindings &#x3D; [];\n\n        foreach ($values as $record) &#123;\n            foreach ($record as $value) &#123;\n                $bindings[] &#x3D; $value;\n            &#125;\n        &#125;\n\n        $sql &#x3D; $this-&gt;grammar-&gt;compileReplace($this, $values);\n\n        &#x2F;&#x2F; Once we have compiled the insert statement&#39;s SQL we can execute it on the\n        &#x2F;&#x2F; connection and return a result as a boolean success indicator as that\n        &#x2F;&#x2F; is the same type of result returned by the raw connection instance.\n        $bindings &#x3D; $this-&gt;cleanBindings($bindings);\n\n        return $this-&gt;connection-&gt;insert($sql, $bindings);\n    &#125;\n\n    &#x2F;**\n     * Insert a new record into the database, update on primary key conflict.\n     *\n     * @param  array $values\n     * @return bool\n     *&#x2F;\n    public function insertUpdate(array $values)\n    &#123;\n        if (empty($values)) &#123;\n            return true;\n        &#125;\n\n        &#x2F;&#x2F; Since every insert gets treated like a batch insert, we will make sure the\n        &#x2F;&#x2F; bindings are structured in a way that is convenient for building these\n        &#x2F;&#x2F; inserts statements by verifying the elements are actually an array.\n        if (!is_array(reset($values))) &#123;\n            $values &#x3D; [$values];\n        &#125; &#x2F;&#x2F; Sort the keys in each row alphabetically for consistency\n        else &#123;\n            foreach ($values as $key &#x3D;&gt; $value) &#123;\n                ksort($value);\n                $values[$key] &#x3D; $value;\n            &#125;\n        &#125;\n\n        &#x2F;&#x2F; We&#39;ll treat every insert like a batch insert so we can easily insert each\n        &#x2F;&#x2F; of the records into the database consistently. This will make it much\n        &#x2F;&#x2F; easier on the grammars to just handle one type of record insertion.\n        $bindings &#x3D; [];\n\n        foreach ($values as $record) &#123;\n            foreach ($record as $value) &#123;\n                $bindings[] &#x3D; $value;\n            &#125;\n        &#125;\n\n        $sql &#x3D; $this-&gt;grammar-&gt;compileInsertUpdate($this, $values);\n\n        &#x2F;&#x2F; Once we have compiled the insert statement&#39;s SQL we can execute it on the\n        &#x2F;&#x2F; connection and return a result as a boolean success indicator as that\n        &#x2F;&#x2F; is the same type of result returned by the raw connection instance.\n\n        $bindings &#x3D; $this-&gt;cleanBindings($bindings);\n\n        return $this-&gt;connection-&gt;insert($sql, $bindings);\n    &#125;\n\n    &#x2F;**\n     * Insert a new record into the database, discard on primary key conflict.\n     *\n     * @param  array $values\n     * @return bool\n     *&#x2F;\n    public function insertIgnore(array $values)\n    &#123;\n        if (empty($values)) &#123;\n            return true;\n        &#125;\n\n        &#x2F;&#x2F; Since every insert gets treated like a batch insert, we will make sure the\n        &#x2F;&#x2F; bindings are structured in a way that is convenient for building these\n        &#x2F;&#x2F; inserts statements by verifying the elements are actually an array.\n        if (!is_array(reset($values))) &#123;\n            $values &#x3D; [$values];\n        &#125;\n\n        &#x2F;&#x2F; Since every insert gets treated like a batch insert, we will make sure the\n        &#x2F;&#x2F; bindings are structured in a way that is convenient for building these\n        &#x2F;&#x2F; inserts statements by verifying the elements are actually an array.\n        else &#123;\n            foreach ($values as $key &#x3D;&gt; $value) &#123;\n                ksort($value);\n                $values[$key] &#x3D; $value;\n            &#125;\n        &#125;\n        \n        &#x2F;&#x2F; We&#39;ll treat every insert like a batch insert so we can easily insert each\n        &#x2F;&#x2F; of the records into the database consistently. This will make it much\n        &#x2F;&#x2F; easier on the grammars to just handle one type of record insertion.\n        $bindings &#x3D; [];\n\n        foreach ($values as $record) &#123;\n            foreach ($record as $value) &#123;\n                $bindings[] &#x3D; $value;\n            &#125;\n        &#125;\n\n        $sql &#x3D; $this-&gt;grammar-&gt;compileInsertIgnore($this, $values);\n\n        &#x2F;&#x2F; Once we have compiled the insert statement&#39;s SQL we can execute it on the\n        &#x2F;&#x2F; connection and return a result as a boolean success indicator as that\n        &#x2F;&#x2F; is the same type of result returned by the raw connection instance.\n\n        $bindings &#x3D; $this-&gt;cleanBindings($bindings);\n\n        return $this-&gt;connection-&gt;insert($sql, $bindings);\n    &#125;\n&#125;\n\n自定义Connection&lt;?php\n\nnamespace App\\Library\\Database;\n\nuse App\\Library\\Database\\Query\\MySqlBuilder as Builder;\nuse App\\Library\\Database\\Query\\Grammars\\MySqlGrammar as QueryGrammar;\nuse Illuminate\\Database\\MySqlConnection as Connection;\n\n\nclass MySqlConnection extends Connection\n&#123;\n    &#x2F;**\n     * Get the default query grammar instance.\n     *\n     * @return \\Illuminate\\Database\\Grammar|\\Illuminate\\Database\\Query\\Grammars\\MySqlGrammar\n     *&#x2F;\n    protected function getDefaultQueryGrammar()\n    &#123;\n        return $this-&gt;withTablePrefix(new QueryGrammar);\n    &#125;\n\n    &#x2F;**\n     * Get a new query builder instance.\n     *\n     * @return \\App\\Library\\Database\\Query\\MySqlBuilder\n     *&#x2F;\n    public function query()\n    &#123;\n        return new Builder(\n            $this, $this-&gt;getQueryGrammar(), $this-&gt;getPostProcessor()\n        );\n    &#125;\n&#125;\n\n自定义Provider&lt;?php\n\nnamespace App\\Providers;\n\nuse App\\Library\\Database\\MySqlConnection;\nuse Illuminate\\Support\\ServiceProvider;\n\nclass DatabaseServiceProvider extends ServiceProvider\n&#123;\n    &#x2F;**\n     * Override the default connection for MySQL. This allows us to use &#96;replace&#96; etc.\n     *\n     * @link https:&#x2F;&#x2F;stidges.com&#x2F;extending-the-connection-class-in-laravel\n     * @link https:&#x2F;&#x2F;gist.github.com&#x2F;VinceG&#x2F;0fb570925748ab35bc53f2a798cb517c\n     *\n     * @return void\n     *&#x2F;\n    public function boot()\n    &#123;\n        Connection::resolverFor(&#39;mysql&#39;, function ($connection, $database, $prefix, $config) &#123;\n            return new MySqlConnection($connection, $database, $prefix, $config);\n        &#125;); &#x2F;&#x2F; 5.4及以上版本使用此方式绑定\n    &#125;\n\n    &#x2F;**\n     * Register the service provider.\n     *\n     * @return void\n     *&#x2F;\n    public function register()\n    &#123;\n        $this-&gt;app-&gt;bind(&#39;db.connection.mysql&#39;, MySqlConnection::class); &#x2F;&#x2F; 5.4版本以下使用此方式绑定\n    &#125;\n&#125;\n注册ProviderLaravel在config/app.php里的providers中添加新的Provider类:\n&#39;providers&#39; &#x3D;&gt; [\n    &#x2F;&#x2F; 其他的服务提供者\n\n    App\\Providers\\AppServiceProvider::class,\n],\n\nLumen在bootstrap/app.php中手动绑定:\n&#x2F;&#x2F; 扩展的查询语法：Replace、InsertIgnore、InsertUpdate\n$app-&gt;register(App\\Providers\\DatabaseServiceProvider::class);\n\nreturn $app;\n\n使用Demo$data &#x3D; [\n    &#39;name&#39; &#x3D;&gt; &#39;soap&#39;,\n    &#39;status&#39; &#x3D;&gt; &#39;kia&#39;\n];\n\\DB::connection(&#39;cod8&#39;)-&gt;table(&#39;141_members&#39;)-&gt;insertUpdate($data);\n注意这里输入\\DB::connection()-&gt;table()-&gt;之后IDE不会提示扩展的方法，只能在封装类中声明是自定义的Builder以获得提示。\n封装成组件参照使用satis搭建私有Composer库\nRefrenceshttps://stidges.com/extending-the-connection-class-in-laravelhttps://gist.github.com/VinceG/0fb570925748ab35bc53f2a798cb517chttps://github.com/art-institute-of-chicago/data-service-images\n","slug":"Laravel-Lumen-扩展DB-Builder语法","date":"2019-04-12T08:24:51.000Z","categories_index":"php","tags_index":"laravel","author_index":"CloudyCity"},{"id":"409c5fa3f2aea2d9921180b4b25a34b1","title":"Laravel 接收PUT/PATCH/DELETE请求的值","content":"最近在调试PUT接口时，控制器中Request对象无法正常获取表单内容，发现这是Symfony组件的经典问题。\n\n\nWhat当时的场景是前端ajax使用PUT方式提交了一个multipart/form-data的请求，但是Request对象无法使用get()获取到数据。\nWhyLaravel的Illuminate\\Http\\Request对象继承是Symfony\\Component\\HttpFoundation\\Request，在获取请求表单内容的代码如下[1]：\npublic static function createFromGlobals()\n    &#123;\n        $request &#x3D; self::createRequestFromFactory($_GET, $_POST, [], $_COOKIE, $_FILES, $_SERVER);\n        if (0 &#x3D;&#x3D;&#x3D; strpos($request-&gt;headers-&gt;get(&#39;CONTENT_TYPE&#39;), &#39;application&#x2F;x-www-form-urlencoded&#39;)\n            &amp;&amp; \\in_array(strtoupper($request-&gt;server-&gt;get(&#39;REQUEST_METHOD&#39;, &#39;GET&#39;)), [&#39;PUT&#39;, &#39;DELETE&#39;, &#39;PATCH&#39;])\n        ) &#123;\n            parse_str($request-&gt;getContent(), $data);\n            $request-&gt;request &#x3D; new ParameterBag($data);\n        &#125;\n        return $request;\n    &#125;\n\n由于PHP原生只支持$_GET、$_POST，所以PUT、PATCH、DELETE的表单内容要从$request-&gt;getContent()中解析，但这里进行解析有一个条件是请求头Content-Type为application/x-www-form-urlencoded，所以当我使用multipart/form-data的Content-Type进行PUT请求时，Request对象就无法正常解析。\nHow解决方案有以下三个：\n请求前\n将Content-Type设置为application/x-www-form-urlencoded\n覆盖请求头method: 将请求头method设为POST，同时将请求头X-HTTP-METHOD-OVERRIDE 或 _method（url参数或请求体皆可）设为PUT/PATCH/DELETE。\n\nLaravel官方给出的建议方案[[2](https://laravel.com/docs/5.2/helpers#method-method-field)]也是方案二中的后者。\n\nif (! function_exists(&#39;method_field&#39;)) &#123;\n    &#x2F;**\n     * Generate a form field to spoof the HTTP verb used by forms.\n     *\n     * @param  string  $method\n     * @return \\Illuminate\\Support\\HtmlString\n     *&#x2F;\n    function method_field($method)\n    &#123;\n        return new HtmlString(&#39;&lt;input type&#x3D;&quot;hidden&quot; name&#x3D;&quot;_method&quot; value&#x3D;&quot;&#39;.$method.&#39;&quot;&gt;&#39;);\n    &#125;\n&#125;\nSymfony包中默认是禁用$httpMethodParameterOverride，而Laravel中默认开启。禁用时，只能通过请求头X-HTTP-METHOD-OVERRIDE覆盖。开启时，覆盖的优先级为：请求头X-HTTP-METHOD-OVERRIDE &gt; 请求体_method &gt; url参数_method &gt; 请求头method [3]\npublic function getMethod()\n    &#123;\n        if (null &#x3D;&#x3D;&#x3D; $this-&gt;method) &#123;\n            $this-&gt;method &#x3D; strtoupper($this-&gt;server-&gt;get(&#39;REQUEST_METHOD&#39;, &#39;GET&#39;));\n\n            if (&#39;POST&#39; &#x3D;&#x3D;&#x3D; $this-&gt;method) &#123;\n                if ($method &#x3D; $this-&gt;headers-&gt;get(&#39;X-HTTP-METHOD-OVERRIDE&#39;)) &#123;\n                    $this-&gt;method &#x3D; strtoupper($method);\n                &#125; elseif (self::$httpMethodParameterOverride) &#123;\n                    $this-&gt;method &#x3D; strtoupper($this-&gt;request-&gt;get(&#39;_method&#39;, $this-&gt;query-&gt;get(&#39;_method&#39;, &#39;POST&#39;)));\n                &#125;\n            &#125;\n        &#125;\n\n        return $this-&gt;method;\n    &#125;\n\n请求后\n继承Request对象补充对multipart/form-data类型的内容解析\n\nReference\n\n\n\n\n\n\n\n\n https://learnku.com/laravel/t/14028/how-does-laravel-put-receive-values#reply56870\n","slug":"Laravel-接收PUT-PATCH-DELETE请求的值","date":"2019-04-01T08:30:22.000Z","categories_index":"php","tags_index":"laravel","author_index":"CloudyCity"},{"id":"1a45ddc03757a70a484320eec02b084f","title":"Laravel5.2 使用队列记录接口日志","content":"最近在开发一个新接口时，需要记录请求与响应的日志。为了提高接口响应速度，记录日志这个环节就由异步队列来完成。项目采用Laravel5.2，队列驱动使用Redis。\n\n\n配置Laravel 5.2自带的redis队列驱动中会用到watch命令，所以没办法直接使用集群。要么自己写驱动，要么队列单独使用另外的主备redis。我这边是采用后者。\n增加redis连接配置.env\n// 队列驱动\nQUEUE_DRIVER=redis\n\n// 集群\nREDIS_HOST=xxx.xxx.xxx.xxx\nREDIS_PASSWORD=xxx\nREDIS_PORT=xxxx\n\n// 主备\nQUEUE_REDIS_HOST=xxx.xxx.xxx.xxx\nQUEUE_REDIS_PASSWORD=xxx\nQUEUE_REDIS_PORT=xxxx\nconfig/database.php\n'redis' => [\n\n    'cluster' => false,\n\n    'default' => [\n        'host' => env('REDIS_HOST', 'localhost'),\n        'password' => env('REDIS_PASSWORD', null),\n        'port' => env('REDIS_PORT', 6379),\n        'database' => 0,\n    ],\n\n    'queue' => [\n        'host' => env('QUEUE_REDIS_HOST', 'localhost'),\n        'password' => env('QUEUE_REDIS_PASSWORD', null),\n        'port' => env('QUEUE_REDIS_PORT', 6379),\n        'database' => 0,\n    ],\n],\n指定队列使用的redis连接config/queue.php\n'default' => env('QUEUE_DRIVER', 'sync'),\n...\n'connections' => [\n        'redis' => [\n            'driver' => 'redis',\n            'connection' => 'queue',\n            'queue' => 'default',\n            'expire' => 60,\n        ],\n],\n...\n\n创建Workerphp artisan make:job SaveMatchLog\n与自动计划的Command类一样，在handle()中编写具体业务代码。\nclass SaveMatchLog extends Job implements ShouldQueue\n&#123;\n    use InteractsWithQueue, SerializesModels;\n\n    /**\n     * 请求的订单号\n     * @var string\n     */\n    private $orderNo;\n\n    /**\n     * 请求时间\n     * @var array\n     */\n    private $time;\n\n    /**\n     * 请求IP\n     * @var array\n     */\n    private $ip;\n\n    /**\n     * 客户端系统信息\n     * @var array\n     */\n    private $userAgent;\n\n    /**\n     * 响应信息\n     * @var array\n     */\n    private $msg;\n\n    /**\n     * saveMatchLog constructor.\n     * @param Request $req\n     * @param \\Illuminate\\Http\\JsonResponse $res\n     */\n    public function __construct($req, $res)\n    &#123;\n        $this->orderNo = $req->get('order_no');\n        $this->time = date('Y-m-d H:i:s', $req->server->get('REQUEST_TIME'));\n        $this->ip = $req->getClientIp();\n        $this->userAgent = $req->header('user-agent');\n        $this->msg = $res->getData();\n    &#125;\n\n    /**\n     * Execute the job.\n     *\n     * @return void\n     */\n    public function handle()\n    &#123;\n        // 日志内容\n        $content = $this->getLogContent();\n\n        // 输出日志\n        $logWriter = new Writer(new Logger('match'));\n        $logWriter->useDailyFiles(storage_path('logs/match/match.log'));\n        $logWriter->info($content);\n    &#125;\n\n    public function failed()\n    &#123;\n        $content = $this->getLogContent();\n        \\Log::error('记录请求响应日志到logs/match.log失败，日志将记录在系统日志logs/laravel.log中');\n        \\Log::info($content);\n    &#125;\n\n    /**\n     * @return string\n     */\n    private function getLogContent()\n    &#123;\n        return json_encode([\n            'orderNo' => $this->orderNo,\n            'time' => $this->time,\n            'ip' => $this->ip,\n            'userAgent' => $this->userAgent,\n            'msg' => $this->msg,\n        ], JSON_UNESCAPED_UNICODE);\n    &#125;\n&#125;\n\n添加到队列接口的Controller如下\n/**\n * 接口入口\n * @param Request $request\n * @return \\Illuminate\\Http\\JsonResponse\n */\npublic function match(Request $request)\n&#123;\n    $response = $this->_match($request);\n    $job = (new SaveMatchLog($request, $response));\n    $this->dispatch($job); // 使用队列存储日志，提高接口响应速度\n    return $response;\n&#125;\n\n/**\n * @param Request $request\n * @return \\Illuminate\\Http\\JsonResponse\n */\npublic function _match(Request $request)\n&#123;\n    // do sth\n&#125;\n\n监听队列采用supervisor来管理监听进程\n进程配置$ cat /etc/supervisor/conf.d/laravel-worker.conf\n[program:laravel-worker]\nprocess_name=%(program_name)s_%(process_num)02d\ncommand=php /data/www/newadminpk/artisan queue:work redis --sleep=3 --tries=3 --daemon\nautostart=true\nautorestart=true\nuser=www\nnumprocs=1\nredirect_stderr=true\nstdout_logfile=/data/www/newadminpk/storage/logs/worker.out.log\nstderr_logfile=/data/www/newadminpk/storage/logs/worker.err.log\n\n引入配置$ tail /etc/supervisord/supervisord.conf\n[include]\nfiles = ./conf.d/*.conf\n\n启动supervisorsudo supervisord -c supervisor.conf  \n\n启动队列监听器sudo supervisorctl reread\nsudo supervisorctl update\nsudo supervisorctl start laravel-worker:*\n$ ps -ef | grep artisan | grep -v grep\nwww      21064  3186  0 14:49 ?        00:00:01 php /data/www/newadminpk/artisan queue:work redis --sleep=3 --tries=3 --daemon\n\n其他Walle配置这个项目通过Walle部署，需要在项目配置的post-release中配置以下\nsudo supervisorctl restart laravel-worker:*\n否则每次发布新版本后，Worker还是会将日志保存到上一个版本的路径下，导致日志丢失（这一点只要熟悉Walle的原理就知道原因了）。\nELK优化目前日志处理与检索还属于低频需求，后期可以考虑采用ELK改进写入日志之后的流程。\n","slug":"Laravel5-2-使用队列记录接口日志","date":"2019-03-12T07:45:50.000Z","categories_index":"php","tags_index":"laravel","author_index":"CloudyCity"},{"id":"53af487a07bcb20aa882173eb16518f3","title":"VSCode FTP与SSH插件推荐","content":"因为一些不可抗力因素，我偶尔要直接在线上改文件，这时就要在几个工具间反复切换（xftp下载，sublime编辑，xftp上传，xshell执行），比较繁琐。最近刚好改用VSCode，在市场找到两个比较合适的插件，在一个编辑器内即可完成上述流程，非常顺滑。\n\n\nSSH FS如果你直接在市场搜FTP的话，那些插件都是和xftp一样，每次修改文件都需要先下载。万一忘了，就可能丢失部分代码。而这款SSH FS是利用ssh模拟文件系统，所以你每次打开时，文件内容与目录机构都是最新的。\nSSHExtension这个插件也比较简单，就是直接使用VSCode的终端执行ssh命令。不过ssh配置是共用了另一款ftp插件ftp-simple的配置文件，所以也需要一起安装。\n最后VSCode真香，不像Sublime那么折腾。\n","slug":"VSCode-FTP与SSH插件推荐","date":"2019-02-28T08:13:43.000Z","categories_index":"新手村","tags_index":"工具","author_index":"CloudyCity"},{"id":"1d95107ced836961e9639f49026d155a","title":"Laravel5.2 DB Builder 子查询的优雅写法","content":"Laravel5.2的DB Builder还没有fromSub()与joinSub()，Sql涉及子查询时，比较优雅的写法是利用toSql()与mergeBindings()。\n\n\nFromSELECT\n\t*\nFROM\n\t( SELECT * FROM t1 WHERE c1 = xxx AND c2 = xxx GROUP BY c1 ) AS sub \nWHERE\n\tc1 = xxx \n\tAND c2 = xxx;\n\n$subQuery = DB::table('t1')->where('c1', 'xxx')->where('c2', xxx)->groupBy('c1');\n$query = DB::table(DB::raw(\"(&#123;$subQuery->toSql()&#125;) as sub\"))\n    ->select(['*'])\n    ->where('c1', 'xxx')\n    ->where('c2', 'xxx');\n    ->mergeBindings($subQuery)\n    ->get();\n\nJoinSELECT\n\tt1.*,\n\tsub.c4 \nFROM\n\tt1\n\tLEFT JOIN ( SELECT * FROM t2 GROUP BY c1, c2 ) AS sub ON t1.c1 = t2.c1 \n\tAND t1.c2 = t2.c2\n\n$subQuery = DB::table('t2')->groupBy('c1', 'c2');\n$query = DB::table('t1')\n    ->select(['t1.*', 'sub.c4'])\n    ->leftJoin(DB::raw(\"(&#123;subQuery->toSql()&#125;) as sub\"), function ($join) &#123;\n        /** @var JoinClause $join */\n        $join->on('t1.c1', '=', 't2.c1')\n            ->on('t1.c2', '=', 't2.c2');\n    &#125;)\n    ->mergeBindings($subQuery)\n    ->get();","slug":"Laravel5-2-DB-Builder-子查询的优雅写法","date":"2019-02-25T03:42:38.000Z","categories_index":"php","tags_index":"laravel","author_index":"CloudyCity"},{"id":"f4794d5716996e12dfb018f0413b5642","title":"hexo使用github issue存放文章与评论","content":"Hexo默认文章存放于source分支，没有评论系统，不过都可以通过插件进行扩展。本文介绍如何将hexo的文章与评论存放于Github Issue中（issue内容为博客内容，issue评论为博客评论）。\n\n\n使用github issue存放文章这种方案主要优点是可以直接使用GitHub的图床。注意: 19年10月开始githubusercontent.com域名被墙，需要科学才能看到图片\n安装插件$ npm install hexo-migrator-github-issue --save\n新建issue文章\n使用GitHub图床非常简单，把图片文件拖到编辑框就行了~\n导入文章$ hexo migrate github-issue 你的Github用户名/你存放hexo的仓库名\n例如然后生成部署即可。\n插件扩展该插件会根据issue的label为文章生成标签，如果要想生成分类和置顶参数，需要做一些修改。\n我提了一个PR还没通过，这里直接使用我fork的分支替换。\ncurl -fsSL https://raw.githubusercontent.com/CloudyCity/hexo-migrator-github-issue/master/index.js > node_modules/hexo-migrator-github-issue/index.js\n\n\n使用github issue存放评论安装插件Next主题自带gitment，主文件是/themes/next/source/js/src/gitment.browser.js。\n如果是其他主题，需要安装gitment，主文件是/node_modules/gitment/dist/gitment.browser.js。\n$ npm install gitment --save\n\n创建授权应用点击这里创建，名称随意，两个url都填hexo博客的url，创建完成就得到应用ID和密钥。\n创建新仓库在GitHub中创建一个新仓库，其issue将用于存放评论。\n配置在Next主题的配置文件_config.yaml中更改以下配置\ngitment:\n    enable: true\n    githubID: 你的github用户名\n    repo: 博客所在仓库\n    ClientID: 应用ID\n    ClientSecret: 密钥\n    lazy: false\n\n修改CORS转发代理_utils.http.post(&#39;https:&#x2F;&#x2F;gh-oauth.imsun.net&#39;, &#123;\n原作者提供的转发服务目前正常，无需更换\n插件修改此插件原本是使用另一个仓库存放评论，现在的需求是用博客所在仓库的对应文章issue中存放评论，需要修改loadMeta()，让插件使用id获取issue。\n这里使用hexo-migrator-github-issue作者Yikunfork的分支，用webpack打包，覆盖gitment主文件。\nNext主题可参考本博客的gitment.browser.js\n非Next主题可参考我写的替换脚本gitment.sh\n主题修改这里使用的是Next主题，需要修改三个模板文件，将hexo-migrator-github-issue插件获取到的issue-number作为id，供gitment插件中的loadMeta()使用。\n\n\\themes\\next\\layout\\_partials\\comments\\gitment.swig\n\\themes\\next\\layout\\_script\\comments\\gitment.swig\n\\themes\\next\\layout\\_third-party\\comments\\gitment.swig\n\n&#123;% if theme.gitment.enable %&#125;\n     &#123;% set id = page.number %&#125;\n     &#123;% set owner = theme.gitment.githubID %&#125;\n\n可以将主题加入版本控制，更换机器后就不需要再操作一遍，不过也会导致gitment的密钥泄漏:(\n最后最终效果参照本文章对应issue\n如果大家觉得上面两个插件好用的话可以去给插件的项目点个星支持开发者哦~hexo-migrator-github-issuegitment\n","slug":"hexo使用github-issue存放文章与评论","date":"2019-02-14T07:32:14.000Z","categories_index":"新手村","tags_index":"hexo","author_index":"CloudyCity"},{"id":"a2ce1474f91ec12ee856b391d3ee2257","title":"搭建hexo博客","content":"Hexo是一种使用Node.js编写的静态博客框架，快速、简洁、扩展丰富。本文介绍如何搭建Hexo博客，并部署到GitHub Page。\n\n\n前言个人认为，写博客是一个程序猿记录和总结的最好方式，虽然写博文没有使用笔记软件记录那么方便，需要更加严谨，但我觉得这其实是好事，可以迫使你更加认真的去钻研，而不只是浅尝辄止。长期坚持下来，可以改变你的学习态度，受益匪浅。\n不过我本来并不打算写这篇博文，因为网上已经有太多的教程，没有必要重复造轮子。但是我在搭建过程遇到很多问题，花了不少时间，所以还是决定记录下来。\n简介Hexo是一种使用Node.js编写的静态博客框架，快速、简洁、扩展丰富。\n搭建完成后使用非常简单：\n\n在hexo项目目录下的\\source\\_posts\\中用Markdown语法写博文；\n生成静态文件（Hexo将MD文件其解析成HTML文件）并部署。\n\n搭建本教程将Hexo部署到GitHub Page ，可以节省域名和空间的费用。\n安装与配置Git如果你是初次使用，安装时一路Next即可，然后打开Git Bash进行用户配置。\n$  git config --global user.name 你的用户名\n$  git config --global user.email 你的邮箱\n\n生成SSH公钥。\n$ ssh-keygen\n\n首先 ssh-keygen 会确认密钥的存储位置（默认是 .ssh/id_rsa），然后它会要求你输入两次密钥口令。如果你不想在使用密钥，直接回车即可。接下来使用cat命令查看公钥，下一步会用到。\n$ cat ~/.ssh/id_rsa.pub\n\n创建GitHub仓库创建一个仓库，名称必须是你的GitHub用户名.github.io，例如我的是仓库名为CloudyCity.github.io。然后进入Setting页面将上一步生成的公钥添加进去，以获得让你的电脑获得访问仓库的权限。\n安装与配置Hexo接下来就可以开始正题了，安装后使用管理员身份打开Git Bash。\n$ npm install hexo-cli -g\n\n进入你打算存放本地仓库的文件夹，初始化Hexo，并安装依赖。\n$ hexo init\n\n之后可以查看Hexo版本。\n$ hexo -v\n\nHexo 3.0 之后需要另外安装deployer才能部署。\n$ npm install hexo-deployer-git --save\n\n现在可以先进行本地测试，首先生成静态页面。\n$ hexo g\n\n然后启用本地服务，用浏览器打开 localhost:4000，如果没问题继续往下。\n$ hexo s\n\n打开Hexo文件夹下的*_config.yml*，这里只说明关于部署的配置项，其他配置项请移步至Hexo文档 。\ndeploy:\n  type: git\n  repository: git@github.com:CloudyCity/CloudyCity.github.io.git\n  branch: master\n\n将这里的repository的值改为你的GitHub仓库的SSH地址即可。激动人心的时刻来了，执行部署。\n$ hexo d\n\n如果你上面的步骤的都没问题的话，这时候在浏览器直接访问你的仓库名 (例:https://cloudycity.github.io) 就可以看到你的博客了。\n上传Hexo的源码打开Hexo文件夹，创建Git本地仓库\n$ git init\n\n创建新分支\n$ git branch source\n\n切换成source分支\n$ git checkout source\n\n追踪所有文件\n$ git add .\n\n提交更改（到本地仓库）\n$ git commit -m 'first time upload source'\n\n添加远程仓库，这里也是键入你的GitHub仓库的SSH地址\n$ git remote add origin git@github.com:CloudyCity/CloudyCity.github.io.git\n\n推送到远程仓库\n$ git push origin source\n\n如果没遇到问题，那恭喜你成功将Hexo源码推送到你在GitHub的名称为你的GitHub用户名.github.io的仓库的source分支中！这样以后你换一台设备亦可以继续写博文啦~（当然你还是需要添加新设备的公钥到GitHub中）\n需要注意的是，因为文章存放在source分支中，所以每次写好一篇新文章，应该提交并推送到远程分支中。\n下载Hexo的源码这里假如你换了一台设备，打开你打算作为本地仓库的文件夹，创建本地仓库，生成与添加公钥的步骤不再赘述。\n克隆远程仓库\n$ git clone git@github.com:CloudyCity/CloudyCity.github.io.git\n\n切换source分支\n$ git checkout source\n\n源码中的package.json已保存依赖信息，这里只需要自动安装即可。\n$ npm install\n\n这样子就再次搭建好Hexo环境啦~\n最后搭建完成只是开始，坚持用心写文章才是最难的，大家一起加油。另外，hexo还有非常多好看的主题和有用的插件哦~\n","slug":"搭建hexo博客","date":"2019-02-13T16:32:12.000Z","categories_index":"新手村","tags_index":"hexo","author_index":"CloudyCity"}]