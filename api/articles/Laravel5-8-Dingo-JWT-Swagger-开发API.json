{"title":"Laravel5.8+Dingo+JWT+Swagger 开发API","uid":"58d4f495b2526d01b8b9004566be2a59","slug":"Laravel5-8-Dingo-JWT-Swagger-开发API","date":"2019-06-03T06:03:45.000Z","updated":"2021-06-04T03:18:11.680Z","comments":true,"path":"api/articles/Laravel5-8-Dingo-JWT-Swagger-开发API.json","cover":"https://i.pinimg.com/originals/bd/c4/7c/bdc47c05192f45e6fe2704b3c52995e7.jpg","content":"<p>在Laravel5.8中使用“Laravel必知必会”的两个轮子<code>dingo/api</code>和<code>tymon/jwt-auth</code>以及文档系统<code>swagger-api/swagger-ui</code>开发一个规范优雅的API。</p>\n<span id=\"more\"></span>\n\n<h1 id=\"Dingo\"><a href=\"#Dingo\" class=\"headerlink\" title=\"Dingo\"></a>Dingo</h1><h3 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h3><pre class=\"line-numbers language-Shell\" data-language=\"Shell\"><code class=\"language-Shell\">composer require dingo&#x2F;api<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p><img src=\"https://user-images.githubusercontent.com/17662451/61279083-05055e80-a7e8-11e9-9e5e-81d4cc8baec1.png\" alt=\"image\"><br>组件包含自动包发现配置，无需手动注册Provider</p>\n<h3 id=\"配置\"><a href=\"#配置\" class=\"headerlink\" title=\"配置\"></a>配置</h3><pre class=\"line-numbers language-Shell\" data-language=\"Shell\"><code class=\"language-Shell\">php artisan vendor:publish --provider&#x3D;&quot;Dingo\\Api\\Provider\\LaravelServiceProvider&quot;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>无特殊需求直接通过<code>.env</code>文件配置</p>\n<pre class=\"line-numbers language-Shell\" data-language=\"Shell\"><code class=\"language-Shell\"># Dingo Api \nAPI_STANDARDS_TREE&#x3D;x\nAPI_SUBTYPE&#x3D;mp_admin\nAPI_PREFIX&#x3D;api # 前缀\nAPI_VERSION&#x3D;v1 # 默认版本\nAPI_NAME&#x3D;&quot;Mp Admin API&quot; # 名称\nAPI_CONDITIONAL_REQUEST&#x3D;false # 条件请求\nAPI_STRICT&#x3D;false # 严格模式，开启时请求头必要带标准的Accept信息\nAPI_DEFAULT_FORMAT&#x3D;json\nAPI_DEBUG&#x3D;true # 调试<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>由于子域已被占用，这里采用前缀的格式。接口地址格式为：<a href=\"https://admin.mp.example.com/api\">https://admin.mp.example.com/api</a></p>\n<h3 id=\"路由\"><a href=\"#路由\" class=\"headerlink\" title=\"路由\"></a>路由</h3><pre class=\"line-numbers language-PHP\" data-language=\"PHP\"><code class=\"language-PHP\">&#x2F;* @var \\Dingo\\Api\\Routing\\Router $api *&#x2F;\n$api &#x3D; app(&#39;Dingo\\Api\\Routing\\Router&#39;);\n\n$api-&gt;version(&#39;v1&#39;, function () use ($api) &#123;\n    $api-&gt;group([&#39;middleware&#39; &#x3D;&gt; [&#39;api&#39;, &#39;bindings&#39;]], function () use ($api) &#123;\n        &#x2F;&#x2F; 系统调试日志\n        $api-&gt;get(&#39;dev-logs&#39;, [&#39;as&#39; &#x3D;&gt; &#39;dev-logs&#39;, &#39;uses&#39; &#x3D;&gt; &#39;\\Rap2hpoutre\\LaravelLogViewer\\LogViewerController@index&#39;, &#39;middleware&#39; &#x3D;&gt; [&#39;auth&#39;]]);\n\n        &#x2F;&#x2F; 验证\n        $api-&gt;group([&#39;prefix&#39; &#x3D;&gt; &#39;auth&#39;], function () use ($api) &#123;\n            $api-&gt;post(&#39;login&#39;, [&#39;as&#39; &#x3D;&gt; &#39;auth.login&#39;, &#39;uses&#39; &#x3D;&gt; &#39;App\\Http\\Controllers\\AuthController@login&#39;]);\n            $api-&gt;get(&#39;me&#39;, [&#39;as&#39; &#x3D;&gt; &#39;auth.me&#39;, &#39;uses&#39; &#x3D;&gt; &#39;App\\Http\\Controllers\\AuthController@me&#39;]);\n            $api-&gt;post(&#39;refresh&#39;, [&#39;as&#39; &#x3D;&gt; &#39;auth.refresh&#39;, &#39;uses&#39; &#x3D;&gt; &#39;App\\Http\\Controllers\\AuthController@refresh&#39;]);\n            $api-&gt;post(&#39;logout&#39;, [&#39;as&#39; &#x3D;&gt; &#39;auth.logout&#39;, &#39;uses&#39; &#x3D;&gt; &#39;App\\Http\\Controllers\\AuthController@logout&#39;]);\n            $api-&gt;put(&#39;reset-pwd&#39;, [&#39;as&#39; &#x3D;&gt; &#39;auth.reset-pwd&#39;, &#39;uses&#39; &#x3D;&gt; &#39;App\\Http\\Controllers\\AuthController@resetPwd&#39;]);\n        &#125;);\n\n        &#x2F;&#x2F; 系统\n        $api-&gt;group([&#39;prefix&#39; &#x3D;&gt; &#39;sys&#39;], function () use ($api) &#123;\n            &#x2F;&#x2F; 当前用户能看到的菜单与拥有的权限(别名)\n            $api-&gt;get(&#39;menu&#39;, [&#39;as&#39; &#x3D;&gt; &#39;sys.menu&#39;, &#39;uses&#39; &#x3D;&gt; &#39;App\\Http\\Controllers\\System\\AdminController@menu&#39;]);\n\n            &#x2F;&#x2F; 系统资源\n            $api-&gt;resource(&#39;permissions&#39;, &#39;App\\Http\\Controllers\\System\\PermissionController&#39;, [&#39;names&#39; &#x3D;&gt; &#39;sys.permissions&#39;]);\n            $api-&gt;resource(&#39;roles&#39;, &#39;App\\Http\\Controllers\\System\\RoleController&#39;, [&#39;names&#39; &#x3D;&gt; &#39;sys.roles&#39;]);\n            $api-&gt;resource(&#39;admins&#39;, &#39;App\\Http\\Controllers\\System\\AdminController&#39;, [&#39;names&#39; &#x3D;&gt; &#39;sys.admins&#39;]);\n        &#125;);\n\n        ...\n    &#125;);\n&#125;);<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<div class=\"note warning\"><p>所有控制器都需要完整的命名空间，不支持为群组配置命名空间</p></div>\n\n<h3 id=\"异常\"><a href=\"#异常\" class=\"headerlink\" title=\"异常\"></a>异常</h3><h4 id=\"定义异常\"><a href=\"#定义异常\" class=\"headerlink\" title=\"定义异常\"></a>定义异常</h4><p>Dingo已经定义了接口场景下常用的异常，所以相关异常可以继承<code>\\Dingo\\Api\\Exception\\</code>下的异常。例如：</p>\n<pre class=\"line-numbers language-PHP\" data-language=\"PHP\"><code class=\"language-PHP\">class UpdateResourceFailedException extends \\Dingo\\Api\\Exception\\UpdateResourceFailedException\n&#123;\n    protected $message &#x3D; &#39;更新失败&#39;;\n\n    public function __construct($message &#x3D; null, $errors &#x3D; null, \\Exception $previous &#x3D; null, $headers &#x3D; [], $code &#x3D; 0) &#123;\n        $message &#x3D; $message ?? $this-&gt;getMessage();\n        parent::__construct($message, $errors, $previous, $headers, $code);\n    &#125;\n&#125;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h4 id=\"自定义异常响应\"><a href=\"#自定义异常响应\" class=\"headerlink\" title=\"自定义异常响应\"></a>自定义异常响应</h4><p>Dingo会先于Laravel自带的Handle获取<code>Symfony\\Component\\HttpKernel\\Exception</code>，所以在系统Handle::render()中处理不了这些异常。需要这样：</p>\n<pre class=\"line-numbers language-PHP\" data-language=\"PHP\"><code class=\"language-PHP\">class AppServiceProvider extends ServiceProvider\n&#123;\n    &#x2F;**\n     * Register any application services.\n     *\n     * @return void\n     *&#x2F;\n    public function register()\n    &#123;\n        &#x2F;&#x2F; 优化显示验证异常\n        app(&#39;Dingo\\Api\\Exception\\Handler&#39;)-&gt;register(function (ValidationException $exception) &#123;\n            $error &#x3D; $exception-&gt;validator-&gt;errors()-&gt;first();\n            throw new ValidationHttpException($error);\n        &#125;);\n    &#125;\n\n    ...<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"Transformers\"><a href=\"#Transformers\" class=\"headerlink\" title=\"Transformers\"></a>Transformers</h3><p>目前通过Eloquent ORM的$casts属性来自动转化字段类型，还没复杂的需求需要用到Transformers。</p>\n<h1 id=\"JWT\"><a href=\"#JWT\" class=\"headerlink\" title=\"JWT\"></a>JWT</h1><h3 id=\"安装-1\"><a href=\"#安装-1\" class=\"headerlink\" title=\"安装\"></a>安装</h3><p>Laravel 5.5以上需要使用1.0.0版本</p>\n<pre class=\"line-numbers language-Shell\" data-language=\"Shell\"><code class=\"language-Shell\">composer require &quot;tymon&#x2F;jwt-auth:1.0.0-rc.4.1&quot;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>在<code>config/app.php</code>中手动注册Provider</p>\n<pre class=\"line-numbers language-PHP\" data-language=\"PHP\"><code class=\"language-PHP\">&#39;providers&#39; &#x3D;&gt; [\n\n    ...\n\n    Tymon\\JWTAuth\\Providers\\LaravelServiceProvider::class,\n]<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"配置-1\"><a href=\"#配置-1\" class=\"headerlink\" title=\"配置\"></a>配置</h3><p>发布配置</p>\n<pre class=\"line-numbers language-Shell\" data-language=\"Shell\"><code class=\"language-Shell\">php artisan vendor:publish --provider&#x3D;&quot;Tymon\\JWTAuth\\Providers\\LaravelServiceProvider&quot;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>生成密钥(可选)</p>\n<pre class=\"line-numbers language-Shell\" data-language=\"Shell\"><code class=\"language-Shell\">php artisan jwt:secret<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>配置ENV</p>\n<pre class=\"line-numbers language-Shell\" data-language=\"Shell\"><code class=\"language-Shell\"># JWT Oauth\nJWT_SECRET&#x3D;F5C5Qodnaa78PGFTFGhWgt7cNaHCOcXTI6SdtfuCfjHpotu7uwmlTy8HlbvsXeNt #64位密钥\nJWT_TTL&#x3D;1440 #Token过期时间<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"使用验证\"><a href=\"#使用验证\" class=\"headerlink\" title=\"使用验证\"></a>使用验证</h3><p>定义一个控制器基类，在构造函数中指定验证中间件即可。</p>\n<pre class=\"line-numbers language-PHP\" data-language=\"PHP\"><code class=\"language-PHP\">class Controller extends BaseController\n&#123;\n    use AuthorizesRequests, DispatchesJobs, ValidatesRequests, Helpers;\n\n    &#x2F;**\n     * Create a new AuthController instance.\n     *\n     * @return void\n     *&#x2F;\n    public function __construct()\n    &#123;\n        if (needAuth()) &#123; &#x2F;&#x2F; 助手函数，开发环境不验证Token\n            $this-&gt;middleware(&#39;auth:api&#39;, [&#39;except&#39; &#x3D;&gt; [&#39;login&#39;]]);\n        &#125;\n    &#125;\n&#125;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>之后所有路由到此控制器子类的请求必须带有Authorization头，值为<code>Bearer $token</code>才能通过检验。</p>\n<div class=\"note warning\"><p>只有继承这个基类的控制器才会进行检验，如果不是其子类需要在路由中指定中间件，例如上面路由中`dev-logs`的例子。</p></div>\n\n<h3 id=\"验证控制器\"><a href=\"#验证控制器\" class=\"headerlink\" title=\"验证控制器\"></a>验证控制器</h3><pre class=\"line-numbers language-PHP\" data-language=\"PHP\"><code class=\"language-PHP\">class AuthController extends Controller\n&#123;\n    public function login(LoginRequest $request)\n    &#123;\n        $credentials &#x3D; $request-&gt;only([&#39;email&#39;, &#39;password&#39;]);\n\n        $auth &#x3D; auth();\n        if (!$token &#x3D; $auth-&gt;attempt($credentials)) &#123;\n            return response()-&gt;json([&#39;error&#39; &#x3D;&gt; &#39;Unauthorized&#39;, &#39;status_code&#39; &#x3D;&gt; 401], 401);\n        &#125;\n\n        return $this-&gt;respondWithToken($token);\n    &#125;\n\n    public function me()\n    &#123;\n        return response()-&gt;json(auth()-&gt;user());\n    &#125;\n\n    public function logout()\n    &#123;\n        auth()-&gt;logout();\n\n        return response()-&gt;json([&#39;message&#39; &#x3D;&gt; &#39;Successfully logged out&#39;]);\n    &#125;\n    \n    public function refresh()\n    &#123;\n        &#x2F;** @noinspection PhpUndefinedMethodInspection *&#x2F;\n        return $this-&gt;respondWithToken(auth()-&gt;refresh());\n    &#125;\n\n    public function resetPwd(ResetPwdRequest $request)\n    &#123;\n        $oldPassword &#x3D; $request-&gt;get(&#39;old_password&#39;);\n        $newPassword &#x3D; $request-&gt;get(&#39;new_password&#39;);\n\n        &#x2F;&#x2F; 检查旧密码\n        $admin &#x3D; auth()-&gt;user();\n        if (!password_verify($oldPassword, $admin-&gt;password)) &#123;\n            throw new AuthenticationException(&#39;密码错误&#39;);\n        &#125;\n\n        &#x2F;&#x2F; 更新密码\n        $admin-&gt;update([\n            &#39;password&#39; &#x3D;&gt; password_hash($newPassword, PASSWORD_DEFAULT)\n        ]);\n\n        return success();\n    &#125;\n    \n    protected function respondWithToken($token)\n    &#123;\n        &#x2F;** @noinspection PhpUndefinedMethodInspection *&#x2F;\n        return $this-&gt;response-&gt;array([\n            &#39;access_token&#39; &#x3D;&gt; $token,\n            &#39;token_type&#39; &#x3D;&gt; &#39;bearer&#39;,\n            &#39;expires_in&#39; &#x3D;&gt; auth()-&gt;factory()-&gt;getTTL() * 60\n        ])-&gt;withHeader(&#39;Authorization&#39;, $token);\n    &#125;\n&#125;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h1 id=\"Swagger\"><a href=\"#Swagger\" class=\"headerlink\" title=\"Swagger\"></a>Swagger</h1><p>这里采用<code>l5-swagger</code>扩展，集成了<code>swagger-ui</code>（使用json配置的文档系统）和<code>php-swagger</code>(使用代码注释生成json配置)。</p>\n<h3 id=\"安装-2\"><a href=\"#安装-2\" class=\"headerlink\" title=\"安装\"></a>安装</h3><pre class=\"line-numbers language-Shell\" data-language=\"Shell\"><code class=\"language-Shell\">composer require &quot;darkaonline&#x2F;l5-swagger:5.8.*&quot;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>在<code>config/app.php</code>中手动注册Provider</p>\n<pre class=\"line-numbers language-PHP\" data-language=\"PHP\"><code class=\"language-PHP\">&#39;providers&#39; &#x3D;&gt; [\n\n    ...\n\n    L5Swagger\\L5SwaggerServiceProvider::class,\n]<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"配置-2\"><a href=\"#配置-2\" class=\"headerlink\" title=\"配置\"></a>配置</h3><p>发布配置与视图模板</p>\n<pre class=\"line-numbers language-Shell\" data-language=\"Shell\"><code class=\"language-Shell\">php artisan vendor:publish --provider &quot;L5Swagger\\L5SwaggerServiceProvider&quot;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>修改配置<code>config/l5-swagger.php</code></p>\n<pre class=\"line-numbers language-PHP\" data-language=\"PHP\"><code class=\"language-PHP\">return [\n    &#39;api&#39; &#x3D;&gt; [\n        &#x2F;*\n        |--------------------------------------------------------------------------\n        | Edit to set the api&#39;s title\n        |--------------------------------------------------------------------------\n        *&#x2F;\n\n        &#39;title&#39; &#x3D;&gt; &#39;后台Api文档&#39;, # 文档页面的标题\n    ],\n\n    &#39;routes&#39; &#x3D;&gt; [\n        &#x2F;*\n        |--------------------------------------------------------------------------\n        | Route for accessing api documentation interface\n        |--------------------------------------------------------------------------\n        *&#x2F;\n\n        &#39;api&#39; &#x3D;&gt; &#39;api&#x2F;docs&#39;, # 文档页面的路由\n\n        &#x2F;*\n        |--------------------------------------------------------------------------\n        | Route for accessing parsed swagger annotations.\n        |--------------------------------------------------------------------------\n        *&#x2F;\n\n        &#39;docs&#39; &#x3D;&gt; &#39;docs&#39;, # 路由别名\n\n        ...<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>在<code>.env</code>中添加</p>\n<pre class=\"line-numbers language-Shell\" data-language=\"Shell\"><code class=\"language-Shell\"># Swagger\nSWAGGER_VERSION&#x3D;3.0 # php-swagger的版本，不同版本注释写法不同！\nL5_SWAGGER_GENERATE_ALWAYS&#x3D;true # 自动生成文档json，不要在生产环境打开此项<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n<p>最后记得将文档的json配置加入<code>.gitignore</code></p>\n<pre class=\"line-numbers language-Shell\" data-language=\"Shell\"><code class=\"language-Shell\">...\n&#x2F;storage&#x2F;api-docs&#x2F;api-docs.json<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<h3 id=\"编写Swagger注释\"><a href=\"#编写Swagger注释\" class=\"headerlink\" title=\"编写Swagger注释\"></a>编写Swagger注释</h3><p>这里不详细介绍<code>php-swagger</code>的注释语法，只放出几个例子：</p>\n<ul>\n<li><p><code>swagger.php</code> </p>\n<pre class=\"line-numbers language-PHP\" data-language=\"PHP\"><code class=\"language-PHP\">&lt;?php\n\n&#x2F;**\n *\n * @OA\\OpenApi(\n *     security&#x3D;&#123;\n *         &#123;\n *             &quot;Bearer&quot;:&#123;&#125;\n *         &#125;\n *     &#125;,\n *     @OA\\Server(\n *         url&#x3D;L5_SWAGGER_CONST_HOST\n *     )\n * )\n *\n * @OA\\Info(\n *     version&#x3D;&quot;1.0&quot;,\n *     title&#x3D;&quot;小程序后台Api文档&quot;,\n *     @OA\\Contact(\n *         name&#x3D;&quot;火星救援网络科技有限公司&quot;,\n *         url&#x3D;&quot;http:&#x2F;&#x2F;www.example.com&#x2F;&quot;\n *     )\n * )\n *\n * @OA\\SecurityScheme(\n *     securityScheme&#x3D;&quot;Bearer&quot;,\n *     type&#x3D;&quot;apiKey&quot;,\n *     name&#x3D;&quot;Authorization&quot;,\n *     in&#x3D;&quot;header&quot;,\n * )\n *\n *&#x2F;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n<li><p><code>swagger-tags.php</code></p>\n<pre class=\"line-numbers language-PHP\" data-language=\"PHP\"><code class=\"language-PHP\">&#x2F;**\n * @OA\\Tag(\n *     name&#x3D;&quot;Auth&quot;,\n *     description&#x3D;&quot;验证模块&quot;\n * )\n *\n * @OA\\Tag(\n *     name&#x3D;&quot;System.Permission&quot;,\n *     description&#x3D;&quot;系统模块中的权限管理&quot;\n * )\n *\n * @OA\\Tag(\n *     name&#x3D;&quot;System.Role&quot;,\n *     description&#x3D;&quot;系统模块中的角色管理&quot;\n * )\n *\n * @OA\\Tag(\n *     name&#x3D;&quot;System.Admin&quot;,\n *     description&#x3D;&quot;系统模块中的用户管理&quot;\n * )\n *&#x2F;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n<li><p><code>AuthController.php</code></p>\n<pre class=\"line-numbers language-PHP\" data-language=\"PHP\"><code class=\"language-PHP\">class AuthController extends Controller\n&#123;\n    &#x2F;**\n     * @OA\\Post(\n     *     path&#x3D;&quot;&#x2F;auth&#x2F;login&quot;,\n     *     summary&#x3D;&quot;获取凭证&quot;,\n     *     tags&#x3D;&#123;&quot;Auth&quot;&#125;,\n     *     description&#x3D;&quot;通过账号密码获取Access Token&quot;,\n     *     @OA\\Parameter(\n     *         name&#x3D;&quot;email&quot;,\n     *         in&#x3D;&quot;query&quot;,\n     *         required&#x3D;true,\n     *         @OA\\Schema(\n     *             type&#x3D;&quot;string&quot;\n     *         ),\n     *         example&#x3D;&quot;test@example.com&quot;,\n     *         description&#x3D;&quot;邮箱&quot;\n     *     ),\n     *     @OA\\Parameter(\n     *         name&#x3D;&quot;password&quot;,\n     *         in&#x3D;&quot;query&quot;,\n     *         required&#x3D;true,\n     *         @OA\\Schema(\n     *             type&#x3D;&quot;string&quot;\n     *         ),\n     *         description&#x3D;&quot;密码&quot;\n     *     ),\n     *     @OA\\Response(\n     *         response&#x3D;200,\n     *         description&#x3D;&quot;返回凭证&quot;,\n     *         ref&#x3D;&quot;#&#x2F;components&#x2F;schemas&#x2F;Token&quot;\n     *     ),\n     *     @OA\\Response(\n     *         response&#x3D;401,\n     *         description&#x3D;&quot;账号不存在或密码错误&quot;\n     *     )\n     * )\n     *\n     * @param LoginRequest $request\n     * @return \\Illuminate\\Http\\JsonResponse\n     *&#x2F;\n    public function login(LoginRequest $request) &#123;\n         ...<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n</ul>\n<div class=\"note info\"><p>注释可以写在项目任意php文件中，建议是有归属语义的注释写在归属代码上（例如接口注释写在控制器中，模型注释写在模型中），公共语义的注释一样单独写在一个php文件中。</p></div>\n\n<h3 id=\"生成文档json\"><a href=\"#生成文档json\" class=\"headerlink\" title=\"生成文档json\"></a>生成文档json</h3><pre class=\"line-numbers language-Shell\" data-language=\"Shell\"><code class=\"language-Shell\">php artisan l5-swagger:generate<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<h3 id=\"最终效果\"><a href=\"#最终效果\" class=\"headerlink\" title=\"最终效果\"></a>最终效果</h3><p>访问上面配置的路由地址</p>\n<p><img src=\"https://user-images.githubusercontent.com/17662451/61341803-77268380-a87a-11e9-87f4-26e373c36a0d.png\" alt=\"image\"></p>\n<p>点击<code>Authorize</code>按钮，<code>value</code>填入<code>Authorization</code>头的值即可在生产环境的文档页面请求接口。</p>\n<p><img src=\"https://user-images.githubusercontent.com/17662451/61342163-d6d15e80-a87b-11e9-9700-3174aa069b6b.png\" alt=\"image\"></p>\n<div class=\"note info\"><p>注释可以写在项目任意php文件中，建议是有归属语义的注释写在归属代码上（例如接口注释写在控制器中，模型注释写在模型中），公共语义的注释一样单独写在一个php文件中。</p></div>\n\n<h1 id=\"结语\"><a href=\"#结语\" class=\"headerlink\" title=\"结语\"></a>结语</h1><p>至此，三个轮子在入门应用就介绍完了，这些轮子可以让你更快速的搭建API，专注于业务逻辑。</p>\n<h3 id=\"References\"><a href=\"#References\" class=\"headerlink\" title=\"References\"></a>References</h3><p>[0] <a href=\"https://packagist.org/packages/dingo/api\">dingo/api</a><br>[1] <a href=\"https://packagist.org/packages/tymon/jwt-auth\">tymon/jwt-auth</a><br>[2] <a href=\"https://packagist.org/packages/swagger-api/swagger-ui\">swagger-api/swagger-ui</a></p>\n","text":"在Laravel5.8中使用“Laravel必知必会”的两个轮子dingo/api和tymon/jwt-auth以及文档系统swagger-api/swagger-ui开发一个规范优雅的API。 Dingo安装composer require dingo&#x2F;api 组件包...","link":"","photos":[],"count_time":{"symbolsCount":"12k","symbolsTime":"11 mins."},"categories":[{"name":"php","slug":"php","count":12,"path":"api/categories/php.json"}],"tags":[{"name":"laravel","slug":"laravel","count":9,"path":"api/tags/laravel.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#Dingo\"><span class=\"toc-text\">Dingo</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%AE%89%E8%A3%85\"><span class=\"toc-text\">安装</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E9%85%8D%E7%BD%AE\"><span class=\"toc-text\">配置</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E8%B7%AF%E7%94%B1\"><span class=\"toc-text\">路由</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%BC%82%E5%B8%B8\"><span class=\"toc-text\">异常</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E5%AE%9A%E4%B9%89%E5%BC%82%E5%B8%B8\"><span class=\"toc-text\">定义异常</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E8%87%AA%E5%AE%9A%E4%B9%89%E5%BC%82%E5%B8%B8%E5%93%8D%E5%BA%94\"><span class=\"toc-text\">自定义异常响应</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#Transformers\"><span class=\"toc-text\">Transformers</span></a></li></ol></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#JWT\"><span class=\"toc-text\">JWT</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%AE%89%E8%A3%85-1\"><span class=\"toc-text\">安装</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E9%85%8D%E7%BD%AE-1\"><span class=\"toc-text\">配置</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E4%BD%BF%E7%94%A8%E9%AA%8C%E8%AF%81\"><span class=\"toc-text\">使用验证</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E9%AA%8C%E8%AF%81%E6%8E%A7%E5%88%B6%E5%99%A8\"><span class=\"toc-text\">验证控制器</span></a></li></ol></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#Swagger\"><span class=\"toc-text\">Swagger</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%AE%89%E8%A3%85-2\"><span class=\"toc-text\">安装</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E9%85%8D%E7%BD%AE-2\"><span class=\"toc-text\">配置</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E7%BC%96%E5%86%99Swagger%E6%B3%A8%E9%87%8A\"><span class=\"toc-text\">编写Swagger注释</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E7%94%9F%E6%88%90%E6%96%87%E6%A1%A3json\"><span class=\"toc-text\">生成文档json</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%9C%80%E7%BB%88%E6%95%88%E6%9E%9C\"><span class=\"toc-text\">最终效果</span></a></li></ol></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E7%BB%93%E8%AF%AD\"><span class=\"toc-text\">结语</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#References\"><span class=\"toc-text\">References</span></a></li></ol></li></ol></li></ol>","author":{"name":"CloudyCity","slug":"blog-author","avatar":"https://avatars.githubusercontent.com/u/17662451?s=400&u=643d94296b79c5e8424a2177fc4609a5e0ebeae0&v=4","link":"/","description":"拖延并发强迫症懒癌晚期患者","socials":{"github":"https://github.com/CloudyCity","twitter":"","stackoverflow":"https://stackoverflow.com/users/9827779/cloudycity","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"bilibili":{"icon":"/svg/bilibili.svg","link":"https://b23.tv/MK4nKb"}}}},"mapped":true,"prev_post":{"title":"使用Webpack开发JS Sdk","uid":"ff1fb0ae51583213dce3cf60573ca74e","slug":"使用Webpack开发JS-Sdk","date":"2019-07-17T05:55:32.000Z","updated":"2021-06-04T03:18:11.680Z","comments":true,"path":"api/articles/使用Webpack开发JS-Sdk.json","cover":"https://pic1.zhimg.com/v2-76676bf647344f92c34a94e3dcc11d38_720w.jpg?source=172ae18b","text":"最近项目需要开发一个JS Sdk，为了保证可读性与可维护性，决定按模块开发，最后使用webpack打包。 文件结构|-- config | |-- webpack.base.js | |-- webpack.development.js | |-- webpack.product...","link":"","photos":[],"count_time":{"symbolsCount":"4.7k","symbolsTime":"4 mins."},"categories":[{"name":"前端","slug":"前端","count":4,"path":"api/categories/前端.json"}],"tags":[{"name":"webpack","slug":"webpack","count":2,"path":"api/tags/webpack.json"}],"author":{"name":"CloudyCity","slug":"blog-author","avatar":"https://avatars.githubusercontent.com/u/17662451?s=400&u=643d94296b79c5e8424a2177fc4609a5e0ebeae0&v=4","link":"/","description":"拖延并发强迫症懒癌晚期患者","socials":{"github":"https://github.com/CloudyCity","twitter":"","stackoverflow":"https://stackoverflow.com/users/9827779/cloudycity","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"bilibili":{"icon":"/svg/bilibili.svg","link":"https://b23.tv/MK4nKb"}}}}},"next_post":{"title":"Hexo提高加载速度","uid":"a2a2c6e710e3fc9812c7982541e8d115","slug":"Hexo提高加载速度","date":"2019-05-01T18:46:17.000Z","updated":"2021-06-04T03:18:11.682Z","comments":true,"path":"api/articles/Hexo提高加载速度.json","cover":"https://guanqr.com/images/speed-up-hexo.png","text":"Hexo作为纯静态博客最大的优点就是快，但要真正的快起来你可能需要做这些事情。 托管平台（可选）直接在Coding等国内平台托管Page项目，修改国内线路解析。(可参照Github Hexo的百度收录问题)Coding绑定了域名需定期申请SSL证书，所以本博放弃此项。 CDN加速...","link":"","photos":[],"count_time":{"symbolsCount":"8.7k","symbolsTime":"8 mins."},"categories":[{"name":"新手村","slug":"新手村","count":7,"path":"api/categories/新手村.json"}],"tags":[{"name":"hexo","slug":"hexo","count":5,"path":"api/tags/hexo.json"}],"author":{"name":"CloudyCity","slug":"blog-author","avatar":"https://avatars.githubusercontent.com/u/17662451?s=400&u=643d94296b79c5e8424a2177fc4609a5e0ebeae0&v=4","link":"/","description":"拖延并发强迫症懒癌晚期患者","socials":{"github":"https://github.com/CloudyCity","twitter":"","stackoverflow":"https://stackoverflow.com/users/9827779/cloudycity","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"bilibili":{"icon":"/svg/bilibili.svg","link":"https://b23.tv/MK4nKb"}}}}}}