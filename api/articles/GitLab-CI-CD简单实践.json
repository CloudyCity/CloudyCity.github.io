{"title":"GitLab CI/CD简单实践","uid":"b2664a00c0b23f7c33471554c1cc3622","slug":"GitLab-CI-CD简单实践","date":"2021-05-28T03:23:58.000Z","updated":"2021-06-04T10:30:25.045Z","comments":true,"path":"api/articles/GitLab-CI-CD简单实践.json","cover":"https://www.rapidvaluesolutions.com/wp-content/uploads/2020/09/Blog-9.png","content":"<p>针对一个前端项目仓库，使用简单、低成本的方式进行CI/CD。</p>\n<span id=\"more\"></span>\n\n<h2 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h2><p>GitLab CI/CD通过<a href=\"https://docs.gitlab.com/runner/\">GitLab Runner</a>实现。<br>流程为：由GitLab触发流水线，通知安装在部署机上的Runner，然后Runner配置的Executor执行<code>gitlab-ci.yml</code>中的流程。</p>\n<p><img src=\"https://user-images.githubusercontent.com/17662451/119918228-a0e28280-bf9a-11eb-9f53-7f929e193272.png\" alt=\"image\"></p>\n<p>GitLab推荐用docker作为Executor，但考虑到实际项目情况与需求，我是用shell作为Executor。</p>\n<p>所以，在GitLab的管理界面以外，我们需要做以下三件事：</p>\n<ul>\n<li>在仓库中配置<code>gitlab-ci.yml</code></li>\n<li>在部署机上配置<code>Runner</code></li>\n<li>在部署机上授予<code>gitlab-runner</code>用户在部署目录的写权限</li>\n</ul>\n<h2 id=\"流程\"><a href=\"#流程\" class=\"headerlink\" title=\"流程\"></a>流程</h2><h3 id=\"CI-CD配置文件\"><a href=\"#CI-CD配置文件\" class=\"headerlink\" title=\"CI/CD配置文件\"></a>CI/CD配置文件</h3><p>首先推荐一个npm包：<a href=\"https://www.npmjs.com/package/install-changed\">install-changed</a>，用于判断依赖是否发生更新，手动部署时既能跳过不必要的<code>npm install</code>，也能保证不漏掉必要的<code>npm install</code>。</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">npm i install-changed<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>在<code>package.json</code>添加命令</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">&quot;scripts&quot;: &#123;\n    &quot;pre-run&quot;: &quot;install-changed&quot;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>考虑紧急情况可能需要手动部署，先写一个部署脚本。</p>\n<p><code>deploy.sh</code></p>\n<pre class=\"line-numbers language-shell\" data-language=\"shell\"><code class=\"language-shell\"># 变量\nif [[ -n $1 ]]; then\n    path&#x3D;$1\nelse\n    echo &quot;缺少输出目录&quot;\n    exit 1;\nfi\n\n# 当 未安装依赖 或 依赖列表更新 时安装依赖\nnpm run pre-run || npm ci --no-progress --registry&#x3D;https:&#x2F;&#x2F;registry.npm.taobao.org\n# 编译\nnpm run build\n# 平滑覆盖\ncp -r dist&#x2F;* $&#123;path&#125;&#x2F; &amp;&amp; find $&#123;path&#125; -mmin +1 -type f -delete<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>自动构建部署时复用部署脚本</p>\n<p><code>gitlab-ci.yml</code></p>\n<pre class=\"line-numbers language-yml\" data-language=\"yml\"><code class=\"language-yml\">stages:\n  - build\n\nbuild:\n  stage: build\n  only:\n    - master\n  script:\n    - sh deploy.sh $RELEASE_PATH<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>注意这里用到一个环境变量<code>RELEASE_PATH</code>，需要在GitLab仓库页的 <strong>设置 - CI/CD - 加密变量</strong> 中配置。</p>\n<p><img src=\"https://user-images.githubusercontent.com/17662451/119925262-b0b49380-bfa7-11eb-9214-78865de90e95.png\" alt=\"image\"></p>\n<p>这个目录就是编译后静态文件要部署的目录，需要给<code>gitlab-runner</code>用户写权限。</p>\n<h3 id=\"Runner\"><a href=\"#Runner\" class=\"headerlink\" title=\"Runner\"></a>Runner</h3><h4 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h4><p>GitLab推荐的是Runner版本与GitLab版本保持一致，有些高版本Runner能与低版本GitLab协作，但不能用新特性。<br>我的GitLab版本为10.7.3，Runner版本为13.4.1。</p>\n<p>进入部署机</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">yum install gitlab-runner<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h4 id=\"注册\"><a href=\"#注册\" class=\"headerlink\" title=\"注册\"></a>注册</h4><p>首先打开GitLab仓库页中的 <strong>设置 - CI/CD - Runners设置</strong></p>\n<details class=\"custom-details\">\n<summary>Click to see more</summary>\n<p><img src=\"https://user-images.githubusercontent.com/17662451/119920409-e30dc300-bf9e-11eb-84f6-2dff55df9512.png\" alt=\"image\"></p>\n\n</details>\n<p>回到部署机</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">sudo gitlab-runner register \\\n  --non-interactive \\\n  --url &quot;填上图中的URL&quot; \\\n  --registration-token &quot;填上图中的注册令牌&quot; \\\n  --executor &quot;shell&quot; \\\n  --description &quot;shell-runner&quot; \\\n  --tag-list &quot;shell&quot; \\\n  --run-untagged&#x3D;&quot;true&quot; \\<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>之后就会像上图一样，【当前项目有效可用的 runner】下方会出现刚刚注册的Runner。</p>\n<h3 id=\"测试\"><a href=\"#测试\" class=\"headerlink\" title=\"测试\"></a>测试</h3><h4 id=\"手动触发\"><a href=\"#手动触发\" class=\"headerlink\" title=\"手动触发\"></a>手动触发</h4><p>在GitLab仓库页面的 <strong>CI/CD - 流水线</strong>中点击<strong>运行流水线</strong>即可。</p>\n<p><img src=\"https://user-images.githubusercontent.com/17662451/119924563-6a126980-bfa6-11eb-9cdc-cfad19721e6e.png\" alt=\"image\"></p>\n<h4 id=\"自动触发\"><a href=\"#自动触发\" class=\"headerlink\" title=\"自动触发\"></a>自动触发</h4><p>首先检查Runner设置的触发条件，如下图配置，每当受保护分支有新的提交推送，便会触发流水线。</p>\n<p><img src=\"https://user-images.githubusercontent.com/17662451/119924696-a8a82400-bfa6-11eb-9d15-620a9fe82613.png\" alt=\"image\"></p>\n<h3 id=\"其他\"><a href=\"#其他\" class=\"headerlink\" title=\"其他\"></a>其他</h3><p>如果其他前端项目也是用这个方式部署，可以取消Runner设置中的【锁定到当前项目】，这样就可以复用这个runner，只需要每个仓库配置不同的环境变量RELEASE_PATH即可。</p>\n","feature":true,"text":"针对一个前端项目仓库，使用简单、低成本的方式进行CI/CD。 简介GitLab CI/CD通过GitLab Runner实现。流程为：由GitLab触发流水线，通知安装在部署机上的Runner，然后Runner配置的Executor执行gitlab-ci.yml中的流程。 Git...","link":"","photos":[],"count_time":{"symbolsCount":"1.9k","symbolsTime":"2 mins."},"categories":[{"name":"前端","slug":"前端","count":4,"path":"api/categories/前端.json"},{"name":"运维","slug":"前端/运维","count":1,"path":"api/categories/前端/运维.json"}],"tags":[{"name":"gitlab","slug":"gitlab","count":1,"path":"api/tags/gitlab.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E7%AE%80%E4%BB%8B\"><span class=\"toc-text\">简介</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%B5%81%E7%A8%8B\"><span class=\"toc-text\">流程</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#CI-CD%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6\"><span class=\"toc-text\">CI&#x2F;CD配置文件</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#Runner\"><span class=\"toc-text\">Runner</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E5%AE%89%E8%A3%85\"><span class=\"toc-text\">安装</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E6%B3%A8%E5%86%8C\"><span class=\"toc-text\">注册</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%B5%8B%E8%AF%95\"><span class=\"toc-text\">测试</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E6%89%8B%E5%8A%A8%E8%A7%A6%E5%8F%91\"><span class=\"toc-text\">手动触发</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E8%87%AA%E5%8A%A8%E8%A7%A6%E5%8F%91\"><span class=\"toc-text\">自动触发</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%85%B6%E4%BB%96\"><span class=\"toc-text\">其他</span></a></li></ol></li></ol>","author":{"name":"CloudyCity","slug":"blog-author","avatar":"https://avatars.githubusercontent.com/u/17662451?s=400&u=643d94296b79c5e8424a2177fc4609a5e0ebeae0&v=4","link":"/","description":"拖延并发强迫症懒癌晚期患者","socials":{"github":"https://github.com/CloudyCity","twitter":"","stackoverflow":"https://stackoverflow.com/users/9827779/cloudycity","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"bilibili":{"icon":"/svg/bilibili.svg","link":"https://b23.tv/MK4nKb"}}}},"mapped":true,"prev_post":{},"next_post":{"title":"Laravel-Websockets组件实践","uid":"fec643b4103ddf5fb791d3e0f56f5c2e","slug":"Laravel-Websockets组件实践","date":"2021-04-30T10:11:34.000Z","updated":"2021-06-04T10:30:25.045Z","comments":true,"path":"api/articles/Laravel-Websockets组件实践.json","cover":"https://laravelnews.imgix.net/images/laravel-websockets.png?ixlib=php-3.3.0","text":"给Laravel项目搭建Websocket服务时，不想用pusher这种在线服务? 觉得用laravel-echo-server监听事件不方便? 不想用swoole自己实现? 那你可以考虑Laravel官方推荐的laravel-websockets组件。 该组件有以下优点: 免费...","link":"","photos":[],"count_time":{"symbolsCount":"30k","symbolsTime":"27 mins."},"categories":[{"name":"php","slug":"php","count":12,"path":"api/categories/php.json"}],"tags":[{"name":"laravel","slug":"laravel","count":9,"path":"api/tags/laravel.json"},{"name":"websocket","slug":"websocket","count":1,"path":"api/tags/websocket.json"}],"author":{"name":"CloudyCity","slug":"blog-author","avatar":"https://avatars.githubusercontent.com/u/17662451?s=400&u=643d94296b79c5e8424a2177fc4609a5e0ebeae0&v=4","link":"/","description":"拖延并发强迫症懒癌晚期患者","socials":{"github":"https://github.com/CloudyCity","twitter":"","stackoverflow":"https://stackoverflow.com/users/9827779/cloudycity","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"bilibili":{"icon":"/svg/bilibili.svg","link":"https://b23.tv/MK4nKb"}}}},"feature":true}}