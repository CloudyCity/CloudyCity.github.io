{"title":"Laravel/Lumen 扩展DB Builder语法","uid":"c1faf785f7bcfca48734b5774b3466cc","slug":"Laravel-Lumen-扩展DB-Builder语法","date":"2019-04-12T08:24:51.000Z","updated":"2021-06-04T10:30:25.046Z","comments":true,"path":"api/articles/Laravel-Lumen-扩展DB-Builder语法.json","cover":"https://www.georgebuckingham.com/content/images/2020/10/laravel-upserts.jpg","content":"<p>截至<code>5.6</code>版本，<code>Laravel</code>的DB Builder都没有方法实现<code>忽略插入</code>与<code>插入或更新</code>（<code>5.7</code>版本新增<code>updateOrInsert()</code>）。除了自己封装多一层之外，还有一个更优雅的解决方案是对Builder语法进行扩展。</p>\n<span id=\"more\"></span>\n\n<h2 id=\"扩展支持的语法\"><a href=\"#扩展支持的语法\" class=\"headerlink\" title=\"扩展支持的语法\"></a>扩展支持的语法</h2><p>这里要扩展的是三个常用的语法: </p>\n<ol>\n<li><code>INSERT IGNORE INTO</code></li>\n<li><code>REPLACE INTO</code></li>\n<li><code>INSERT INTO ... ON DUPLICATE KEY UPDATE</code></li>\n</ol>\n<h2 id=\"扩展Builder类\"><a href=\"#扩展Builder类\" class=\"headerlink\" title=\"扩展Builder类\"></a>扩展Builder类</h2><p><code>Laravel</code>官方已经在<code>Illuminate\\Database</code>包中提供了扩展实例，需要创建自定义的<code>Grammar</code>、<code>Builder</code>、<code>Connection</code>类，然后由服务提供者注册。</p>\n<h3 id=\"自定义Grammar\"><a href=\"#自定义Grammar\" class=\"headerlink\" title=\"自定义Grammar\"></a>自定义Grammar</h3><details class=\"custom-details\">\n<summary>Click to see more</summary>\n<p><pre class=\"line-numbers language-PHP\" data-language=\"PHP\"><code class=\"language-PHP\">&lt;?php\n\nnamespace App\\Library\\Database\\Query\\Grammars;\n\nuse Illuminate\\Database\\Query\\Grammars\\MySqlGrammar as Grammar;\nuse App\\Library\\Database\\Query\\MySqlBuilder as Builder;\n\nclass MySqlGrammar extends Grammar\n&#123;\n    &#x2F;**\n     * Compile a replace into statement into SQL.\n     *\n     * @link https:&#x2F;&#x2F;dev.mysql.com&#x2F;doc&#x2F;refman&#x2F;5.5&#x2F;en&#x2F;replace.html\n     *\n     * @param  \\App\\Library\\Database\\Query\\MySqlBuilder $query\n     * @param  array $values\n     * @return string\n     *&#x2F;\n    public function compileReplace(Builder $query, array $values)\n    &#123;\n        &#x2F;&#x2F; Essentially we will force every insert to be treated as a batch insert which\n        &#x2F;&#x2F; simply makes creating the SQL easier for us since we can utilize the same\n        &#x2F;&#x2F; basic routine regardless of an amount of records given to us to insert.\n        $table &#x3D; $this-&gt;wrapTable($query-&gt;from);\n\n        if (!is_array(reset($values))) &#123;\n            $values &#x3D; [$values];\n        &#125;\n\n        $columns &#x3D; $this-&gt;columnize(array_keys(reset($values)));\n\n        &#x2F;&#x2F; We need to build a list of parameter place-holders of values that are bound\n        &#x2F;&#x2F; to the query. Each insert should have the exact same amount of parameter\n        &#x2F;&#x2F; bindings so we will loop through the record and parameterize them all.\n        $parameters &#x3D; [];\n\n        foreach ($values as $record) &#123;\n            $parameters[] &#x3D; &#39;(&#39; . $this-&gt;parameterize($record) . &#39;)&#39;;\n        &#125;\n\n        $parameters &#x3D; implode(&#39;, &#39;, $parameters);\n\n        return &quot;REPLACE INTO $table ($columns) VALUES $parameters&quot;;\n    &#125;\n\n    &#x2F;**\n     * Compile an insert ignore statement into SQL.\n     *\n     * @link https:&#x2F;&#x2F;dev.mysql.com&#x2F;doc&#x2F;refman&#x2F;5.5&#x2F;en&#x2F;insert.html\n     *\n     * @param  \\App\\Library\\Database\\Query\\MySqlBuilder $query\n     * @param  array $values\n     * @return string\n     *&#x2F;\n    public function compileInsertIgnore(Builder $query, array $values)\n    &#123;\n        &#x2F;&#x2F; Essentially we will force every insert to be treated as a batch insert which\n        &#x2F;&#x2F; simply makes creating the SQL easier for us since we can utilize the same\n        &#x2F;&#x2F; basic routine regardless of an amount of records given to us to insert.\n        $table &#x3D; $this-&gt;wrapTable($query-&gt;from);\n\n        if (!is_array(reset($values))) &#123;\n            $values &#x3D; [$values];\n        &#125;\n\n        $columns &#x3D; $this-&gt;columnize(array_keys(reset($values)));\n\n        &#x2F;&#x2F; We need to build a list of parameter place-holders of values that are bound\n        &#x2F;&#x2F; to the query. Each insert should have the exact same amount of parameter\n        &#x2F;&#x2F; bindings so we will loop through the record and parameterize them all.\n        $parameters &#x3D; [];\n\n        foreach ($values as $record) &#123;\n            $parameters[] &#x3D; &#39;(&#39; . $this-&gt;parameterize($record) . &#39;)&#39;;\n        &#125;\n\n        $parameters &#x3D; implode(&#39;, &#39;, $parameters);\n\n        return &quot;INSERT IGNORE INTO $table ($columns) VALUES $parameters&quot;;\n    &#125;\n\n    &#x2F;**\n     * Compile an insert update statement into SQL.\n     *\n     * @link https:&#x2F;&#x2F;dev.mysql.com&#x2F;doc&#x2F;refman&#x2F;8.0&#x2F;en&#x2F;insert-on-duplicate.html\n     * @link https:&#x2F;&#x2F;gist.github.com&#x2F;RuGa&#x2F;5354e44883c7651fd15c\n     *\n     * @param  \\App\\Library\\Database\\Query\\MySqlBuilder $query\n     * @param  array $values\n     * @return string\n     *&#x2F;\n    public function compileInsertUpdate(Builder $query, array $values)\n    &#123;\n        &#x2F;&#x2F; Essentially we will force every insert to be treated as a batch insert which\n        &#x2F;&#x2F; simply makes creating the SQL easier for us since we can utilize the same\n        &#x2F;&#x2F; basic routine regardless of an amount of records given to us to insert.\n        $table &#x3D; $this-&gt;wrapTable($query-&gt;from);\n\n        $columnNames &#x3D; array_keys(reset($values));\n\n        $columns &#x3D; $this-&gt;columnize($columnNames);\n\n        $parameters &#x3D; implode(&#39;,&#39;, array_map(function ($row) &#123;\n            return &#39;(&#39; . $this-&gt;parameterize($row) . &#39;)&#39;;\n        &#125;, $values));\n\n        $updates &#x3D; implode(&#39;,&#39;, array_map(function ($columnName) &#123;\n            return $this-&gt;wrap($columnName) . &#39; &#x3D; VALUES(&#39; . $this-&gt;wrap($columnName) . &#39;)&#39;;\n        &#125;, $columnNames));\n\n        return &quot;INSERT INTO $table ($columns) VALUES $parameters ON DUPLICATE KEY UPDATE $updates&quot;;\n    &#125;\n&#125;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n</p>\n</details>\n<h3 id=\"自定义Builder\"><a href=\"#自定义Builder\" class=\"headerlink\" title=\"自定义Builder\"></a>自定义Builder</h3><p>:::details Click to see more</p>\n<pre class=\"line-numbers language-PHP\" data-language=\"PHP\"><code class=\"language-PHP\">&lt;?php\n\nnamespace App\\Library\\Database\\Query;\n\nuse Illuminate\\Database\\Query\\Builder as QueryBuilder;\n\nclass MySqlBuilder extends QueryBuilder\n&#123;\n    &#x2F;**\n     * The database query grammar instance.\n     *\n     * @var Grammars\\MySqlGrammar\n     *&#x2F;\n    public $grammar;\n\n    &#x2F;**\n     * Insert a new record into the database, replace on primary key conflict.\n     *\n     * @param  array $values\n     * @return bool\n     *&#x2F;\n    public function replace(array $values)\n    &#123;\n        if (empty($values)) &#123;\n            return true;\n        &#125;\n\n        &#x2F;&#x2F; Since every insert gets treated like a batch insert, we will make sure the\n        &#x2F;&#x2F; bindings are structured in a way that is convenient for building these\n        &#x2F;&#x2F; inserts statements by verifying the elements are actually an array.\n        if (!is_array(reset($values))) &#123;\n            $values &#x3D; [$values];\n        &#125;\n\n        &#x2F;&#x2F; Since every insert gets treated like a batch insert, we will make sure the\n        &#x2F;&#x2F; bindings are structured in a way that is convenient for building these\n        &#x2F;&#x2F; inserts statements by verifying the elements are actually an array.\n        else &#123;\n            foreach ($values as $key &#x3D;&gt; $value) &#123;\n                ksort($value);\n                $values[$key] &#x3D; $value;\n            &#125;\n        &#125;\n\n        &#x2F;&#x2F; We&#39;ll treat every insert like a batch insert so we can easily insert each\n        &#x2F;&#x2F; of the records into the database consistently. This will make it much\n        &#x2F;&#x2F; easier on the grammars to just handle one type of record insertion.\n        $bindings &#x3D; [];\n\n        foreach ($values as $record) &#123;\n            foreach ($record as $value) &#123;\n                $bindings[] &#x3D; $value;\n            &#125;\n        &#125;\n\n        $sql &#x3D; $this-&gt;grammar-&gt;compileReplace($this, $values);\n\n        &#x2F;&#x2F; Once we have compiled the insert statement&#39;s SQL we can execute it on the\n        &#x2F;&#x2F; connection and return a result as a boolean success indicator as that\n        &#x2F;&#x2F; is the same type of result returned by the raw connection instance.\n        $bindings &#x3D; $this-&gt;cleanBindings($bindings);\n\n        return $this-&gt;connection-&gt;insert($sql, $bindings);\n    &#125;\n\n    &#x2F;**\n     * Insert a new record into the database, update on primary key conflict.\n     *\n     * @param  array $values\n     * @return bool\n     *&#x2F;\n    public function insertUpdate(array $values)\n    &#123;\n        if (empty($values)) &#123;\n            return true;\n        &#125;\n\n        &#x2F;&#x2F; Since every insert gets treated like a batch insert, we will make sure the\n        &#x2F;&#x2F; bindings are structured in a way that is convenient for building these\n        &#x2F;&#x2F; inserts statements by verifying the elements are actually an array.\n        if (!is_array(reset($values))) &#123;\n            $values &#x3D; [$values];\n        &#125; &#x2F;&#x2F; Sort the keys in each row alphabetically for consistency\n        else &#123;\n            foreach ($values as $key &#x3D;&gt; $value) &#123;\n                ksort($value);\n                $values[$key] &#x3D; $value;\n            &#125;\n        &#125;\n\n        &#x2F;&#x2F; We&#39;ll treat every insert like a batch insert so we can easily insert each\n        &#x2F;&#x2F; of the records into the database consistently. This will make it much\n        &#x2F;&#x2F; easier on the grammars to just handle one type of record insertion.\n        $bindings &#x3D; [];\n\n        foreach ($values as $record) &#123;\n            foreach ($record as $value) &#123;\n                $bindings[] &#x3D; $value;\n            &#125;\n        &#125;\n\n        $sql &#x3D; $this-&gt;grammar-&gt;compileInsertUpdate($this, $values);\n\n        &#x2F;&#x2F; Once we have compiled the insert statement&#39;s SQL we can execute it on the\n        &#x2F;&#x2F; connection and return a result as a boolean success indicator as that\n        &#x2F;&#x2F; is the same type of result returned by the raw connection instance.\n\n        $bindings &#x3D; $this-&gt;cleanBindings($bindings);\n\n        return $this-&gt;connection-&gt;insert($sql, $bindings);\n    &#125;\n\n    &#x2F;**\n     * Insert a new record into the database, discard on primary key conflict.\n     *\n     * @param  array $values\n     * @return bool\n     *&#x2F;\n    public function insertIgnore(array $values)\n    &#123;\n        if (empty($values)) &#123;\n            return true;\n        &#125;\n\n        &#x2F;&#x2F; Since every insert gets treated like a batch insert, we will make sure the\n        &#x2F;&#x2F; bindings are structured in a way that is convenient for building these\n        &#x2F;&#x2F; inserts statements by verifying the elements are actually an array.\n        if (!is_array(reset($values))) &#123;\n            $values &#x3D; [$values];\n        &#125;\n\n        &#x2F;&#x2F; Since every insert gets treated like a batch insert, we will make sure the\n        &#x2F;&#x2F; bindings are structured in a way that is convenient for building these\n        &#x2F;&#x2F; inserts statements by verifying the elements are actually an array.\n        else &#123;\n            foreach ($values as $key &#x3D;&gt; $value) &#123;\n                ksort($value);\n                $values[$key] &#x3D; $value;\n            &#125;\n        &#125;\n        \n        &#x2F;&#x2F; We&#39;ll treat every insert like a batch insert so we can easily insert each\n        &#x2F;&#x2F; of the records into the database consistently. This will make it much\n        &#x2F;&#x2F; easier on the grammars to just handle one type of record insertion.\n        $bindings &#x3D; [];\n\n        foreach ($values as $record) &#123;\n            foreach ($record as $value) &#123;\n                $bindings[] &#x3D; $value;\n            &#125;\n        &#125;\n\n        $sql &#x3D; $this-&gt;grammar-&gt;compileInsertIgnore($this, $values);\n\n        &#x2F;&#x2F; Once we have compiled the insert statement&#39;s SQL we can execute it on the\n        &#x2F;&#x2F; connection and return a result as a boolean success indicator as that\n        &#x2F;&#x2F; is the same type of result returned by the raw connection instance.\n\n        $bindings &#x3D; $this-&gt;cleanBindings($bindings);\n\n        return $this-&gt;connection-&gt;insert($sql, $bindings);\n    &#125;\n&#125;\n\n:::\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"自定义Connection\"><a href=\"#自定义Connection\" class=\"headerlink\" title=\"自定义Connection\"></a>自定义Connection</h3><pre class=\"line-numbers language-PHP\" data-language=\"PHP\"><code class=\"language-PHP\">&lt;?php\n\nnamespace App\\Library\\Database;\n\nuse App\\Library\\Database\\Query\\MySqlBuilder as Builder;\nuse App\\Library\\Database\\Query\\Grammars\\MySqlGrammar as QueryGrammar;\nuse Illuminate\\Database\\MySqlConnection as Connection;\n\n\nclass MySqlConnection extends Connection\n&#123;\n    &#x2F;**\n     * Get the default query grammar instance.\n     *\n     * @return \\Illuminate\\Database\\Grammar|\\Illuminate\\Database\\Query\\Grammars\\MySqlGrammar\n     *&#x2F;\n    protected function getDefaultQueryGrammar()\n    &#123;\n        return $this-&gt;withTablePrefix(new QueryGrammar);\n    &#125;\n\n    &#x2F;**\n     * Get a new query builder instance.\n     *\n     * @return \\App\\Library\\Database\\Query\\MySqlBuilder\n     *&#x2F;\n    public function query()\n    &#123;\n        return new Builder(\n            $this, $this-&gt;getQueryGrammar(), $this-&gt;getPostProcessor()\n        );\n    &#125;\n&#125;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"自定义Provider\"><a href=\"#自定义Provider\" class=\"headerlink\" title=\"自定义Provider\"></a>自定义Provider</h3><pre class=\"line-numbers language-PHP\" data-language=\"PHP\"><code class=\"language-PHP\">&lt;?php\n\nnamespace App\\Providers;\n\nuse App\\Library\\Database\\MySqlConnection;\nuse Illuminate\\Support\\ServiceProvider;\n\nclass DatabaseServiceProvider extends ServiceProvider\n&#123;\n    &#x2F;**\n     * Override the default connection for MySQL. This allows us to use &#96;replace&#96; etc.\n     *\n     * @link https:&#x2F;&#x2F;stidges.com&#x2F;extending-the-connection-class-in-laravel\n     * @link https:&#x2F;&#x2F;gist.github.com&#x2F;VinceG&#x2F;0fb570925748ab35bc53f2a798cb517c\n     *\n     * @return void\n     *&#x2F;\n    public function boot()\n    &#123;\n        Connection::resolverFor(&#39;mysql&#39;, function ($connection, $database, $prefix, $config) &#123;\n            return new MySqlConnection($connection, $database, $prefix, $config);\n        &#125;); &#x2F;&#x2F; 5.4及以上版本使用此方式绑定\n    &#125;\n\n    &#x2F;**\n     * Register the service provider.\n     *\n     * @return void\n     *&#x2F;\n    public function register()\n    &#123;\n        $this-&gt;app-&gt;bind(&#39;db.connection.mysql&#39;, MySqlConnection::class); &#x2F;&#x2F; 5.4版本以下使用此方式绑定\n    &#125;\n&#125;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"注册Provider\"><a href=\"#注册Provider\" class=\"headerlink\" title=\"注册Provider\"></a>注册Provider</h3><h4 id=\"Laravel\"><a href=\"#Laravel\" class=\"headerlink\" title=\"Laravel\"></a>Laravel</h4><p>在<code>config/app.php</code>里的<code>providers</code>中添加新的Provider类:</p>\n<pre class=\"line-numbers language-PHP\" data-language=\"PHP\"><code class=\"language-PHP\">&#39;providers&#39; &#x3D;&gt; [\n    &#x2F;&#x2F; 其他的服务提供者\n\n    App\\Providers\\AppServiceProvider::class,\n],<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h4 id=\"Lumen\"><a href=\"#Lumen\" class=\"headerlink\" title=\"Lumen\"></a>Lumen</h4><p>在<code>bootstrap/app.php</code>中手动绑定:</p>\n<pre class=\"line-numbers language-PHP\" data-language=\"PHP\"><code class=\"language-PHP\">&#x2F;&#x2F; 扩展的查询语法：Replace、InsertIgnore、InsertUpdate\n$app-&gt;register(App\\Providers\\DatabaseServiceProvider::class);\n\nreturn $app;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"使用Demo\"><a href=\"#使用Demo\" class=\"headerlink\" title=\"使用Demo\"></a>使用Demo</h2><pre class=\"line-numbers language-PHP\" data-language=\"PHP\"><code class=\"language-PHP\">$data &#x3D; [\n    &#39;name&#39; &#x3D;&gt; &#39;soap&#39;,\n    &#39;status&#39; &#x3D;&gt; &#39;kia&#39;\n];\n\\DB::connection(&#39;cod8&#39;)-&gt;table(&#39;141_members&#39;)-&gt;insertUpdate($data);<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>注意这里输入<code>\\DB::connection()-&gt;table()-&gt;</code>之后IDE不会提示扩展的方法，只能在封装类中声明是自定义的Builder以获得提示。<br><img src=\"https://user-images.githubusercontent.com/17662451/56022322-f701f680-5d3d-11e9-9c71-c588d54f13bb.png\" alt=\"image\"><br><img src=\"https://user-images.githubusercontent.com/17662451/56022249-d5a10a80-5d3d-11e9-8a57-66fabfaa03b3.png\" alt=\"QQ截图20190412161418\"></p>\n<h2 id=\"封装成组件\"><a href=\"#封装成组件\" class=\"headerlink\" title=\"封装成组件\"></a>封装成组件</h2><p>参照<a href=\"https://cloudycity.me/p/eee3.html\">使用satis搭建私有Composer库</a></p>\n<h2 id=\"Refrences\"><a href=\"#Refrences\" class=\"headerlink\" title=\"Refrences\"></a>Refrences</h2><p><a href=\"https://stidges.com/extending-the-connection-class-in-laravel\">https://stidges.com/extending-the-connection-class-in-laravel</a><br><a href=\"https://gist.github.com/VinceG/0fb570925748ab35bc53f2a798cb517c\">https://gist.github.com/VinceG/0fb570925748ab35bc53f2a798cb517c</a><br><a href=\"https://github.com/art-institute-of-chicago/data-service-images\">https://github.com/art-institute-of-chicago/data-service-images</a></p>\n","text":"截至5.6版本，Laravel的DB Builder都没有方法实现忽略插入与插入或更新（5.7版本新增updateOrInsert()）。除了自己封装多一层之外，还有一个更优雅的解决方案是对Builder语法进行扩展。 扩展支持的语法这里要扩展的是三个常用的语法: INSERT ...","link":"","photos":[],"count_time":{"symbolsCount":"14k","symbolsTime":"13 mins."},"categories":[{"name":"php","slug":"php","count":12,"path":"api/categories/php.json"}],"tags":[{"name":"laravel","slug":"laravel","count":9,"path":"api/tags/laravel.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%89%A9%E5%B1%95%E6%94%AF%E6%8C%81%E7%9A%84%E8%AF%AD%E6%B3%95\"><span class=\"toc-text\">扩展支持的语法</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%89%A9%E5%B1%95Builder%E7%B1%BB\"><span class=\"toc-text\">扩展Builder类</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E8%87%AA%E5%AE%9A%E4%B9%89Grammar\"><span class=\"toc-text\">自定义Grammar</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E8%87%AA%E5%AE%9A%E4%B9%89Builder\"><span class=\"toc-text\">自定义Builder</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E8%87%AA%E5%AE%9A%E4%B9%89Connection\"><span class=\"toc-text\">自定义Connection</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E8%87%AA%E5%AE%9A%E4%B9%89Provider\"><span class=\"toc-text\">自定义Provider</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%B3%A8%E5%86%8CProvider\"><span class=\"toc-text\">注册Provider</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#Laravel\"><span class=\"toc-text\">Laravel</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#Lumen\"><span class=\"toc-text\">Lumen</span></a></li></ol></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E4%BD%BF%E7%94%A8Demo\"><span class=\"toc-text\">使用Demo</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%B0%81%E8%A3%85%E6%88%90%E7%BB%84%E4%BB%B6\"><span class=\"toc-text\">封装成组件</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#Refrences\"><span class=\"toc-text\">Refrences</span></a></li></ol>","author":{"name":"CloudyCity","slug":"blog-author","avatar":"https://avatars.githubusercontent.com/u/17662451?s=400&u=643d94296b79c5e8424a2177fc4609a5e0ebeae0&v=4","link":"/","description":"拖延并发强迫症懒癌晚期患者","socials":{"github":"https://github.com/CloudyCity","twitter":"","stackoverflow":"https://stackoverflow.com/users/9827779/cloudycity","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"bilibili":{"icon":"/svg/bilibili.svg","link":"https://b23.tv/MK4nKb"},"steam":{"icon":"/svg/steam.svg","link":"https://steamcommunity.com/id/cloudycity/home/"}}}},"mapped":true,"prev_post":{"title":"如何更好的通过IDE代码检查","uid":"16ed07eb79eb4256778e578efa799c1a","slug":"如何更好的通过IDE代码检查","date":"2019-04-12T10:14:54.000Z","updated":"2021-06-04T10:30:25.047Z","comments":true,"path":"api/articles/如何更好的通过IDE代码检查.json","cover":"https://reinteractive.com/assets/services/inspect/reinteractive-code-inspect-c5d765882bb6372e935ed243f658df90f04b84e62000c9887be744db44933ca3.jpg","text":"我身边有很多同事都没有重视代码检查，每次看他们IDE右侧都是一边红黄棕交错的“线谱”，特别难受。让自己的代码通过IDE的检查，可以避免很多低级的错误。下面分享下如何更好地通过Intellij系列IDE的代码检查。 目标是什么目标是无任何notice，包括英文的拼写检查。 为什么要...","link":"","photos":[],"count_time":{"symbolsCount":830,"symbolsTime":"1 mins."},"categories":[{"name":"新手村","slug":"新手村","count":7,"path":"api/categories/新手村.json"}],"tags":[],"author":{"name":"CloudyCity","slug":"blog-author","avatar":"https://avatars.githubusercontent.com/u/17662451?s=400&u=643d94296b79c5e8424a2177fc4609a5e0ebeae0&v=4","link":"/","description":"拖延并发强迫症懒癌晚期患者","socials":{"github":"https://github.com/CloudyCity","twitter":"","stackoverflow":"https://stackoverflow.com/users/9827779/cloudycity","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"bilibili":{"icon":"/svg/bilibili.svg","link":"https://b23.tv/MK4nKb"},"steam":{"icon":"/svg/steam.svg","link":"https://steamcommunity.com/id/cloudycity/home/"}}}}},"next_post":{"title":"Laravel 接收PUT/PATCH/DELETE请求的值","uid":"409c5fa3f2aea2d9921180b4b25a34b1","slug":"Laravel-接收PUT-PATCH-DELETE请求的值","date":"2019-04-01T08:30:22.000Z","updated":"2021-06-04T10:30:25.047Z","comments":true,"path":"api/articles/Laravel-接收PUT-PATCH-DELETE请求的值.json","cover":"https://img-medianova.mncdn.com/wp-content/uploads/sites/8/2020/01/laravel-1130x356.png","text":"最近在调试PUT接口时，控制器中Request对象无法正常获取表单内容，发现这是Symfony组件的经典问题。 What当时的场景是前端ajax使用PUT方式提交了一个multipart/form-data的请求，但是Request对象无法使用get()获取到数据。 WhyLar...","link":"","photos":[],"count_time":{"symbolsCount":"2.9k","symbolsTime":"3 mins."},"categories":[{"name":"php","slug":"php","count":12,"path":"api/categories/php.json"}],"tags":[{"name":"laravel","slug":"laravel","count":9,"path":"api/tags/laravel.json"}],"author":{"name":"CloudyCity","slug":"blog-author","avatar":"https://avatars.githubusercontent.com/u/17662451?s=400&u=643d94296b79c5e8424a2177fc4609a5e0ebeae0&v=4","link":"/","description":"拖延并发强迫症懒癌晚期患者","socials":{"github":"https://github.com/CloudyCity","twitter":"","stackoverflow":"https://stackoverflow.com/users/9827779/cloudycity","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"bilibili":{"icon":"/svg/bilibili.svg","link":"https://b23.tv/MK4nKb"},"steam":{"icon":"/svg/steam.svg","link":"https://steamcommunity.com/id/cloudycity/home/"}}}}}}