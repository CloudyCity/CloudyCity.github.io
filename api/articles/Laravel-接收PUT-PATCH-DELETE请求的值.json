{"title":"Laravel 接收PUT/PATCH/DELETE请求的值","uid":"409c5fa3f2aea2d9921180b4b25a34b1","slug":"Laravel-接收PUT-PATCH-DELETE请求的值","date":"2019-04-01T08:30:22.000Z","updated":"2021-06-04T10:30:25.047Z","comments":true,"path":"api/articles/Laravel-接收PUT-PATCH-DELETE请求的值.json","cover":"https://img-medianova.mncdn.com/wp-content/uploads/sites/8/2020/01/laravel-1130x356.png","content":"<p>最近在调试<code>PUT</code>接口时，控制器中<code>Request</code>对象无法正常获取表单内容，发现这是Symfony组件的经典问题。</p>\n<span id=\"more\"></span>\n\n<h2 id=\"What\"><a href=\"#What\" class=\"headerlink\" title=\"What\"></a>What</h2><p>当时的场景是前端ajax使用PUT方式提交了一个<code>multipart/form-data</code>的请求，但是<code>Request</code>对象无法使用<code>get()</code>获取到数据。</p>\n<h2 id=\"Why\"><a href=\"#Why\" class=\"headerlink\" title=\"Why\"></a>Why</h2><p>Laravel的<code>Illuminate\\Http\\Request</code>对象继承是<code>Symfony\\Component\\HttpFoundation\\Request</code>，在获取请求表单内容的代码如下[<a href=\"https://github.com/symfony/symfony/blob/master/src/Symfony/Component/HttpFoundation/Request.php#L283\">1</a>]：</p>\n<pre class=\"line-numbers language-PHP\" data-language=\"PHP\"><code class=\"language-PHP\">public static function createFromGlobals()\n    &#123;\n        $request &#x3D; self::createRequestFromFactory($_GET, $_POST, [], $_COOKIE, $_FILES, $_SERVER);\n        if (0 &#x3D;&#x3D;&#x3D; strpos($request-&gt;headers-&gt;get(&#39;CONTENT_TYPE&#39;), &#39;application&#x2F;x-www-form-urlencoded&#39;)\n            &amp;&amp; \\in_array(strtoupper($request-&gt;server-&gt;get(&#39;REQUEST_METHOD&#39;, &#39;GET&#39;)), [&#39;PUT&#39;, &#39;DELETE&#39;, &#39;PATCH&#39;])\n        ) &#123;\n            parse_str($request-&gt;getContent(), $data);\n            $request-&gt;request &#x3D; new ParameterBag($data);\n        &#125;\n        return $request;\n    &#125;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>由于PHP原生只支持<code>$_GET</code>、<code>$_POST</code>，所以<code>PUT</code>、<code>PATCH</code>、<code>DELETE</code>的表单内容要从<code>$request-&gt;getContent()</code>中解析，但这里进行解析有一个条件是请求头<code>Content-Type</code>为<code>application/x-www-form-urlencoded</code>，所以当我使用<code>multipart/form-data</code>的<code>Content-Type</code>进行<code>PUT</code>请求时，<code>Request</code>对象就无法正常解析。</p>\n<h2 id=\"How\"><a href=\"#How\" class=\"headerlink\" title=\"How\"></a>How</h2><p>解决方案有以下三个：</p>\n<h3 id=\"请求前\"><a href=\"#请求前\" class=\"headerlink\" title=\"请求前\"></a>请求前</h3><ol>\n<li>将<code>Content-Type</code>设置为<code>application/x-www-form-urlencoded</code></li>\n<li>覆盖请求头<code>method</code>: 将请求头<code>method</code>设为<code>POST</code>，同时将请求头<code>X-HTTP-METHOD-OVERRIDE</code> 或 <code>_method</code>（url参数或请求体皆可）设为<code>PUT</code>/<code>PATCH</code>/<code>DELETE</code>。</li>\n</ol>\n<div class=\"note info\"><p>Laravel官方给出的建议方案[[2](https://laravel.com/docs/5.2/helpers#method-method-field)]也是方案二中的后者。</p></div>\n\n<pre class=\"line-numbers language-PHP\" data-language=\"PHP\"><code class=\"language-PHP\">if (! function_exists(&#39;method_field&#39;)) &#123;\n    &#x2F;**\n     * Generate a form field to spoof the HTTP verb used by forms.\n     *\n     * @param  string  $method\n     * @return \\Illuminate\\Support\\HtmlString\n     *&#x2F;\n    function method_field($method)\n    &#123;\n        return new HtmlString(&#39;&lt;input type&#x3D;&quot;hidden&quot; name&#x3D;&quot;_method&quot; value&#x3D;&quot;&#39;.$method.&#39;&quot;&gt;&#39;);\n    &#125;\n&#125;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>Symfony包中默认是禁用<code>$httpMethodParameterOverride</code>，而Laravel中默认开启。禁用时，只能通过请求头<code>X-HTTP-METHOD-OVERRIDE</code>覆盖。开启时，覆盖的优先级为：请求头<code>X-HTTP-METHOD-OVERRIDE</code> &gt; 请求体<code>_method</code> &gt; url参数<code>_method</code> &gt; 请求头<code>method</code> [<a href=\"https://github.com/symfony/symfony/blob/master/src/Symfony/Component/HttpFoundation/Request.php#L1215\">3</a>]</p>\n<pre class=\"line-numbers language-PHP\" data-language=\"PHP\"><code class=\"language-PHP\">public function getMethod()\n    &#123;\n        if (null &#x3D;&#x3D;&#x3D; $this-&gt;method) &#123;\n            $this-&gt;method &#x3D; strtoupper($this-&gt;server-&gt;get(&#39;REQUEST_METHOD&#39;, &#39;GET&#39;));\n\n            if (&#39;POST&#39; &#x3D;&#x3D;&#x3D; $this-&gt;method) &#123;\n                if ($method &#x3D; $this-&gt;headers-&gt;get(&#39;X-HTTP-METHOD-OVERRIDE&#39;)) &#123;\n                    $this-&gt;method &#x3D; strtoupper($method);\n                &#125; elseif (self::$httpMethodParameterOverride) &#123;\n                    $this-&gt;method &#x3D; strtoupper($this-&gt;request-&gt;get(&#39;_method&#39;, $this-&gt;query-&gt;get(&#39;_method&#39;, &#39;POST&#39;)));\n                &#125;\n            &#125;\n        &#125;\n\n        return $this-&gt;method;\n    &#125;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"请求后\"><a href=\"#请求后\" class=\"headerlink\" title=\"请求后\"></a>请求后</h3><ol start=\"3\">\n<li>继承Request对象补充对<code>multipart/form-data</code>类型的内容解析</li>\n</ol>\n<h2 id=\"Reference\"><a href=\"#Reference\" class=\"headerlink\" title=\"Reference\"></a>Reference</h2><blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p> <a href=\"https://learnku.com/laravel/t/14028/how-does-laravel-put-receive-values#reply56870\">https://learnku.com/laravel/t/14028/how-does-laravel-put-receive-values#reply56870</a></p></blockquote>\n","text":"最近在调试PUT接口时，控制器中Request对象无法正常获取表单内容，发现这是Symfony组件的经典问题。 What当时的场景是前端ajax使用PUT方式提交了一个multipart/form-data的请求，但是Request对象无法使用get()获取到数据。 WhyLar...","link":"","photos":[],"count_time":{"symbolsCount":"2.9k","symbolsTime":"3 mins."},"categories":[{"name":"php","slug":"php","count":12,"path":"api/categories/php.json"}],"tags":[{"name":"laravel","slug":"laravel","count":9,"path":"api/tags/laravel.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#What\"><span class=\"toc-text\">What</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#Why\"><span class=\"toc-text\">Why</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#How\"><span class=\"toc-text\">How</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E8%AF%B7%E6%B1%82%E5%89%8D\"><span class=\"toc-text\">请求前</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E8%AF%B7%E6%B1%82%E5%90%8E\"><span class=\"toc-text\">请求后</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#Reference\"><span class=\"toc-text\">Reference</span></a></li></ol>","author":{"name":"CloudyCity","slug":"blog-author","avatar":"https://avatars.githubusercontent.com/u/17662451?s=400&u=643d94296b79c5e8424a2177fc4609a5e0ebeae0&v=4","link":"/","description":"拖延并发强迫症懒癌晚期患者","socials":{"github":"https://github.com/CloudyCity","twitter":"","stackoverflow":"https://stackoverflow.com/users/9827779/cloudycity","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"bilibili":{"icon":"/svg/bilibili.svg","link":"https://b23.tv/MK4nKb"}}}},"mapped":true,"prev_post":{"title":"Laravel/Lumen 扩展DB Builder语法","uid":"c1faf785f7bcfca48734b5774b3466cc","slug":"Laravel-Lumen-扩展DB-Builder语法","date":"2019-04-12T08:24:51.000Z","updated":"2021-06-04T10:30:25.046Z","comments":true,"path":"api/articles/Laravel-Lumen-扩展DB-Builder语法.json","cover":"https://www.georgebuckingham.com/content/images/2020/10/laravel-upserts.jpg","text":"截至5.6版本，Laravel的DB Builder都没有方法实现忽略插入与插入或更新（5.7版本新增updateOrInsert()）。除了自己封装多一层之外，还有一个更优雅的解决方案是对Builder语法进行扩展。 扩展支持的语法这里要扩展的是三个常用的语法: INSERT ...","link":"","photos":[],"count_time":{"symbolsCount":"14k","symbolsTime":"13 mins."},"categories":[{"name":"php","slug":"php","count":12,"path":"api/categories/php.json"}],"tags":[{"name":"laravel","slug":"laravel","count":9,"path":"api/tags/laravel.json"}],"author":{"name":"CloudyCity","slug":"blog-author","avatar":"https://avatars.githubusercontent.com/u/17662451?s=400&u=643d94296b79c5e8424a2177fc4609a5e0ebeae0&v=4","link":"/","description":"拖延并发强迫症懒癌晚期患者","socials":{"github":"https://github.com/CloudyCity","twitter":"","stackoverflow":"https://stackoverflow.com/users/9827779/cloudycity","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"bilibili":{"icon":"/svg/bilibili.svg","link":"https://b23.tv/MK4nKb"}}}}},"next_post":{"title":"Laravel5.2 使用队列记录接口日志","uid":"1a45ddc03757a70a484320eec02b084f","slug":"Laravel5-2-使用队列记录接口日志","date":"2019-03-12T07:45:50.000Z","updated":"2021-06-04T10:30:25.047Z","comments":true,"path":"api/articles/Laravel5-2-使用队列记录接口日志.json","cover":"https://hackthestuff.com/uploads/posts/laravel-queue.jpg","text":"最近在开发一个新接口时，需要记录请求与响应的日志。为了提高接口响应速度，记录日志这个环节就由异步队列来完成。项目采用Laravel5.2，队列驱动使用Redis。 配置Laravel 5.2自带的redis队列驱动中会用到watch命令，所以没办法直接使用集群。要么自己写驱动，要...","link":"","photos":[],"count_time":{"symbolsCount":"4.5k","symbolsTime":"4 mins."},"categories":[{"name":"php","slug":"php","count":12,"path":"api/categories/php.json"}],"tags":[{"name":"laravel","slug":"laravel","count":9,"path":"api/tags/laravel.json"}],"author":{"name":"CloudyCity","slug":"blog-author","avatar":"https://avatars.githubusercontent.com/u/17662451?s=400&u=643d94296b79c5e8424a2177fc4609a5e0ebeae0&v=4","link":"/","description":"拖延并发强迫症懒癌晚期患者","socials":{"github":"https://github.com/CloudyCity","twitter":"","stackoverflow":"https://stackoverflow.com/users/9827779/cloudycity","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"bilibili":{"icon":"/svg/bilibili.svg","link":"https://b23.tv/MK4nKb"}}}}}}