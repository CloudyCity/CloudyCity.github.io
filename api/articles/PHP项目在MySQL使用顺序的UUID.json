{"title":"PHP项目在MySQL使用顺序的UUID","uid":"c745740a7cf2e407606f48886b844e67","slug":"PHP项目在MySQL使用顺序的UUID","date":"2021-01-20T09:38:35.000Z","updated":"2021-06-22T01:56:47.317Z","comments":true,"path":"api/articles/PHP项目在MySQL使用顺序的UUID.json","cover":"https://files.speakerdeck.com/presentations/ac4260cccd9b41418e61426acf0f9e73/slide_22.jpg","content":"<p>分布式系统的数据库都离不开UUID。在<a href=\"https://tools.ietf.org/html/rfc412\">RFC 4122</a>标准中各版本的UUID都有存在一些缺点，简单概括就是长而乱序。其中乱序则是通过<strong>顺序的UUID</strong>来减少影响。</p>\n<p>本文介绍什么是顺序的UUID，以及如何在PHP中生成。</p>\n<span id=\"more\"></span>\n\n<h3 id=\"标准UUID的缺点\"><a href=\"#标准UUID的缺点\" class=\"headerlink\" title=\"标准UUID的缺点\"></a>标准UUID的缺点</h3><h4 id=\"长度为36位\"><a href=\"#长度为36位\" class=\"headerlink\" title=\"长度为36位\"></a>长度为36位</h4><p>太长基本是无解的。虽然转换成字节型，可以将长度从36位减少为16位，但是不具备可读性，查询出来后需要再转换为字符串才可读。不过我们可以去掉4个无意义的短横线，将长度减少为32位。</p>\n<h4 id=\"乱序\"><a href=\"#乱序\" class=\"headerlink\" title=\"乱序\"></a>乱序</h4><p>所有UUID都不是单调递增的。<br>在InnoDB中，如果将UUID作为主键插入，数据会散列在硬盘中。对比自增主键，数据库会更大、查询会更慢。另外，InnoDB所有的次要键都会包括主键，长度为36位(或16位)的UUID也仍将被包含在每一个次要键中，将大幅增加索引大小，意味着增加内存占用。<br>所以，<strong>UUID不适合作为InnoDB表的主键</strong>，建议只是将UUID作为作为次要键，使用唯一约束。</p>\n<p>不过乱序则是通过<strong>顺序的UUID</strong>来减少影响。</p>\n<h3 id=\"什么是顺序的UUID\"><a href=\"#什么是顺序的UUID\" class=\"headerlink\" title=\"什么是顺序的UUID\"></a>什么是顺序的UUID</h3><p>顺序的UUID，AKA<strong>按时间排序的UUID</strong>、<strong>单调递增的UUID</strong>，是<a href=\"https://tools.ietf.org/html/rfc4122#section-4.2\">RFC 4122 Version 1 UUID</a>的变种，在<a href=\"https://tools.ietf.org/html/draft-peabody-dispatch-new-uuid-format-00\">RFC 4122 Version 6草稿</a>被提出。需注意的是该草稿并未通过，所以不能直接将其称为<code>Version 6</code>，并且在获取社区支持上可能不如官方标准。</p>\n<p>顺序的UUID相对于<code>Version 1</code>加上了一个特性：新生成的值总是大于已生成的值。<br>这个特性可以减少插入UUID和重新编排索引的IO开销。</p>\n<div class=\"custom-quote warning\">\n<span class=\"custom-quote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M20.86 14.13C20 14.7 19.56 15.74 19.77 16.76C20.13 18.55 18.55 20.13 16.76 19.77C15.74 19.57 14.7 20 14.13 20.86C13.12 22.38 10.89 22.38 9.88 20.86C9.3 20 8.26 19.56 7.24 19.77C5.45 20.13 3.87 18.55 4.23 16.76C4.43 15.74 4 14.7 3.14 14.13C1.62 13.12 1.62 10.89 3.14 9.88C4 9.3 4.44 8.26 4.23 7.24C3.87 5.45 5.45 3.87 7.24 4.23C8.26 4.44 9.3 4 9.87 3.14C10.88 1.62 13.11 1.62 14.12 3.14C14.7 4 15.74 4.44 16.76 4.23C18.55 3.87 20.13 5.45 19.77 7.24C19.56 8.26 20 9.3 20.86 9.87C22.38 10.88 22.38 13.12 20.86 14.13Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M12 8V13\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M12 15.99V16.01\"></path>\n</svg>\n</span>\n<p class=\"custom-quote-title\">注意</p>\n<p>即便如此，顺序UUID的长度并未变化，意味着它仍不适合作为InnoDB表的主键。</p>\n</div>\n<h3 id=\"如何生成顺序的UUID\"><a href=\"#如何生成顺序的UUID\" class=\"headerlink\" title=\"如何生成顺序的UUID\"></a>如何生成顺序的UUID</h3><p>这里推荐使用10k star的组件<a href=\"https://github.com/ramsey/uuid\">ramsey/uuid</a>, 里面已实现了<strong>按时间排序的UUID</strong>。</p>\n<h4 id=\"引入组件\"><a href=\"#引入组件\" class=\"headerlink\" title=\"引入组件\"></a>引入组件</h4><pre class=\"line-numbers language-php\" data-language=\"php\"><code class=\"language-php\">composer <span class=\"token keyword\">require</span> ramsey<span class=\"token operator\">/</span>uuid<span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h4 id=\"快速生成\"><a href=\"#快速生成\" class=\"headerlink\" title=\"快速生成\"></a>快速生成</h4><pre class=\"line-numbers language-php\" data-language=\"php\"><code class=\"language-php\"><span class=\"token keyword\">use</span> <span class=\"token package\">Ramsey<span class=\"token punctuation\">\\</span>Uuid<span class=\"token punctuation\">\\</span>Uuid</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token variable\">$uuid</span> <span class=\"token operator\">=</span> <span class=\"token class-name static-context\">Uuid</span><span class=\"token operator\">::</span><span class=\"token function\">uuid6</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token variable\">$uuid</span><span class=\"token operator\">-></span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 36位字符串</span>\n<span class=\"token variable\">$uuid</span><span class=\"token operator\">-></span><span class=\"token function\">getByte</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 16位字节型</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<div class=\"custom-quote warning\">\n<span class=\"custom-quote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M20.86 14.13C20 14.7 19.56 15.74 19.77 16.76C20.13 18.55 18.55 20.13 16.76 19.77C15.74 19.57 14.7 20 14.13 20.86C13.12 22.38 10.89 22.38 9.88 20.86C9.3 20 8.26 19.56 7.24 19.77C5.45 20.13 3.87 18.55 4.23 16.76C4.43 15.74 4 14.7 3.14 14.13C1.62 13.12 1.62 10.89 3.14 9.88C4 9.3 4.44 8.26 4.23 7.24C3.87 5.45 5.45 3.87 7.24 4.23C8.26 4.44 9.3 4 9.87 3.14C10.88 1.62 13.11 1.62 14.12 3.14C14.7 4 15.74 4.44 16.76 4.23C18.55 3.87 20.13 5.45 19.77 7.24C19.56 8.26 20 9.3 20.86 9.87C22.38 10.88 22.38 13.12 20.86 14.13Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M12 8V13\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M12 15.99V16.01\"></path>\n</svg>\n</span>\n<p class=\"custom-quote-title\">注意</p>\n<p>虽然组件文档很严谨将<strong>按时间排序的UUID</strong>归为非官方标准，但组件中还是沿用了草稿的<code>version 6</code>命名，所以本文具有时效性，如果RFC标准发生更新了，请以组件文档为主。</p>\n</div>\n<h4 id=\"生成流程解析\"><a href=\"#生成流程解析\" class=\"headerlink\" title=\"生成流程解析\"></a>生成流程解析</h4><p>这里以<code>4.0.1</code>版本为例(为便于阅读进行了重排版)作简单的解析。<br>组件遵循<code>RFC 4122</code>以及草稿的规范，<code>uuid6()</code>也是<code>uuid()</code>的变种，也是接收节点<code>$node</code>与时钟序列<code>$clockSeq</code>两个参数。</p>\n<pre class=\"line-numbers language-php\" data-language=\"php\"><code class=\"language-php\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">function</span> <span class=\"token function\">uuid6</span><span class=\"token punctuation\">(</span><span class=\"token operator\">?</span><span class=\"token class-name type-declaration\">Hexadecimal</span> <span class=\"token variable\">$node</span> <span class=\"token operator\">=</span> <span class=\"token constant\">null</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">?</span><span class=\"token keyword type-hint\">int</span> <span class=\"token variable\">$clockSeq</span> <span class=\"token operator\">=</span> <span class=\"token constant\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> <span class=\"token class-name return-type\">UuidInterface</span> \n<span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword static-context\">self</span><span class=\"token operator\">::</span><span class=\"token function\">getFactory</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-></span><span class=\"token function\">uuid6</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$node</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$clockSeq</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>这两个参数最后在<code>vendor/ramsey/uuid/src/Generator/DefaultTimeGenerator.php</code>中使用</p>\n<details class=\"custom-details\">\n<summary>Click to see more</summary>\n<p><pre class=\"line-numbers language-php\" data-language=\"php\"><code class=\"language-php\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">function</span> <span class=\"token function\">generate</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$node</span> <span class=\"token operator\">=</span> <span class=\"token constant\">null</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">?</span><span class=\"token keyword type-hint\">int</span> <span class=\"token variable\">$clockSeq</span> <span class=\"token operator\">=</span> <span class=\"token constant\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> <span class=\"token keyword return-type\">string</span>\n<span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token variable\">$node</span> <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">Hexadecimal</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token variable\">$node</span> <span class=\"token operator\">=</span> <span class=\"token variable\">$node</span><span class=\"token operator\">-></span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token variable\">$node</span> <span class=\"token operator\">=</span> <span class=\"token variable\">$this</span><span class=\"token operator\">-></span><span class=\"token function\">getValidNode</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$node</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token variable\">$clockSeq</span> <span class=\"token operator\">===</span> <span class=\"token constant\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token comment\">// This does not use \"stable storage\"; see RFC 4122, Section 4.2.1.1.</span>\n            <span class=\"token variable\">$clockSeq</span> <span class=\"token operator\">=</span> <span class=\"token function\">random_int</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x3fff</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Throwable</span> <span class=\"token variable\">$exception</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">RandomSourceException</span><span class=\"token punctuation\">(</span>\n                <span class=\"token variable\">$exception</span><span class=\"token operator\">-></span><span class=\"token function\">getMessage</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n                <span class=\"token punctuation\">(</span><span class=\"token keyword type-casting\">int</span><span class=\"token punctuation\">)</span> <span class=\"token variable\">$exception</span><span class=\"token operator\">-></span><span class=\"token function\">getCode</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n                <span class=\"token variable\">$exception</span>\n            <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token variable\">$time</span> <span class=\"token operator\">=</span> <span class=\"token variable\">$this</span><span class=\"token operator\">-></span><span class=\"token property\">timeProvider</span><span class=\"token operator\">-></span><span class=\"token function\">getTime</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token variable\">$uuidTime</span> <span class=\"token operator\">=</span> <span class=\"token variable\">$this</span><span class=\"token operator\">-></span><span class=\"token property\">timeConverter</span><span class=\"token operator\">-></span><span class=\"token function\">calculateTime</span><span class=\"token punctuation\">(</span>\n        <span class=\"token variable\">$time</span><span class=\"token operator\">-></span><span class=\"token function\">getSeconds</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-></span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n        <span class=\"token variable\">$time</span><span class=\"token operator\">-></span><span class=\"token function\">getMicroseconds</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-></span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token variable\">$timeHex</span> <span class=\"token operator\">=</span> <span class=\"token function\">str_pad</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$uuidTime</span><span class=\"token operator\">-></span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">16</span><span class=\"token punctuation\">,</span> <span class=\"token string single-quoted-string\">'0'</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">STR_PAD_LEFT</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">strlen</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$timeHex</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">!==</span> <span class=\"token number\">16</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">TimeSourceException</span><span class=\"token punctuation\">(</span><span class=\"token function\">sprintf</span><span class=\"token punctuation\">(</span>\n            <span class=\"token string single-quoted-string\">'The generated time of \\'%s\\' is larger than expected'</span><span class=\"token punctuation\">,</span>\n            <span class=\"token variable\">$timeHex</span>\n        <span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token variable\">$timeBytes</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword type-casting\">string</span><span class=\"token punctuation\">)</span> <span class=\"token function\">hex2bin</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$timeHex</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">return</span> <span class=\"token variable\">$timeBytes</span><span class=\"token punctuation\">[</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">.</span> <span class=\"token variable\">$timeBytes</span><span class=\"token punctuation\">[</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">.</span> <span class=\"token variable\">$timeBytes</span><span class=\"token punctuation\">[</span><span class=\"token number\">6</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">.</span> <span class=\"token variable\">$timeBytes</span><span class=\"token punctuation\">[</span><span class=\"token number\">7</span><span class=\"token punctuation\">]</span>\n        <span class=\"token operator\">.</span> <span class=\"token variable\">$timeBytes</span><span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">.</span> <span class=\"token variable\">$timeBytes</span><span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span>\n        <span class=\"token operator\">.</span> <span class=\"token variable\">$timeBytes</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">.</span> <span class=\"token variable\">$timeBytes</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span>\n        <span class=\"token operator\">.</span> <span class=\"token function\">pack</span><span class=\"token punctuation\">(</span><span class=\"token string single-quoted-string\">'n*'</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$clockSeq</span><span class=\"token punctuation\">)</span>\n        <span class=\"token operator\">.</span> <span class=\"token variable\">$node</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token comment\">/**\n * Uses the node provider given when constructing this instance to get\n * the node ID (usually a MAC address)\n *\n * @param string|int|null $node A node value that may be used to override the node provider\n *\n * @return string 6-byte binary string representation of the node\n *\n * @throws InvalidArgumentException\n */</span>\n<span class=\"token keyword\">private</span> <span class=\"token keyword\">function</span> <span class=\"token function\">getValidNode</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$node</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> <span class=\"token keyword return-type\">string</span>\n<span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token variable\">$node</span> <span class=\"token operator\">===</span> <span class=\"token constant\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token variable\">$node</span> <span class=\"token operator\">=</span> <span class=\"token variable\">$this</span><span class=\"token operator\">-></span><span class=\"token property\">nodeProvider</span><span class=\"token operator\">-></span><span class=\"token function\">getNode</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token comment\">// Convert the node to hex, if it is still an integer.</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">is_int</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$node</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token variable\">$node</span> <span class=\"token operator\">=</span> <span class=\"token function\">dechex</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$node</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token function\">ctype_xdigit</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token keyword type-casting\">string</span><span class=\"token punctuation\">)</span> <span class=\"token variable\">$node</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span> <span class=\"token class-name\">strlen</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token keyword type-casting\">string</span><span class=\"token punctuation\">)</span> <span class=\"token variable\">$node</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">></span> <span class=\"token number\">12</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">InvalidArgumentException</span><span class=\"token punctuation\">(</span><span class=\"token string single-quoted-string\">'Invalid node value'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token keyword type-casting\">string</span><span class=\"token punctuation\">)</span> <span class=\"token function\">hex2bin</span><span class=\"token punctuation\">(</span><span class=\"token function\">str_pad</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token keyword type-casting\">string</span><span class=\"token punctuation\">)</span> <span class=\"token variable\">$node</span><span class=\"token punctuation\">,</span> <span class=\"token number\">12</span><span class=\"token punctuation\">,</span> <span class=\"token string single-quoted-string\">'0'</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">STR_PAD_LEFT</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n</p>\n</details>\n<p>如果<code>$clockSeq</code>为null，则默认使用一个0~16383范围内的随机数。</p>\n<div class=\"custom-quote warning\">\n<span class=\"custom-quote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M20.86 14.13C20 14.7 19.56 15.74 19.77 16.76C20.13 18.55 18.55 20.13 16.76 19.77C15.74 19.57 14.7 20 14.13 20.86C13.12 22.38 10.89 22.38 9.88 20.86C9.3 20 8.26 19.56 7.24 19.77C5.45 20.13 3.87 18.55 4.23 16.76C4.43 15.74 4 14.7 3.14 14.13C1.62 13.12 1.62 10.89 3.14 9.88C4 9.3 4.44 8.26 4.23 7.24C3.87 5.45 5.45 3.87 7.24 4.23C8.26 4.44 9.3 4 9.87 3.14C10.88 1.62 13.11 1.62 14.12 3.14C14.7 4 15.74 4.44 16.76 4.23C18.55 3.87 20.13 5.45 19.77 7.24C19.56 8.26 20 9.3 20.86 9.87C22.38 10.88 22.38 13.12 20.86 14.13Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M12 8V13\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M12 15.99V16.01\"></path>\n</svg>\n</span>\n<p class=\"custom-quote-title\">注意</p>\n<p>对于默认的时钟序列，组件未遵循RFC标准的稳定存储，因为这部分需要额外的数据存储。如果你的节点在每微秒都有很高的生成频率，就需要自行维护。目前组件支持相同节点在每微秒生成16384个不重复的UUID，目前地球上应该还没出现这个频率以上的场景。</p>\n</div>\n<p>如果<code>$node</code>为null，将调用默认的<code>nodeProvider</code>获取。<br>而<code>vendor/ramsey/uuid/src/FeatureSet.php</code>中定义了所有默认特性，默认的<code>nodeProvider</code>为<code>FallbackNodeProvider</code>, 其实是一个集合，将按顺序尝试获取。其中集合中的<code>SystemNodeProvider</code>是获取系统的MAC地址，<code>RandomNodeProvider</code>是使用随机数。</p>\n<pre class=\"line-numbers language-php\" data-language=\"php\"><code class=\"language-php\"><span class=\"token comment\">/**\n * Returns a node provider configured for this environment\n */</span>\n<span class=\"token keyword\">private</span> <span class=\"token keyword\">function</span> <span class=\"token function\">buildNodeProvider</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> <span class=\"token class-name return-type\">NodeProviderInterface</span>\n<span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token variable\">$this</span><span class=\"token operator\">-></span><span class=\"token property\">ignoreSystemNode</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">RandomNodeProvider</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">FallbackNodeProvider</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">NodeProviderCollection</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>\n        <span class=\"token keyword\">new</span> <span class=\"token class-name\">SystemNodeProvider</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n        <span class=\"token keyword\">new</span> <span class=\"token class-name\">RandomNodeProvider</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<div class=\"custom-quote warning\">\n<span class=\"custom-quote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M20.86 14.13C20 14.7 19.56 15.74 19.77 16.76C20.13 18.55 18.55 20.13 16.76 19.77C15.74 19.57 14.7 20 14.13 20.86C13.12 22.38 10.89 22.38 9.88 20.86C9.3 20 8.26 19.56 7.24 19.77C5.45 20.13 3.87 18.55 4.23 16.76C4.43 15.74 4 14.7 3.14 14.13C1.62 13.12 1.62 10.89 3.14 9.88C4 9.3 4.44 8.26 4.23 7.24C3.87 5.45 5.45 3.87 7.24 4.23C8.26 4.44 9.3 4 9.87 3.14C10.88 1.62 13.11 1.62 14.12 3.14C14.7 4 15.74 4.44 16.76 4.23C18.55 3.87 20.13 5.45 19.77 7.24C19.56 8.26 20 9.3 20.86 9.87C22.38 10.88 22.38 13.12 20.86 14.13Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M12 8V13\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M12 15.99V16.01\"></path>\n</svg>\n</span>\n<p class=\"custom-quote-title\">注意</p>\n<p>如果你的分布式项目运行在Docker容器中，要注意：如果没有启动参数，按照Docker的默认分配机制，会导致每个PHP容器的MAC地址一致，而此组件默认使用MAC地址，所以最终导致节点一致，提高UUID的重复几率。</p>\n</div>\n<h3 id=\"Refrences\"><a href=\"#Refrences\" class=\"headerlink\" title=\"Refrences\"></a>Refrences</h3><p>[0] <a href=\"https://tools.ietf.org/html/rfc412\">RFC 4122</a><br>[1] <a href=\"https://www.percona.com/blog/2014/12/19/store-uuid-optimized-way\">Storing UUID Values in MySQL</a><br>[2] <a href=\"https://uuid.ramsey.dev/en/4.0.1/index.html\">ramsey/uuid doc</a></p>\n","text":"分布式系统的数据库都离不开UUID。在RFC 4122标准中各版本的UUID都有存在一些缺点，简单概括就是长而乱序。其中乱序则是通过顺序的UUID来减少影响。 本文介绍什么是顺序的UUID，以及如何在PHP中生成。 标准UUID的缺点长度为36位太长基本是无解的。虽然转换成字节型...","link":"","photos":[],"count_time":{"symbolsCount":"4.5k","symbolsTime":"4 mins."},"categories":[{"name":"php","slug":"php","count":13,"path":"api/categories/php.json"}],"tags":[{"name":"mysql","slug":"mysql","count":2,"path":"api/tags/mysql.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%A0%87%E5%87%86UUID%E7%9A%84%E7%BC%BA%E7%82%B9\"><span class=\"toc-text\">标准UUID的缺点</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E9%95%BF%E5%BA%A6%E4%B8%BA36%E4%BD%8D\"><span class=\"toc-text\">长度为36位</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E4%B9%B1%E5%BA%8F\"><span class=\"toc-text\">乱序</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E4%BB%80%E4%B9%88%E6%98%AF%E9%A1%BA%E5%BA%8F%E7%9A%84UUID\"><span class=\"toc-text\">什么是顺序的UUID</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%A6%82%E4%BD%95%E7%94%9F%E6%88%90%E9%A1%BA%E5%BA%8F%E7%9A%84UUID\"><span class=\"toc-text\">如何生成顺序的UUID</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E5%BC%95%E5%85%A5%E7%BB%84%E4%BB%B6\"><span class=\"toc-text\">引入组件</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E5%BF%AB%E9%80%9F%E7%94%9F%E6%88%90\"><span class=\"toc-text\">快速生成</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E7%94%9F%E6%88%90%E6%B5%81%E7%A8%8B%E8%A7%A3%E6%9E%90\"><span class=\"toc-text\">生成流程解析</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#Refrences\"><span class=\"toc-text\">Refrences</span></a></li></ol>","author":{"name":"CloudyCity","slug":"blog-author","avatar":"https://avatars.githubusercontent.com/u/17662451?s=400&u=643d94296b79c5e8424a2177fc4609a5e0ebeae0&v=4","link":"/","description":"拖延并发强迫症懒癌晚期患者","socials":{"github":"https://github.com/CloudyCity","twitter":"","stackoverflow":"https://stackoverflow.com/users/9827779/cloudycity","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"bilibili":{"icon":"/svg/bilibili.svg","link":"https://b23.tv/MK4nKb"},"steam":{"icon":"/svg/steam.svg","link":"https://steamcommunity.com/id/cloudycity"}}}},"mapped":true,"prev_post":{"title":"Laravel优雅地支持多SMS","uid":"54163d6395a4d14b28c019a0ae6d39e3","slug":"Laravel优雅地支持多SMS","date":"2021-01-29T10:23:49.000Z","updated":"2021-06-22T01:56:47.317Z","comments":true,"path":"api/articles/Laravel优雅地支持多SMS.json","cover":"https://miro.medium.com/max/1200/1*TqJCpGhLCZixYW6Y8xMVbg.jpeg","text":"小公司可能为了节省短信成本，会选择多家短信服务商，但短信本身的模板不会太多。本文介绍下Laravel下如何优雅地实现这种场景。 依赖Laravel社区一个很赞的枚举组件 composer require bensampo/laravel-enum 这里以腾讯短信为例 compos...","link":"","photos":[],"count_time":{"symbolsCount":"12k","symbolsTime":"11 mins."},"categories":[{"name":"php","slug":"php","count":13,"path":"api/categories/php.json"}],"tags":[{"name":"laravel","slug":"laravel","count":10,"path":"api/tags/laravel.json"}],"author":{"name":"CloudyCity","slug":"blog-author","avatar":"https://avatars.githubusercontent.com/u/17662451?s=400&u=643d94296b79c5e8424a2177fc4609a5e0ebeae0&v=4","link":"/","description":"拖延并发强迫症懒癌晚期患者","socials":{"github":"https://github.com/CloudyCity","twitter":"","stackoverflow":"https://stackoverflow.com/users/9827779/cloudycity","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"bilibili":{"icon":"/svg/bilibili.svg","link":"https://b23.tv/MK4nKb"},"steam":{"icon":"/svg/steam.svg","link":"https://steamcommunity.com/id/cloudycity"}}}}},"next_post":{"title":"ElementUI Tree组件实现完美的联动选择","uid":"cac2d032fc8fac9e1fbce97e3094eaa7","slug":"ElementUI-Tree组件实现完美的联动选择","date":"2021-01-07T06:24:56.000Z","updated":"2021-06-22T01:56:47.317Z","comments":true,"path":"api/articles/ElementUI-Tree组件实现完美的联动选择.json","cover":"https://pic4.zhimg.com/v2-a1e6c95e17fe8619c25bf3dbfebfb012_1440w.jpg?source=172ae18b","text":"Element Tree组件默认支持【联动选择】，但是无法【只选中父项，不选任何子项】，这里介绍如何实现完美的联动选择。 关闭自带的【联动选择 】特性ElTree的check-strictly属性默认为false，至少一个子项被勾选时，父项会进入半选中/选中状态。 改为true即...","link":"","photos":[],"count_time":{"symbolsCount":"2.2k","symbolsTime":"2 mins."},"categories":[{"name":"前端","slug":"前端","count":4,"path":"api/categories/前端.json"}],"tags":[{"name":"vue","slug":"vue","count":1,"path":"api/tags/vue.json"}],"author":{"name":"CloudyCity","slug":"blog-author","avatar":"https://avatars.githubusercontent.com/u/17662451?s=400&u=643d94296b79c5e8424a2177fc4609a5e0ebeae0&v=4","link":"/","description":"拖延并发强迫症懒癌晚期患者","socials":{"github":"https://github.com/CloudyCity","twitter":"","stackoverflow":"https://stackoverflow.com/users/9827779/cloudycity","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"bilibili":{"icon":"/svg/bilibili.svg","link":"https://b23.tv/MK4nKb"},"steam":{"icon":"/svg/steam.svg","link":"https://steamcommunity.com/id/cloudycity"}}}}}}